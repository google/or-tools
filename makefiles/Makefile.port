# Let's discover something about where we run
ifeq "$(SHELL)" "cmd.exe"
  SYSTEM = win
else
  ifeq "$(SHELL)" "sh.exe"
    SYSTEM = win
  else
    SYSTEM = unix
  endif
endif

# Unix specific part.
ifeq ("$(SYSTEM)","unix")
  OR_TOOLS_TOP ?= $(shell pwd)
  OS = $(shell uname -s)
  ifneq ($(shell which python2.7),)
    DETECTED_PYTHON_VERSION = 2.7
  else
    ifneq ($(shell which python2.6),)
      DETECTED_PYTHON_VERSION = 2.6
    endif
  endif
  MCS = $(shell which mcs)
  ifeq ($(OS),Linux)
    PLATFORM = LINUX
    CODEPORT = OpSys-Linux
    LBITS = $(shell getconf LONG_BIT)
    ifeq ($(LBITS),64)
      NETPLATFORM = anycpu
      PORT = Linux64
      PTRLENGTH = 64
      GUROBI_PLATFORM=linux64
      CANDIDATE_JDK_ROOTS = \
        /usr/local/buildtools/java/jdk-64 \
        /usr/lib/jvm/java-1.7.0-openjdk.x86_64 \
        /usr/lib64/jvm/java-1.6.0-openjdk-1.6.0 \
	/usr/lib64/jvm/java-6-sun-1.6.0.26 \
        /usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86_64 \
        /usr/lib/jvm/java-6-openjdk-amd64 \
        /usr/lib/jvm/java-7-openjdk-amd64
    else
      NETPLATFORM = x86
      PORT = Linux32
      PTRLENGTH = 32
      GUROBI_PLATFORM=linux32
      CANDIDATE_JDK_ROOTS = \
        /usr/local/buildtools/java/jdk-32 \
        /usr/lib/jvm/java-1.7.0-openjdk-i386 \
        /usr/lib/jvm/java-1.6.0-openjdk-1.6.0 \
	/usr/lib/jvm/java-6-sun-1.6.0.26 \
        /usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0.x86 \
        /usr/lib/jvm/java-6-openjdk-i386 \
        /usr/lib/jvm/java-7-openjdk-i386

    endif
    SELECTED_JDK_DEF = LINUX_JDK_ROOT = $(firstword $(wildcard $(CANDIDATE_JDK_ROOTS)))
  endif
  ifeq ($(OS),Darwin) # Assume Mac Os X
    PLATFORM = MACOSX
    PORT = MacOsX64
    CODEPORT = OpSys-OSX
    NETPLATFORM = x64
    PTRLENGTH = 64
    GUROBI_PLATFORM=mac64
    CANDIDATE_JDK_HEADERS = \
      /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home/include \
      /Developer/SDKs/MacOSX10.7.sdk/System/Library/Frameworks/JavaVM.framework/Versions/A/Headers \
      /System/Library/Frameworks/JavaVM.framework/Versions/A/Headers \
      /Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home/include \
      /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/include

    SELECTED_JDK_DEF = MAC_JDK_HEADERS = $(wildcard $(CANDIDATE_JDK_HEADERS))
    MAC_MIN_VERSION = 10.8
  endif
endif

# Windows specific part.
ifeq ("$(SYSTEM)","win")
  SCIP_MAKEFILE = \# SCIP not compiled
  SELECTED_JDK_DEF = WINDOWS_JDK_DIR = \# Please define JDK root.
  CODEPORT = OpSys-Windows
  ifeq ("$(VisualStudioVersion)", "12.0")
    VISUAL_STUDIO=2013
    VS_RELEASE=v120
    VS_COMTOOLS=120
  else
    ifeq ("$(VisualStudioVersion)", "11.0")
      VISUAL_STUDIO=2012
      VS_RELEASE=v110
      VS_COMTOOLS=110
    else
      VISUAL_STUDIO=2010
      VS_RELEASE=v100
      VS_COMTOOLS=100
    endif
  endif
  ifeq ("$(Platform)", "X64")
    PLATFORM = x64
  endif
  ifeq ("$(Platform)", "x64")
    PLATFORM = x64
  endif
  ifeq ("$(PLATFORM)", "x64")
    CBC_PLATFORM = x64-$(VS_RELEASE)-Release
    GLPK_PLATFORM = w64
    NETPLATFORM = x64
    PORT = VisualStudio$(VISUAL_STUDIO)-64b
    PTRLENGTH = 64
  else
    CBC_PLATFORM = Win32-$(VS_RELEASE)-Release
    GLPK_PLATFORM = w32
    NETPLATFORM = x86
    PLATFORM = Win32
    PORT = VisualStudio$(VISUAL_STUDIO)-32b
    PTRLENGTH = 32
  endif
  OS = Windows
  OR_TOOLS_TOP_AUX = $(shell cd)
  OR_TOOLS_TOP = $(shell echo $(OR_TOOLS_TOP_AUX) | tools\\sed.exe -e "s/\\/\\\\/g" | tools\\sed.exe -e "s/ //g")
endif

ifeq ("$(SYSTEM)","unix")
GIT_REVISION:= $(shell git log --oneline | wc -l | tr -d ' ')
GIT_HASH:= $(shell git log --pretty=format:'%h' -n 1)
else
GIT_REVISION:= $(shell git log --oneline | find /C " ")
GIT_HASH:= $(shell git log --pretty=format:'%h' -n 1)
endif
OR_TOOLS_VERSION := $(GIT_REVISION)

printport:
	@echo SHELL = $(SHELL)
	@echo OR_TOOLS_TOP = $(OR_TOOLS_TOP)
	@echo SYSTEM = $(SYSTEM)
	@echo PLATFORM = $(PLATFORM)
	@echo PTRLENGTH = $(PTRLENGTH)
	@echo DETECTED_PYTHON_VERSION = $(DETECTED_PYTHON_VERSION)
	@echo SELECTED_JDK_DEF = $(SELECTED_JDK_DEF)
	@echo GIT_REVISION = \"$(GIT_REVISION)\"
	@echo GIT_HASH = $(GIT_HASH)
	@echo PORT = $(PORT)
	@echo MCS = $(MCS)
