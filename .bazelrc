common --noenable_bzlmod

# ----CONFIG OPTIONS----
build --flag_alias=with_bop=//ortools/linear_solver:with_bop
build --flag_alias=with_cbc=//ortools/linear_solver:with_cbc
build --flag_alias=with_clp=//ortools/linear_solver:with_clp
build --flag_alias=with_cp_sat=//ortools/linear_solver:with_cp_sat
build --flag_alias=with_glop=//ortools/linear_solver:with_glop
build --flag_alias=with_glpk=//ortools/linear_solver:with_glpk
build --flag_alias=with_highs=//ortools/linear_solver:with_highs
build --flag_alias=with_pdlp=//ortools/linear_solver:with_pdlp
build --flag_alias=with_scip=//ortools/linear_solver:with_scip

build --flag_alias=with_cplex=//ortools/linear_solver:with_cplex
build --flag_alias=with_xpress=//ortools/linear_solver:with_xpress

# Sets the default Apple platform to macOS.
build --apple_platform_type=macos

# By default, build OR-Tools in C++ 17 mode, with various extra flags per
# platform.
build --enable_platform_specific_config

build:linux --cxxopt="-std=c++17" --cxxopt=-Wno-sign-compare --host_cxxopt="-std=c++17" --host_cxxopt=-Wno-sign-compare
build:macos --cxxopt="-std=c++17"  --cxxopt=-Wno-sign-compare --cxxopt=-mmacos-version-min=10.15  --cxxopt=-Wno-dangling-field --features=-supports_dynamic_linker
build:macos --host_cxxopt="-std=c++17" --host_cxxopt=-Wno-sign-compare --host_cxxopt=-mmacos-version-min=10.15 --host_cxxopt=-Wno-dangling-field
build:windows --cxxopt="/std:c++20" --host_cxxopt="/std:c++20"

# Enable the runfiles symlink tree on Windows. This makes it possible to build
# the pip package on Windows without an intermediate data-file archive, as the
# build_pip_package script in its current form (as of Aug 2023) uses the
# runfiles symlink tree to decide what to put into the Python wheel.
startup --windows_enable_symlinks
build:windows --enable_runfiles

# Print command lines for build commands.
# build --subcommands=pretty_print

# Print test logs for failed tests.
test --test_output=errors

# Put user-specific options in .bazelrc.user
try-import %workspace%/.bazelrc.user
