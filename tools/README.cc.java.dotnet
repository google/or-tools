# Introduction

This file describes how to install the OR-Tools C++, Java and .Net binary archive.

OR-Tools is located at https://developers.google.com/optimization

These modules have been tested under:

  - CentOS 8 (64 bit).
  - Debian 11 (64 bit).
  - Fedora 33 and up (64 bit).
  - Ubuntu 18.04 LTS and up (64 bit).
  - MacOS 12.5 Monterey (64 bit).
  - Microsoft Windows with Visual Studio 2022 (64-bit)

Upon decompressing the archive, you will get the following structure:

```
or-tools/
  [LICENSE](LICENSE)   <- Apache 2.0 License
  [README.md](README.md) <- This file
  Makefile  <- Main Makefile for C++,Java and .Net
  examples/ <- C++, Java and .Net examples
  include/  <- all include files
  objs/     <- directory containing C++ compiled object files (*.o)
  classes/  <- directory containing Java class files.
  packages/ <- directory containing .Net nuget packages.
  lib/      <- directory containing libraries and jar files.
  bin/      <- directory containing executable files
```

Warning: While OR-Tools ships with SCIP, please consult the SCIP license
to ensure that you are complying with it if you want to use this solver.

# C++

Running the examples will involve compiling them, then running them.
We have provided a makefile target to help you.

Use Makefile:

```shell
make run SOURCE=examples/basic_example/basic_example.cc
```

**OR** this is equivalent to compiling and running
`examples/basic_example/basic_example.cc`.

- on Unix:

  ```shell
  cd examples/basic_example
  cmake -S . -B build
  cmake --build build
  ```

- on Windows:

  ```shell
  cd examples/basic_example
  cmake -S . -B build
  cmake --build build
  ```

# Java

Running the examples will involve compiling them, then running them.
We have provided a makefile target to help you. You need to have the
java and javac tools accessible from the command line.

Use Makefile:

```shell
make run SOURCE=examples/java/LinearProgramming/src/main/java/com/google/ortools/LinearProgramming.java
```

**OR** this is equivalent to compiling and running `examples/java/LinearProgramming`.

```shell
cd examples/java/LinearProgramming
mvn compile
mvn exec:java
```

# .Net

Running the examples will involve compiling them, then running them.
We have provided a makefile target to help you. You need to have the
dotnet/cli tools accessible from the command line.

Use Makefile:

```shell
make run SOURCE=examples/dotnet/Vrp/Vrp.cs
```

**OR** this is equivalent to compiling and running
`examples/dotnet/Vrp/Vrp.cs`.

- on Unix:

  ```shell
  dotnet build examples/dotnet/Vrp/Vrp.csproj
  dotnet run --no-build --framework net6.0 --project examples/dotnet/Vrp/Vrp.csproj
  ```

- on Windows:

  ```shell
  dotnet build examples\dotnet\Vrp\Vrp.csproj
  dotnet run --no-build --framework net6.0 --project examples\dotnet\Vrp\Vrp.csproj
  ```
