# Copyright 2010-2025 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Description:
# Source code for the flatzinc interpreter. See www.minizinc.org.
# This is a google owned implementation.

load("@rules_cc//cc:cc_binary.bzl", "cc_binary")
load("@rules_cc//cc:cc_library.bzl", "cc_library")

package(default_visibility = ["//visibility:public"])

# ---------------------------------------------------------------------------
# Baseline flatzinc model.
# ---------------------------------------------------------------------------

cc_library(
    name = "model",
    srcs = ["model.cc"],
    hdrs = ["model.h"],
    deps = [
        "//ortools/base:stl_util",
        "//ortools/util:logging",
        "//ortools/util:string_array",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:str_format",
        "@abseil-cpp//absl/types:span",
    ],
)

# ---------------------------------------------------------------------------
# Parser.
# ---------------------------------------------------------------------------

cc_library(
    name = "parser_yacc_lib",
    srcs = ["parser.tab.cc"],
    hdrs = [
        "parser.tab.hh",
        "parser_util.cc",
        "parser_util.h",
    ],
    copts = [
        "-Wno-implicit-fallthrough",
        "$(STACK_FRAME_UNLIMITED)",  # parser.tab.cc
    ],
    deps = [
        ":model",
        "//ortools/base",
        "//ortools/base:mathutil",
        "//ortools/base:stl_util",
        "//ortools/base:types",
        "//ortools/util:string_array",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_library(
    name = "parser_lex_lib",
    srcs = ["parser.yy.cc"],
    copts = [
        "-Wno-implicit-fallthrough",
    ] + select({
        "@platforms//os:linux": ["-Wno-unused-function"],  # parser.yy.cc
        "@platforms//os:macos": ["-Wno-unused-function"],  # parser.yy.cc
        "//conditions:default": [],
    }),
    tags = ["keep_dep"],  # So that build_cleaner doesn't remove this as a dep.
    deps = [
        ":parser_yacc_lib",
        "//ortools/base",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "parser_lib",
    srcs = ["parser.cc"],
    hdrs = ["parser.h"],
    deps = [
        ":model",
        ":parser_lex_lib",
        ":parser_yacc_lib",
        "@abseil-cpp//absl/log",
    ],
)

cc_binary(
    name = "parser",
    srcs = ["parser_main.cc"],
    deps = [
        ":model",
        ":parser_lib",
        "//ortools/base",
        "//ortools/base:timer",
        "//ortools/util:logging",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/flags:flag",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/log:globals",
        "@abseil-cpp//absl/strings",
    ],
)

# ---------------------------------------------------------------------------
# Solution Checker
# ---------------------------------------------------------------------------

cc_library(
    name = "checker",
    srcs = ["checker.cc"],
    hdrs = ["checker.h"],
    deps = [
        ":model",
        "//ortools/util:logging",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
    ],
)

# ---------------------------------------------------------------------------
# Connection to SAT/CP solver.
# ---------------------------------------------------------------------------

cc_library(
    name = "cp_model_fz_solver",
    srcs = ["cp_model_fz_solver.cc"],
    hdrs = ["cp_model_fz_solver.h"],
    deps = [
        ":checker",
        ":model",
        "//ortools/base:iterator_adaptors",
        "//ortools/base:stl_util",
        "//ortools/sat:cp_model_cc_proto",
        "//ortools/sat:cp_model_checker",
        "//ortools/sat:cp_model_solver",
        "//ortools/sat:cp_model_utils",
        "//ortools/sat:model",
        "//ortools/sat:sat_parameters_cc_proto",
        "//ortools/util:logging",
        "//ortools/util:sorted_interval_list",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/base:no_destructor",
        "@abseil-cpp//absl/container:btree",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/flags:flag",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
        "@protobuf",
    ],
)

# Main binary to parse and execute a fz model using the CP-SAT solver.
cc_binary(
    name = "fz",
    srcs = ["fz.cc"],
    deps = [
        ":cp_model_fz_solver",
        ":model",
        ":parser_lib",
        "//ortools/base",
        "//ortools/base:path",
        "//ortools/base:timer",
        "//ortools/util:logging",
        "@abseil-cpp//absl/flags:flag",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/log:flags",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/time",
    ],
)
