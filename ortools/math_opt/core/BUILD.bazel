# Copyright 2010-2025 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_cc//cc:cc_test.bzl", "cc_test")

package(default_visibility = ["//ortools/math_opt:__subpackages__"])

cc_library(
    name = "math_opt_proto_utils",
    srcs = ["math_opt_proto_utils.cc"],
    hdrs = ["math_opt_proto_utils.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":sparse_vector_view",
        "//ortools/base",
        "//ortools/base:status_macros",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:infeasible_subsystem_cc_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt:solution_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/strings",
    ],
)

cc_test(
    name = "math_opt_proto_utils_test",
    srcs = ["math_opt_proto_utils_test.cc"],
    deps = [
        ":math_opt_proto_utils",
        ":sparse_collection_matchers",
        "//ortools/base",
        "//ortools/base:gmock_main",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt:solution_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@abseil-cpp//absl/status",
    ],
)

cc_library(
    name = "sparse_vector_view",
    hdrs = ["sparse_vector_view.h"],
    deps = [
        ":arrow_operator_proxy",
        ":sparse_vector",
        "//ortools/base",
        "//ortools/base:map_util",
        "//ortools/base:types",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/types:span",
        "@protobuf",
    ],
)

cc_test(
    name = "sparse_vector_view_test",
    srcs = ["sparse_vector_view_test.cc"],
    deps = [
        ":sparse_vector",
        ":sparse_vector_view",
        "//ortools/base:gmock_main",
        "//ortools/base:intops",
        "//ortools/base:logging",
        "//ortools/base:types",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/strings",
        "@protobuf",
    ],
)

cc_library(
    name = "model_summary",
    srcs = ["model_summary.cc"],
    hdrs = ["model_summary.h"],
    deps = [
        "//ortools/base:linked_hash_map",
        "//ortools/base:status_macros",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_test(
    name = "model_summary_test",
    srcs = ["model_summary_test.cc"],
    deps = [
        ":model_summary",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "//ortools/base:parse_text_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "solver_interface",
    srcs = ["solver_interface.cc"],
    hdrs = ["solver_interface.h"],
    deps = [
        ":non_streamable_solver_init_arguments",
        "//ortools/base:map_util",
        "//ortools/base:status_macros",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:infeasible_subsystem_cc_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/port:proto_utils",
        "//ortools/util:solve_interrupter",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/base:nullability",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/synchronization",
    ],
)

cc_library(
    name = "solver",
    srcs = ["solver.cc"],
    hdrs = ["solver.h"],
    deps = [
        ":base_solver",
        ":concurrent_calls_guard",
        ":math_opt_proto_utils",
        ":model_summary",
        ":non_streamable_solver_init_arguments",
        ":solver_debug",
        ":solver_interface",
        "//ortools/base:status_macros",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:infeasible_subsystem_cc_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt/validators:callback_validator",
        "//ortools/math_opt/validators:infeasible_subsystem_validator",
        "//ortools/math_opt/validators:model_parameters_validator",
        "//ortools/math_opt/validators:model_validator",
        "//ortools/math_opt/validators:result_validator",
        "//ortools/math_opt/validators:solve_parameters_validator",
        "//ortools/port:proto_utils",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/memory",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "solver_interface_mock",
    testonly = True,
    srcs = ["solver_interface_mock.cc"],
    hdrs = ["solver_interface_mock.h"],
    deps = [
        ":solver_interface",
        ":solver_interface_testing",
        "//ortools/base:gmock",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:infeasible_subsystem_cc_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/util:solve_interrupter",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/log:die_if_null",
        "@abseil-cpp//absl/random",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/synchronization",
    ],
)

cc_library(
    name = "sparse_collection_matchers",
    testonly = True,
    srcs = ["sparse_collection_matchers.cc"],
    hdrs = ["sparse_collection_matchers.h"],
    deps = [
        ":sparse_vector_view",
        "//ortools/base:gmock",
        "//ortools/math_opt:sparse_containers_cc_proto",
    ],
)

cc_test(
    name = "sparse_collection_matchers_test",
    srcs = ["sparse_collection_matchers_test.cc"],
    deps = [
        ":sparse_collection_matchers",
        "//ortools/base:gmock_main",
        "//ortools/math_opt:sparse_containers_cc_proto",
    ],
)

cc_library(
    name = "non_streamable_solver_init_arguments",
    srcs = ["non_streamable_solver_init_arguments.cc"],
    hdrs = ["non_streamable_solver_init_arguments.h"],
    deps = ["//ortools/math_opt:parameters_cc_proto"],
)

cc_test(
    name = "non_streamable_solver_init_arguments_test",
    srcs = ["non_streamable_solver_init_arguments_test.cc"],
    deps = [
        ":non_streamable_solver_init_arguments",
        "//ortools/base:gmock_main",
    ],
)

cc_library(
    name = "solver_debug",
    srcs = ["solver_debug.cc"],
    hdrs = ["solver_debug.h"],
    deps = ["//ortools/base:base_export"],
)

cc_library(
    name = "arrow_operator_proxy",
    hdrs = ["arrow_operator_proxy.h"],
)

cc_library(
    name = "sparse_vector",
    hdrs = ["sparse_vector.h"],
)

cc_library(
    name = "sparse_submatrix",
    srcs = ["sparse_submatrix.cc"],
    hdrs = ["sparse_submatrix.h"],
    deps = [
        ":sparse_vector",
        ":sparse_vector_view",
        "//ortools/base:logging",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_test(
    name = "sparse_submatrix_test",
    srcs = ["sparse_submatrix_test.cc"],
    deps = [
        ":sparse_collection_matchers",
        ":sparse_submatrix",
        ":sparse_vector",
        ":sparse_vector_view",
        "//ortools/base:gmock_main",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "solver_interface_testing",
    testonly = True,
    srcs = ["solver_interface_testing.cc"],
    hdrs = ["solver_interface_testing.h"],
    deps = [
        ":solver_interface",
        "@abseil-cpp//absl/base:nullability",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
    ],
)

cc_test(
    name = "solver_interface_testing_test",
    srcs = ["solver_interface_testing_test.cc"],
    deps = [
        ":solver_interface",
        ":solver_interface_testing",
        "//ortools/base:gmock",
        "@abseil-cpp//absl/base:nullability",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
    ],
)

cc_library(
    name = "inverted_bounds",
    srcs = ["inverted_bounds.cc"],
    hdrs = ["inverted_bounds.h"],
    deps = [
        "//ortools/base:status_macros",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_test(
    name = "inverted_bounds_test",
    srcs = ["inverted_bounds_test.cc"],
    deps = [
        ":inverted_bounds",
        "//ortools/base:gmock_main",
        "@abseil-cpp//absl/status",
    ],
)

cc_library(
    name = "invalid_indicators",
    srcs = ["invalid_indicators.cc"],
    hdrs = ["invalid_indicators.h"],
    deps = [
        "//ortools/base:status_macros",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/strings",
    ],
)

cc_test(
    name = "invalid_indicators_test",
    srcs = ["invalid_indicators_test.cc"],
    deps = [
        ":invalid_indicators",
        "//ortools/base:gmock_main",
        "@abseil-cpp//absl/status",
    ],
)

cc_library(
    name = "concurrent_calls_guard",
    srcs = ["concurrent_calls_guard.cc"],
    hdrs = ["concurrent_calls_guard.h"],
    deps = [
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/synchronization",
    ],
)

cc_test(
    name = "concurrent_calls_guard_test",
    srcs = ["concurrent_calls_guard_test.cc"],
    deps = [
        ":concurrent_calls_guard",
        "//ortools/base:gmock_main",
        "//ortools/base:status_macros",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "empty_bounds",
    srcs = ["empty_bounds.cc"],
    hdrs = ["empty_bounds.h"],
    deps = [
        "//ortools/math_opt:result_cc_proto",
        "//ortools/util:fp_roundtrip_conv",
        "@abseil-cpp//absl/strings",
    ],
)

cc_test(
    name = "empty_bounds_test",
    srcs = ["empty_bounds_test.cc"],
    deps = [
        ":empty_bounds",
        ":model_summary",
        "//ortools/base:gmock_main",
        "//ortools/math_opt/validators:result_validator",
    ],
)

cc_library(
    name = "sorted",
    hdrs = ["sorted.h"],
    deps = [
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@protobuf",
    ],
)

cc_test(
    name = "sorted_test",
    srcs = ["sorted_test.cc"],
    deps = [
        ":sorted",
        "//ortools/base:gmock_main",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@protobuf",
    ],
)

cc_library(
    name = "base_solver",
    srcs = ["base_solver.cc"],
    hdrs = ["base_solver.h"],
    deps = [
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:infeasible_subsystem_cc_proto",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/util:solve_interrupter",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:string_view",
    ],
)
