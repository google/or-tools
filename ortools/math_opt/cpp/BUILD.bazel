# Copyright 2010-2025 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@protobuf//bazel:cc_proto_library.bzl", "cc_proto_library")
load("@protobuf//bazel:proto_library.bzl", "proto_library")
load("@rules_cc//cc:cc_library.bzl", "cc_library")
load("@rules_cc//cc:cc_test.bzl", "cc_test")

# External users should depend only on ":math_opt" and include
# "math_opt.h". Hence other libraries are private.
package(default_visibility = [
    "//ortools/math_opt/constraints:__subpackages__",
])

cc_library(
    name = "math_opt",
    hdrs = ["math_opt.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":model",
        ":solve",
        ":solver_resources",
    ],
)

cc_library(
    name = "basis_status",
    srcs = ["basis_status.cc"],
    hdrs = ["basis_status.h"],
    deps = [
        ":enums",
        "//ortools/math_opt:solution_cc_proto",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_test(
    name = "basis_status_test",
    srcs = ["basis_status_test.cc"],
    deps = [
        ":basis_status",
        ":enums_testing",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
    ],
)

cc_library(
    name = "sparse_containers",
    srcs = ["sparse_containers.cc"],
    hdrs = ["sparse_containers.h"],
    deps = [
        ":basis_status",
        ":linear_constraint",
        ":objective",
        ":variable_and_expressions",
        "//ortools/base:logging",
        "//ortools/base:status_macros",
        "//ortools/math_opt:solution_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/constraints/quadratic:quadratic_constraint",
        "//ortools/math_opt/core:sparse_vector_view",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_types",
        "//ortools/math_opt/validators:sparse_vector_validator",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/types:span",
        "@protobuf",
    ],
)

cc_test(
    name = "sparse_containers_test",
    srcs = ["sparse_containers_test.cc"],
    deps = [
        ":matchers",
        ":math_opt",
        ":sparse_containers",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "//ortools/math_opt/constraints/quadratic:quadratic_constraint",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/status",
    ],
)

cc_library(
    name = "model",
    srcs = ["model.cc"],
    hdrs = ["model.h"],
    deps = [
        ":key_types",
        ":linear_constraint",
        ":objective",
        ":update_tracker",
        ":variable_and_expressions",
        "//ortools/base:intops",
        "//ortools/base:status_macros",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt/constraints/indicator:indicator_constraint",
        "//ortools/math_opt/constraints/quadratic:quadratic_constraint",
        "//ortools/math_opt/constraints/second_order_cone:second_order_cone_constraint",
        "//ortools/math_opt/constraints/second_order_cone:storage",
        "//ortools/math_opt/constraints/sos:sos1_constraint",
        "//ortools/math_opt/constraints/sos:sos2_constraint",
        "//ortools/math_opt/constraints/util:model_util",
        "//ortools/math_opt/storage:linear_expression_data",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_types",
        "//ortools/math_opt/storage:sparse_coefficient_map",
        "//ortools/math_opt/storage:sparse_matrix",
        "//ortools/util:fp_roundtrip_conv",
        "@abseil-cpp//absl/base:nullability",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/log:die_if_null",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_test(
    name = "model_test",
    srcs = ["model_test.cc"],
    tags = ["manual"],
    deps = [
        ":key_types",
        ":linear_constraint",
        ":math_opt",
        ":model",
        ":update_tracker",
        ":variable_and_expressions",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "//ortools/base:parse_text_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/constraints/indicator:indicator_constraint",
        "//ortools/math_opt/constraints/quadratic:quadratic_constraint",
        "//ortools/math_opt/constraints/second_order_cone:second_order_cone_constraint",
        "//ortools/math_opt/constraints/sos:sos1_constraint",
        "//ortools/math_opt/constraints/sos:sos2_constraint",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_types",
        "//ortools/math_opt/testing:stream",
        "//ortools/util:fp_roundtrip_conv_testing",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "variable_and_expressions",
    srcs = ["variable_and_expressions.cc"],
    hdrs = ["variable_and_expressions.h"],
    deps = [
        ":formatters",
        ":key_types",
        "//ortools/base",
        "//ortools/base:intops",
        "//ortools/base:map_util",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_item",
        "//ortools/math_opt/storage:model_storage_types",
        "//ortools/util:fp_roundtrip_conv",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
    ],
)

# Same as `variable_and_expressions` but activates the counters of instances of
# LinearExpression. Only for tests.
cc_library(
    name = "variable_and_expressions_with_counters",
    testonly = 1,
    srcs = ["variable_and_expressions.cc"],
    hdrs = ["variable_and_expressions.h"],
    defines = ["MATH_OPT_USE_EXPRESSION_COUNTERS"],
    deps = [
        ":formatters",
        ":key_types",
        "//ortools/base",
        "//ortools/base:intops",
        "//ortools/base:map_util",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_item",
        "//ortools/math_opt/storage:model_storage_types",
        "//ortools/util:fp_roundtrip_conv",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
    ],
)

cc_test(
    name = "variable_and_expressions_test",
    srcs = ["variable_and_expressions_test.cc"],
    deps = [
        ":matchers",
        ":variable_and_expressions",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "//ortools/math_opt/elemental:elements",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/util:fp_roundtrip_conv",
        "//ortools/util:fp_roundtrip_conv_testing",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

# Same as `variable_and_expressions_test` but activates the counters of
# instances of LinearExpression and the associated tests.
cc_test(
    name = "variable_and_expressions_with_counters_test",
    srcs = ["variable_and_expressions_test.cc"],
    defines = ["MATH_OPT_USE_EXPRESSION_COUNTERS"],
    deps = [
        ":matchers",
        ":variable_and_expressions_with_counters",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "//ortools/math_opt/elemental:elements",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/util:fp_roundtrip_conv",
        "//ortools/util:fp_roundtrip_conv_testing",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_library(
    name = "objective",
    srcs = ["objective.cc"],
    hdrs = ["objective.h"],
    deps = [
        ":key_types",
        ":variable_and_expressions",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_item",
        "//ortools/math_opt/storage:model_storage_types",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
    ],
)

cc_test(
    name = "objective_test",
    srcs = ["objective_test.cc"],
    deps = [
        ":objective",
        ":variable_and_expressions",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_types",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "linear_constraint",
    hdrs = ["linear_constraint.h"],
    deps = [
        ":key_types",
        ":variable_and_expressions",
        "//ortools/math_opt/constraints/util:model_util",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_item",
        "//ortools/math_opt/storage:model_storage_types",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
    ],
)

cc_test(
    name = "linear_constraint_test",
    srcs = ["linear_constraint_test.cc"],
    deps = [
        ":linear_constraint",
        ":matchers",
        ":model",
        ":variable_and_expressions",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "//ortools/base:intops",
        "//ortools/math_opt/constraints/util:model_util",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_types",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "solution",
    srcs = ["solution.cc"],
    hdrs = ["solution.h"],
    deps = [
        ":basis_status",
        ":enums",
        ":linear_constraint",
        ":objective",
        ":sparse_containers",
        ":variable_and_expressions",
        "//ortools/base:status_macros",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt:solution_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/constraints/quadratic:quadratic_constraint",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/util:status_macros",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_test(
    name = "solution_test",
    srcs = ["solution_test.cc"],
    deps = [
        ":enums_testing",
        ":linear_constraint",
        ":matchers",
        ":math_opt",
        ":objective",
        ":solution",
        ":variable_and_expressions",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "//ortools/math_opt:solution_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/storage:model_storage",
        "@abseil-cpp//absl/status",
    ],
)

cc_library(
    name = "solve_result",
    srcs = ["solve_result.cc"],
    hdrs = ["solve_result.h"],
    deps = [
        ":enums",
        ":linear_constraint",
        ":solution",
        ":variable_and_expressions",
        "//ortools/base:protoutil",
        "//ortools/base:status_macros",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt:solution_cc_proto",
        "//ortools/math_opt/core:math_opt_proto_utils",
        "//ortools/math_opt/solvers/gscip:gscip_cc_proto",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/port:proto_utils",
        "//ortools/util:fp_roundtrip_conv",
        "//ortools/util:status_macros",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/time",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "map_filter",
    srcs = ["map_filter.cc"],
    hdrs = ["map_filter.h"],
    deps = [
        ":key_types",
        ":linear_constraint",
        ":model",
        ":variable_and_expressions",
        "//ortools/base:status_macros",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/storage:model_storage",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
    ],
)

cc_test(
    name = "map_filter_test",
    srcs = ["map_filter_test.cc"],
    deps = [
        ":linear_constraint",
        ":map_filter",
        ":model",
        ":variable_and_expressions",
        "//ortools/base:gmock_main",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/storage:model_storage",
        "@abseil-cpp//absl/status",
    ],
)

cc_library(
    name = "callback",
    srcs = ["callback.cc"],
    hdrs = ["callback.h"],
    deps = [
        ":enums",
        ":map_filter",
        ":model",
        ":sparse_containers",
        ":variable_and_expressions",
        "//ortools/base",
        "//ortools/base:protoutil",
        "//ortools/base:status_macros",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/util:status_macros",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/time",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "key_types",
    hdrs = ["key_types.h"],
    deps = [
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/storage:model_storage_item",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_test(
    name = "key_types_test",
    srcs = ["key_types_test.cc"],
    deps = [
        ":key_types",
        ":variable_and_expressions",
        "//ortools/base:gmock_main",
        "//ortools/math_opt/storage:model_storage",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/status",
        "@google_benchmark//:benchmark",
    ],
)

cc_library(
    name = "model_solve_parameters",
    srcs = ["model_solve_parameters.cc"],
    hdrs = ["model_solve_parameters.h"],
    deps = [
        ":linear_constraint",
        ":map_filter",
        ":model",
        ":solution",
        ":sparse_containers",
        ":variable_and_expressions",
        "//ortools/base:protoutil",
        "//ortools/base:status_macros",
        "//ortools/math_opt:model_parameters_cc_proto",
        "//ortools/math_opt:solution_cc_proto",
        "//ortools/math_opt:sparse_containers_cc_proto",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/util:status_macros",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/time",
        "@protobuf",
    ],
)

cc_library(
    name = "update_tracker",
    srcs = ["update_tracker.cc"],
    hdrs = ["update_tracker.h"],
    deps = [
        "//ortools/base:logging",
        "//ortools/math_opt:model_cc_proto",
        "//ortools/math_opt:model_update_cc_proto",
        "//ortools/math_opt/storage:model_storage",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "message_callback",
    srcs = ["message_callback.cc"],
    hdrs = ["message_callback.h"],
    deps = [
        "//ortools/base:logging",
        "//ortools/base:source_location",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/synchronization",
        "@abseil-cpp//absl/types:span",
        "@protobuf",
    ],
)

cc_library(
    name = "solver_init_arguments",
    hdrs = ["solver_init_arguments.h"],
    deps = [
        ":streamable_solver_init_arguments",
        "//ortools/math_opt/core:non_streamable_solver_init_arguments",
    ],
)

cc_library(
    name = "solve_arguments",
    srcs = ["solve_arguments.cc"],
    hdrs = ["solve_arguments.h"],
    deps = [
        ":callback",
        ":message_callback",
        ":model_solve_parameters",
        ":parameters",
        "//ortools/base:status_macros",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/util:solve_interrupter",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/status",
    ],
)

cc_test(
    name = "solve_arguments_test",
    srcs = ["solve_arguments_test.cc"],
    deps = [
        ":math_opt",
        ":solve_arguments",
        "//ortools/base:gmock_main",
        "@abseil-cpp//absl/status",
    ],
)

cc_library(
    name = "solve",
    srcs = ["solve.cc"],
    hdrs = ["solve.h"],
    deps = [
        ":compute_infeasible_subsystem_arguments",
        ":compute_infeasible_subsystem_result",
        ":incremental_solver",
        ":model",
        ":parameters",
        ":solve_arguments",
        ":solve_impl",
        ":solve_result",
        ":solver_init_arguments",
        ":streamable_solver_init_arguments",
        ":update_result",
        "//ortools/math_opt:callback_cc_proto",
        "//ortools/math_opt:infeasible_subsystem_cc_proto",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt/core:base_solver",
        "//ortools/math_opt/core:solver",
        "@abseil-cpp//absl/status:statusor",
    ],
)

cc_library(
    name = "streamable_solver_init_arguments",
    srcs = ["streamable_solver_init_arguments.cc"],
    hdrs = ["streamable_solver_init_arguments.h"],
    deps = [
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt/solvers:gurobi_cc_proto",
        "@abseil-cpp//absl/status:statusor",
    ],
)

cc_test(
    name = "streamable_solver_init_arguments_test",
    srcs = ["streamable_solver_init_arguments_test.cc"],
    deps = [
        ":streamable_solver_init_arguments",
        "//ortools/base:gmock_main",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt/solvers:gurobi_cc_proto",
    ],
)

cc_library(
    name = "parameters",
    srcs = ["parameters.cc"],
    hdrs = ["parameters.h"],
    deps = [
        ":enums",
        "//ortools/base:linked_hash_map",
        "//ortools/base:protoutil",
        "//ortools/base:status_macros",
        "//ortools/glop:parameters_cc_proto",
        "//ortools/math_opt:parameters_cc_proto",
        "//ortools/math_opt/solvers:glpk_cc_proto",
        "//ortools/math_opt/solvers:gurobi_cc_proto",
        "//ortools/math_opt/solvers:highs_cc_proto",
        "//ortools/math_opt/solvers/gscip:gscip_cc_proto",
        "//ortools/pdlp:solvers_cc_proto",
        "//ortools/port:proto_utils",
        "//ortools/sat:sat_parameters_cc_proto",
        "//ortools/util:status_macros",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/time",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "matchers",
    testonly = 1,
    srcs = ["matchers.cc"],
    hdrs = ["matchers.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":linear_constraint",
        ":math_opt",
        ":update_result",
        ":variable_and_expressions",
        "//ortools/base:gmock",
        "//ortools/base:logging",
        "//ortools/math_opt/constraints/quadratic:quadratic_constraint",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_test(
    name = "matchers_test",
    srcs = ["matchers_test.cc"],
    deps = [
        ":matchers",
        ":math_opt",
        ":model",
        ":solution",
        ":solve_result",
        "//ortools/base:gmock",
        "//ortools/base:gmock_main",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "enums",
    hdrs = ["enums.h"],
    deps = [
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

proto_library(
    name = "enums_test_proto",
    srcs = ["enums_test.proto"],
)

cc_proto_library(
    name = "enums_test_cc_proto",
    deps = [":enums_test_proto"],
)

cc_test(
    name = "enums_test",
    srcs = ["enums_test.cc"],
    deps = [
        ":enums",
        ":enums_test_cc_proto",
        ":enums_testing",
        "//ortools/base:gmock_main",
        "//ortools/base:logging",
        "//ortools/math_opt/testing:stream",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "enums_testing",
    testonly = True,
    hdrs = ["enums_testing.h"],
    deps = [
        ":enums",
        "//ortools/base:gmock",
        "//ortools/base:logging",
        "@abseil-cpp//absl/numeric:int128",
        "@abseil-cpp//absl/strings",
    ],
    # Make sure the tests are included when using --dynamic_mode=off.
    alwayslink = 1,
)

cc_library(
    name = "statistics",
    srcs = ["statistics.cc"],
    hdrs = ["statistics.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":model",
        "//ortools/math_opt/storage:model_storage",
    ],
)

cc_test(
    name = "statistics_test",
    srcs = ["statistics_test.cc"],
    deps = [
        ":model",
        ":statistics",
        "//ortools/base:gmock_main",
    ],
)

cc_library(
    name = "formatters",
    hdrs = ["formatters.h"],
    deps = ["//ortools/util:fp_roundtrip_conv"],
)

cc_library(
    name = "update_result",
    hdrs = ["update_result.h"],
    deps = ["//ortools/math_opt:model_update_cc_proto"],
)

cc_library(
    name = "compute_infeasible_subsystem_result",
    srcs = ["compute_infeasible_subsystem_result.cc"],
    hdrs = ["compute_infeasible_subsystem_result.h"],
    deps = [
        ":enums",
        ":key_types",
        ":linear_constraint",
        ":solve_result",
        ":variable_and_expressions",
        "//ortools/base:status_macros",
        "//ortools/math_opt:infeasible_subsystem_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt/constraints/indicator:indicator_constraint",
        "//ortools/math_opt/constraints/quadratic:quadratic_constraint",
        "//ortools/math_opt/constraints/second_order_cone:second_order_cone_constraint",
        "//ortools/math_opt/constraints/sos:sos1_constraint",
        "//ortools/math_opt/constraints/sos:sos2_constraint",
        "//ortools/math_opt/core:math_opt_proto_utils",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/validators:infeasible_subsystem_validator",
        "//ortools/util:status_macros",
        "@abseil-cpp//absl/algorithm:container",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_test(
    name = "compute_infeasible_subsystem_result_test",
    srcs = ["compute_infeasible_subsystem_result_test.cc"],
    deps = [
        ":compute_infeasible_subsystem_result",
        ":enums",
        ":linear_constraint",
        ":matchers",
        ":model",
        ":solve_result",
        ":variable_and_expressions",
        "//ortools/base:gmock_main",
        "//ortools/base:status_macros",
        "//ortools/math_opt:infeasible_subsystem_cc_proto",
        "//ortools/math_opt:result_cc_proto",
        "//ortools/math_opt/constraints/indicator:indicator_constraint",
        "//ortools/math_opt/constraints/quadratic:quadratic_constraint",
        "//ortools/math_opt/constraints/second_order_cone:second_order_cone_constraint",
        "//ortools/math_opt/constraints/sos:sos1_constraint",
        "//ortools/math_opt/constraints/sos:sos2_constraint",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/math_opt/testing:stream",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
    ],
)

cc_library(
    name = "compute_infeasible_subsystem_arguments",
    hdrs = ["compute_infeasible_subsystem_arguments.h"],
    deps = [
        ":message_callback",
        ":parameters",
        "//ortools/util:solve_interrupter",
    ],
)

cc_library(
    name = "solver_resources",
    srcs = ["solver_resources.cc"],
    hdrs = ["solver_resources.h"],
    deps = [
        "//ortools/math_opt:rpc_cc_proto",
        "//ortools/port:proto_utils",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:string_view",
    ],
)

cc_test(
    name = "solver_resources_test",
    srcs = ["solver_resources_test.cc"],
    deps = [
        ":solver_resources",
        "//ortools/base:gmock_main",
    ],
)

cc_library(
    name = "solve_impl",
    srcs = ["solve_impl.cc"],
    hdrs = ["solve_impl.h"],
    deps = [
        ":compute_infeasible_subsystem_arguments",
        ":compute_infeasible_subsystem_result",
        ":incremental_solver",
        ":model",
        ":parameters",
        ":solve_arguments",
        ":solve_result",
        ":update_result",
        ":update_tracker",
        "//ortools/base:status_macros",
        "//ortools/math_opt/core:base_solver",
        "//ortools/math_opt/storage:model_storage",
        "//ortools/util:solve_interrupter",
        "//ortools/util:status_macros",
        "@abseil-cpp//absl/functional:any_invocable",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/memory",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/synchronization",
    ],
)

cc_library(
    name = "incremental_solver",
    hdrs = ["incremental_solver.h"],
    deps = [
        ":compute_infeasible_subsystem_arguments",
        ":compute_infeasible_subsystem_result",
        ":parameters",
        ":solve_arguments",
        ":solve_result",
        ":update_result",
        "@abseil-cpp//absl/status:statusor",
    ],
)

cc_library(
    name = "remote_streaming_mode",
    srcs = ["remote_streaming_mode.cc"],
    hdrs = ["remote_streaming_mode.h"],
    deps = ["@abseil-cpp//absl/strings:string_view"],
)

cc_test(
    name = "remote_streaming_mode_test",
    srcs = ["remote_streaming_mode_test.cc"],
    deps = [
        ":remote_streaming_mode",
        "//ortools/base:gmock_main",
        "@abseil-cpp//absl/flags:marshalling",
        "@abseil-cpp//absl/strings",
    ],
)
