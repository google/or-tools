// Copyright 2010-2025 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Messages for representing subsets of a models constraints, and for computing
// infeasible subsystems of a model. Cf. "Irreducible Inconsistent subsystems"
// (IIS), which are useful for debugging/diagnosing model infeasibility.
syntax = "proto3";

package operations_research.math_opt;

import "ortools/math_opt/result.proto";

option java_package = "com.google.ortools.mathopt";
option java_multiple_files = true;

// Represents a subset of the constraints (including variable bounds and
// integrality) of a `ModelProto`.
message ModelSubsetProto {
  message Bounds {
    bool lower = 1;
    bool upper = 2;
  }

  // Keys are variable IDs, and must be in [0, max(int64)). Values indicate
  // which of the lower and upper variable bounds are included in the subsystem.
  map<int64, Bounds> variable_bounds = 1;

  // Variable IDs. Values must be in [0, max(int64)) and strictly increasing.
  repeated int64 variable_integrality = 2;

  // Keys are linear constraint IDs, and must be in [0, max(int64)). Values
  // indicate which of the lower and upper bounds on the linear constraint are
  // included in the subsystem.
  map<int64, Bounds> linear_constraints = 3;

  // Keys are quadratic constraint IDs, and must be in [0, max(int64)). Values
  // indicate which of the lower and upper bounds on the quadratic constraint
  // are included in the subsystem.
  map<int64, Bounds> quadratic_constraints = 4;

  // Second-order cone constraint IDs. Values must be in [0, max(int64)) and
  // strictly increasing.
  repeated int64 second_order_cone_constraints = 5;

  // SOS1 constraint IDs. Values must be in [0, max(int64)) and strictly
  // increasing.
  repeated int64 sos1_constraints = 6;

  // SOS2 constraint IDs. Values must be in [0, max(int64)) and strictly
  // increasing.
  repeated int64 sos2_constraints = 7;

  // Indicator constraint IDs. Values must be in [0, max(int64)) and strictly
  // increasing.
  repeated int64 indicator_constraints = 8;
}

message ComputeInfeasibleSubsystemResultProto {
  // The primal feasibility status of the model, as determined by the solver.
  FeasibilityStatusProto feasibility = 1;

  // An infeasible subsystem of the input model. Set if `feasibility` is
  // INFEASIBLE and empty otherwise. The IDs correspond to those constraints
  // included in the infeasible subsystem. Submessages with `Bounds` values
  // indicate which side of a potentially ranged constraint are included in the
  // subsystem: lower bound, upper bound, or both.
  ModelSubsetProto infeasible_subsystem = 2;

  // True if the solver has certified that the returned subsystem is minimal
  // (the instance is feasible if any additional constraint is removed). Note
  // that, due to problem transformations MathOpt applies or idiosyncrasies of
  // the solvers contract, the returned infeasible subsystem may not actually be
  // minimal.
  bool is_minimal = 3;
}
