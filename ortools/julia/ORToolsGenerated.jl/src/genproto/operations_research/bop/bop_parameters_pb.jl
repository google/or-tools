# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:02.124
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/bop/bop_parameters.proto (proto2 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"BopOptimizerMethod.OptimizerType", var"BopParameters.ThreadSynchronizationType"
export BopOptimizerMethod, BopSolverOptimizerSet, BopParameters


@enumx var"BopOptimizerMethod.OptimizerType" SAT_CORE_BASED=0 SAT_LINEAR_SEARCH=15 LINEAR_RELAXATION=1 LOCAL_SEARCH=2 RANDOM_FIRST_SOLUTION=3 RANDOM_CONSTRAINT_LNS=4 RANDOM_VARIABLE_LNS=5 COMPLETE_LNS=7 LP_FIRST_SOLUTION=8 OBJECTIVE_FIRST_SOLUTION=9 USER_GUIDED_FIRST_SOLUTION=14 RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP=11 RANDOM_VARIABLE_LNS_GUIDED_BY_LP=12 RELATION_GRAPH_LNS=16 RELATION_GRAPH_LNS_GUIDED_BY_LP=17

@enumx var"BopParameters.ThreadSynchronizationType" NO_SYNCHRONIZATION=0 SYNCHRONIZE_ALL=1 SYNCHRONIZE_ON_RIGHT=2

struct BopOptimizerMethod
    var"#type"::var"BopOptimizerMethod.OptimizerType".T
end
PB.default_values(::Type{BopOptimizerMethod}) = (;var"#type" = var"BopOptimizerMethod.OptimizerType".SAT_CORE_BASED)
PB.field_numbers(::Type{BopOptimizerMethod}) = (;var"#type" = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:BopOptimizerMethod})
    var"#type" = var"BopOptimizerMethod.OptimizerType".SAT_CORE_BASED
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            var"#type" = PB.decode(d, var"BopOptimizerMethod.OptimizerType".T)
        else
            PB.skip(d, wire_type)
        end
    end
    return BopOptimizerMethod(var"#type")
end

function PB.encode(e::PB.AbstractProtoEncoder, x::BopOptimizerMethod)
    initpos = position(e.io)
    x.var"#type" != var"BopOptimizerMethod.OptimizerType".SAT_CORE_BASED && PB.encode(e, 1, x.var"#type")
    return position(e.io) - initpos
end
function PB._encoded_size(x::BopOptimizerMethod)
    encoded_size = 0
    x.var"#type" != var"BopOptimizerMethod.OptimizerType".SAT_CORE_BASED && (encoded_size += PB._encoded_size(x.var"#type", 1))
    return encoded_size
end

struct BopSolverOptimizerSet
    methods::Vector{BopOptimizerMethod}
end
PB.default_values(::Type{BopSolverOptimizerSet}) = (;methods = Vector{BopOptimizerMethod}())
PB.field_numbers(::Type{BopSolverOptimizerSet}) = (;methods = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:BopSolverOptimizerSet})
    methods = PB.BufferedVector{BopOptimizerMethod}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, methods)
        else
            PB.skip(d, wire_type)
        end
    end
    return BopSolverOptimizerSet(methods[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::BopSolverOptimizerSet)
    initpos = position(e.io)
    !isempty(x.methods) && PB.encode(e, 1, x.methods)
    return position(e.io) - initpos
end
function PB._encoded_size(x::BopSolverOptimizerSet)
    encoded_size = 0
    !isempty(x.methods) && (encoded_size += PB._encoded_size(x.methods, 1))
    return encoded_size
end

struct BopParameters
    max_time_in_seconds::Float64
    max_deterministic_time::Float64
    lp_max_deterministic_time::Float64
    max_number_of_consecutive_failing_optimizer_calls::Int32
    relative_gap_limit::Float64
    max_num_decisions_in_ls::Int32
    max_num_broken_constraints_in_ls::Int32
    log_search_progress::Bool
    compute_estimated_impact::Bool
    prune_search_tree::Bool
    sort_constraints_by_num_terms::Bool
    use_random_lns::Bool
    random_seed::Int32
    num_relaxed_vars::Int32
    max_number_of_conflicts_in_random_lns::Int32
    num_random_lns_tries::Int32
    max_number_of_backtracks_in_ls::Int64
    use_lp_lns::Bool
    use_sat_to_choose_lns_neighbourhood::Bool
    max_number_of_conflicts_for_quick_check::Int32
    use_symmetry::Bool
    exploit_symmetry_in_sat_first_solution::Bool
    max_number_of_conflicts_in_random_solution_generation::Int32
    max_number_of_explored_assignments_per_try_in_ls::Int64
    use_transposition_table_in_ls::Bool
    use_potential_one_flip_repairs_in_ls::Bool
    use_learned_binary_clauses_in_lp::Bool
    number_of_solvers::Int32
    synchronization_type::var"BopParameters.ThreadSynchronizationType".T
    solver_optimizer_sets::Vector{BopSolverOptimizerSet}
    default_solver_optimizer_sets::String
    use_lp_strong_branching::Bool
    decomposer_num_variables_threshold::Int32
    num_bop_solvers_used_by_decomposition::Int32
    decomposed_problem_min_time_in_seconds::Float64
    guided_sat_conflicts_chunk::Int32
    max_lp_solve_for_feasibility_problems::Int32
end
PB.default_values(::Type{BopParameters}) = (;max_time_in_seconds = Float64(Inf), max_deterministic_time = Float64(Inf), lp_max_deterministic_time = Float64(1.0), max_number_of_consecutive_failing_optimizer_calls = zero(Int32), relative_gap_limit = Float64(1e-4), max_num_decisions_in_ls = Int32(4), max_num_broken_constraints_in_ls = Int32(2147483647), log_search_progress = false, compute_estimated_impact = true, prune_search_tree = false, sort_constraints_by_num_terms = false, use_random_lns = true, random_seed = Int32(8), num_relaxed_vars = Int32(10), max_number_of_conflicts_in_random_lns = Int32(2500), num_random_lns_tries = Int32(1), max_number_of_backtracks_in_ls = Int64(100000000), use_lp_lns = true, use_sat_to_choose_lns_neighbourhood = true, max_number_of_conflicts_for_quick_check = Int32(10), use_symmetry = false, exploit_symmetry_in_sat_first_solution = false, max_number_of_conflicts_in_random_solution_generation = Int32(500), max_number_of_explored_assignments_per_try_in_ls = Int64(10000), use_transposition_table_in_ls = true, use_potential_one_flip_repairs_in_ls = false, use_learned_binary_clauses_in_lp = true, number_of_solvers = Int32(1), synchronization_type = var"BopParameters.ThreadSynchronizationType".NO_SYNCHRONIZATION, solver_optimizer_sets = Vector{BopSolverOptimizerSet}(), default_solver_optimizer_sets = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       ", use_lp_strong_branching = false, decomposer_num_variables_threshold = Int32(50), num_bop_solvers_used_by_decomposition = Int32(1), decomposed_problem_min_time_in_seconds = Float64(0.0), guided_sat_conflicts_chunk = Int32(1000), max_lp_solve_for_feasibility_problems = Int32(0))
PB.field_numbers(::Type{BopParameters}) = (;max_time_in_seconds = 1, max_deterministic_time = 27, lp_max_deterministic_time = 37, max_number_of_consecutive_failing_optimizer_calls = 35, relative_gap_limit = 28, max_num_decisions_in_ls = 2, max_num_broken_constraints_in_ls = 38, log_search_progress = 14, compute_estimated_impact = 3, prune_search_tree = 4, sort_constraints_by_num_terms = 5, use_random_lns = 6, random_seed = 7, num_relaxed_vars = 8, max_number_of_conflicts_in_random_lns = 9, num_random_lns_tries = 10, max_number_of_backtracks_in_ls = 11, use_lp_lns = 12, use_sat_to_choose_lns_neighbourhood = 15, max_number_of_conflicts_for_quick_check = 16, use_symmetry = 17, exploit_symmetry_in_sat_first_solution = 40, max_number_of_conflicts_in_random_solution_generation = 20, max_number_of_explored_assignments_per_try_in_ls = 21, use_transposition_table_in_ls = 22, use_potential_one_flip_repairs_in_ls = 39, use_learned_binary_clauses_in_lp = 23, number_of_solvers = 24, synchronization_type = 25, solver_optimizer_sets = 26, default_solver_optimizer_sets = 33, use_lp_strong_branching = 29, decomposer_num_variables_threshold = 30, num_bop_solvers_used_by_decomposition = 31, decomposed_problem_min_time_in_seconds = 36, guided_sat_conflicts_chunk = 34, max_lp_solve_for_feasibility_problems = 41)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:BopParameters})
    max_time_in_seconds = Float64(Inf)
    max_deterministic_time = Float64(Inf)
    lp_max_deterministic_time = Float64(1.0)
    max_number_of_consecutive_failing_optimizer_calls = zero(Int32)
    relative_gap_limit = Float64(1e-4)
    max_num_decisions_in_ls = Int32(4)
    max_num_broken_constraints_in_ls = Int32(2147483647)
    log_search_progress = false
    compute_estimated_impact = true
    prune_search_tree = false
    sort_constraints_by_num_terms = false
    use_random_lns = true
    random_seed = Int32(8)
    num_relaxed_vars = Int32(10)
    max_number_of_conflicts_in_random_lns = Int32(2500)
    num_random_lns_tries = Int32(1)
    max_number_of_backtracks_in_ls = Int64(100000000)
    use_lp_lns = true
    use_sat_to_choose_lns_neighbourhood = true
    max_number_of_conflicts_for_quick_check = Int32(10)
    use_symmetry = false
    exploit_symmetry_in_sat_first_solution = false
    max_number_of_conflicts_in_random_solution_generation = Int32(500)
    max_number_of_explored_assignments_per_try_in_ls = Int64(10000)
    use_transposition_table_in_ls = true
    use_potential_one_flip_repairs_in_ls = false
    use_learned_binary_clauses_in_lp = true
    number_of_solvers = Int32(1)
    synchronization_type = var"BopParameters.ThreadSynchronizationType".NO_SYNCHRONIZATION
    solver_optimizer_sets = PB.BufferedVector{BopSolverOptimizerSet}()
    default_solver_optimizer_sets = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "
    use_lp_strong_branching = false
    decomposer_num_variables_threshold = Int32(50)
    num_bop_solvers_used_by_decomposition = Int32(1)
    decomposed_problem_min_time_in_seconds = Float64(0.0)
    guided_sat_conflicts_chunk = Int32(1000)
    max_lp_solve_for_feasibility_problems = Int32(0)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            max_time_in_seconds = PB.decode(d, Float64)
        elseif field_number == 27
            max_deterministic_time = PB.decode(d, Float64)
        elseif field_number == 37
            lp_max_deterministic_time = PB.decode(d, Float64)
        elseif field_number == 35
            max_number_of_consecutive_failing_optimizer_calls = PB.decode(d, Int32)
        elseif field_number == 28
            relative_gap_limit = PB.decode(d, Float64)
        elseif field_number == 2
            max_num_decisions_in_ls = PB.decode(d, Int32)
        elseif field_number == 38
            max_num_broken_constraints_in_ls = PB.decode(d, Int32)
        elseif field_number == 14
            log_search_progress = PB.decode(d, Bool)
        elseif field_number == 3
            compute_estimated_impact = PB.decode(d, Bool)
        elseif field_number == 4
            prune_search_tree = PB.decode(d, Bool)
        elseif field_number == 5
            sort_constraints_by_num_terms = PB.decode(d, Bool)
        elseif field_number == 6
            use_random_lns = PB.decode(d, Bool)
        elseif field_number == 7
            random_seed = PB.decode(d, Int32)
        elseif field_number == 8
            num_relaxed_vars = PB.decode(d, Int32)
        elseif field_number == 9
            max_number_of_conflicts_in_random_lns = PB.decode(d, Int32)
        elseif field_number == 10
            num_random_lns_tries = PB.decode(d, Int32)
        elseif field_number == 11
            max_number_of_backtracks_in_ls = PB.decode(d, Int64)
        elseif field_number == 12
            use_lp_lns = PB.decode(d, Bool)
        elseif field_number == 15
            use_sat_to_choose_lns_neighbourhood = PB.decode(d, Bool)
        elseif field_number == 16
            max_number_of_conflicts_for_quick_check = PB.decode(d, Int32)
        elseif field_number == 17
            use_symmetry = PB.decode(d, Bool)
        elseif field_number == 40
            exploit_symmetry_in_sat_first_solution = PB.decode(d, Bool)
        elseif field_number == 20
            max_number_of_conflicts_in_random_solution_generation = PB.decode(d, Int32)
        elseif field_number == 21
            max_number_of_explored_assignments_per_try_in_ls = PB.decode(d, Int64)
        elseif field_number == 22
            use_transposition_table_in_ls = PB.decode(d, Bool)
        elseif field_number == 39
            use_potential_one_flip_repairs_in_ls = PB.decode(d, Bool)
        elseif field_number == 23
            use_learned_binary_clauses_in_lp = PB.decode(d, Bool)
        elseif field_number == 24
            number_of_solvers = PB.decode(d, Int32)
        elseif field_number == 25
            synchronization_type = PB.decode(d, var"BopParameters.ThreadSynchronizationType".T)
        elseif field_number == 26
            PB.decode!(d, solver_optimizer_sets)
        elseif field_number == 33
            default_solver_optimizer_sets = PB.decode(d, String)
        elseif field_number == 29
            use_lp_strong_branching = PB.decode(d, Bool)
        elseif field_number == 30
            decomposer_num_variables_threshold = PB.decode(d, Int32)
        elseif field_number == 31
            num_bop_solvers_used_by_decomposition = PB.decode(d, Int32)
        elseif field_number == 36
            decomposed_problem_min_time_in_seconds = PB.decode(d, Float64)
        elseif field_number == 34
            guided_sat_conflicts_chunk = PB.decode(d, Int32)
        elseif field_number == 41
            max_lp_solve_for_feasibility_problems = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return BopParameters(max_time_in_seconds, max_deterministic_time, lp_max_deterministic_time, max_number_of_consecutive_failing_optimizer_calls, relative_gap_limit, max_num_decisions_in_ls, max_num_broken_constraints_in_ls, log_search_progress, compute_estimated_impact, prune_search_tree, sort_constraints_by_num_terms, use_random_lns, random_seed, num_relaxed_vars, max_number_of_conflicts_in_random_lns, num_random_lns_tries, max_number_of_backtracks_in_ls, use_lp_lns, use_sat_to_choose_lns_neighbourhood, max_number_of_conflicts_for_quick_check, use_symmetry, exploit_symmetry_in_sat_first_solution, max_number_of_conflicts_in_random_solution_generation, max_number_of_explored_assignments_per_try_in_ls, use_transposition_table_in_ls, use_potential_one_flip_repairs_in_ls, use_learned_binary_clauses_in_lp, number_of_solvers, synchronization_type, solver_optimizer_sets[], default_solver_optimizer_sets, use_lp_strong_branching, decomposer_num_variables_threshold, num_bop_solvers_used_by_decomposition, decomposed_problem_min_time_in_seconds, guided_sat_conflicts_chunk, max_lp_solve_for_feasibility_problems)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::BopParameters)
    initpos = position(e.io)
    x.max_time_in_seconds !== Float64(Inf) && PB.encode(e, 1, x.max_time_in_seconds)
    x.max_deterministic_time !== Float64(Inf) && PB.encode(e, 27, x.max_deterministic_time)
    x.lp_max_deterministic_time !== Float64(1.0) && PB.encode(e, 37, x.lp_max_deterministic_time)
    x.max_number_of_consecutive_failing_optimizer_calls != zero(Int32) && PB.encode(e, 35, x.max_number_of_consecutive_failing_optimizer_calls)
    x.relative_gap_limit !== Float64(1e-4) && PB.encode(e, 28, x.relative_gap_limit)
    x.max_num_decisions_in_ls != Int32(4) && PB.encode(e, 2, x.max_num_decisions_in_ls)
    x.max_num_broken_constraints_in_ls != Int32(2147483647) && PB.encode(e, 38, x.max_num_broken_constraints_in_ls)
    x.log_search_progress != false && PB.encode(e, 14, x.log_search_progress)
    x.compute_estimated_impact != true && PB.encode(e, 3, x.compute_estimated_impact)
    x.prune_search_tree != false && PB.encode(e, 4, x.prune_search_tree)
    x.sort_constraints_by_num_terms != false && PB.encode(e, 5, x.sort_constraints_by_num_terms)
    x.use_random_lns != true && PB.encode(e, 6, x.use_random_lns)
    x.random_seed != Int32(8) && PB.encode(e, 7, x.random_seed)
    x.num_relaxed_vars != Int32(10) && PB.encode(e, 8, x.num_relaxed_vars)
    x.max_number_of_conflicts_in_random_lns != Int32(2500) && PB.encode(e, 9, x.max_number_of_conflicts_in_random_lns)
    x.num_random_lns_tries != Int32(1) && PB.encode(e, 10, x.num_random_lns_tries)
    x.max_number_of_backtracks_in_ls != Int64(100000000) && PB.encode(e, 11, x.max_number_of_backtracks_in_ls)
    x.use_lp_lns != true && PB.encode(e, 12, x.use_lp_lns)
    x.use_sat_to_choose_lns_neighbourhood != true && PB.encode(e, 15, x.use_sat_to_choose_lns_neighbourhood)
    x.max_number_of_conflicts_for_quick_check != Int32(10) && PB.encode(e, 16, x.max_number_of_conflicts_for_quick_check)
    x.use_symmetry != false && PB.encode(e, 17, x.use_symmetry)
    x.exploit_symmetry_in_sat_first_solution != false && PB.encode(e, 40, x.exploit_symmetry_in_sat_first_solution)
    x.max_number_of_conflicts_in_random_solution_generation != Int32(500) && PB.encode(e, 20, x.max_number_of_conflicts_in_random_solution_generation)
    x.max_number_of_explored_assignments_per_try_in_ls != Int64(10000) && PB.encode(e, 21, x.max_number_of_explored_assignments_per_try_in_ls)
    x.use_transposition_table_in_ls != true && PB.encode(e, 22, x.use_transposition_table_in_ls)
    x.use_potential_one_flip_repairs_in_ls != false && PB.encode(e, 39, x.use_potential_one_flip_repairs_in_ls)
    x.use_learned_binary_clauses_in_lp != true && PB.encode(e, 23, x.use_learned_binary_clauses_in_lp)
    x.number_of_solvers != Int32(1) && PB.encode(e, 24, x.number_of_solvers)
    x.synchronization_type != var"BopParameters.ThreadSynchronizationType".NO_SYNCHRONIZATION && PB.encode(e, 25, x.synchronization_type)
    !isempty(x.solver_optimizer_sets) && PB.encode(e, 26, x.solver_optimizer_sets)
    x.default_solver_optimizer_sets != "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       " && PB.encode(e, 33, x.default_solver_optimizer_sets)
    x.use_lp_strong_branching != false && PB.encode(e, 29, x.use_lp_strong_branching)
    x.decomposer_num_variables_threshold != Int32(50) && PB.encode(e, 30, x.decomposer_num_variables_threshold)
    x.num_bop_solvers_used_by_decomposition != Int32(1) && PB.encode(e, 31, x.num_bop_solvers_used_by_decomposition)
    x.decomposed_problem_min_time_in_seconds !== Float64(0.0) && PB.encode(e, 36, x.decomposed_problem_min_time_in_seconds)
    x.guided_sat_conflicts_chunk != Int32(1000) && PB.encode(e, 34, x.guided_sat_conflicts_chunk)
    x.max_lp_solve_for_feasibility_problems != Int32(0) && PB.encode(e, 41, x.max_lp_solve_for_feasibility_problems)
    return position(e.io) - initpos
end
function PB._encoded_size(x::BopParameters)
    encoded_size = 0
    x.max_time_in_seconds !== Float64(Inf) && (encoded_size += PB._encoded_size(x.max_time_in_seconds, 1))
    x.max_deterministic_time !== Float64(Inf) && (encoded_size += PB._encoded_size(x.max_deterministic_time, 27))
    x.lp_max_deterministic_time !== Float64(1.0) && (encoded_size += PB._encoded_size(x.lp_max_deterministic_time, 37))
    x.max_number_of_consecutive_failing_optimizer_calls != zero(Int32) && (encoded_size += PB._encoded_size(x.max_number_of_consecutive_failing_optimizer_calls, 35))
    x.relative_gap_limit !== Float64(1e-4) && (encoded_size += PB._encoded_size(x.relative_gap_limit, 28))
    x.max_num_decisions_in_ls != Int32(4) && (encoded_size += PB._encoded_size(x.max_num_decisions_in_ls, 2))
    x.max_num_broken_constraints_in_ls != Int32(2147483647) && (encoded_size += PB._encoded_size(x.max_num_broken_constraints_in_ls, 38))
    x.log_search_progress != false && (encoded_size += PB._encoded_size(x.log_search_progress, 14))
    x.compute_estimated_impact != true && (encoded_size += PB._encoded_size(x.compute_estimated_impact, 3))
    x.prune_search_tree != false && (encoded_size += PB._encoded_size(x.prune_search_tree, 4))
    x.sort_constraints_by_num_terms != false && (encoded_size += PB._encoded_size(x.sort_constraints_by_num_terms, 5))
    x.use_random_lns != true && (encoded_size += PB._encoded_size(x.use_random_lns, 6))
    x.random_seed != Int32(8) && (encoded_size += PB._encoded_size(x.random_seed, 7))
    x.num_relaxed_vars != Int32(10) && (encoded_size += PB._encoded_size(x.num_relaxed_vars, 8))
    x.max_number_of_conflicts_in_random_lns != Int32(2500) && (encoded_size += PB._encoded_size(x.max_number_of_conflicts_in_random_lns, 9))
    x.num_random_lns_tries != Int32(1) && (encoded_size += PB._encoded_size(x.num_random_lns_tries, 10))
    x.max_number_of_backtracks_in_ls != Int64(100000000) && (encoded_size += PB._encoded_size(x.max_number_of_backtracks_in_ls, 11))
    x.use_lp_lns != true && (encoded_size += PB._encoded_size(x.use_lp_lns, 12))
    x.use_sat_to_choose_lns_neighbourhood != true && (encoded_size += PB._encoded_size(x.use_sat_to_choose_lns_neighbourhood, 15))
    x.max_number_of_conflicts_for_quick_check != Int32(10) && (encoded_size += PB._encoded_size(x.max_number_of_conflicts_for_quick_check, 16))
    x.use_symmetry != false && (encoded_size += PB._encoded_size(x.use_symmetry, 17))
    x.exploit_symmetry_in_sat_first_solution != false && (encoded_size += PB._encoded_size(x.exploit_symmetry_in_sat_first_solution, 40))
    x.max_number_of_conflicts_in_random_solution_generation != Int32(500) && (encoded_size += PB._encoded_size(x.max_number_of_conflicts_in_random_solution_generation, 20))
    x.max_number_of_explored_assignments_per_try_in_ls != Int64(10000) && (encoded_size += PB._encoded_size(x.max_number_of_explored_assignments_per_try_in_ls, 21))
    x.use_transposition_table_in_ls != true && (encoded_size += PB._encoded_size(x.use_transposition_table_in_ls, 22))
    x.use_potential_one_flip_repairs_in_ls != false && (encoded_size += PB._encoded_size(x.use_potential_one_flip_repairs_in_ls, 39))
    x.use_learned_binary_clauses_in_lp != true && (encoded_size += PB._encoded_size(x.use_learned_binary_clauses_in_lp, 23))
    x.number_of_solvers != Int32(1) && (encoded_size += PB._encoded_size(x.number_of_solvers, 24))
    x.synchronization_type != var"BopParameters.ThreadSynchronizationType".NO_SYNCHRONIZATION && (encoded_size += PB._encoded_size(x.synchronization_type, 25))
    !isempty(x.solver_optimizer_sets) && (encoded_size += PB._encoded_size(x.solver_optimizer_sets, 26))
    x.default_solver_optimizer_sets != "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       " && (encoded_size += PB._encoded_size(x.default_solver_optimizer_sets, 33))
    x.use_lp_strong_branching != false && (encoded_size += PB._encoded_size(x.use_lp_strong_branching, 29))
    x.decomposer_num_variables_threshold != Int32(50) && (encoded_size += PB._encoded_size(x.decomposer_num_variables_threshold, 30))
    x.num_bop_solvers_used_by_decomposition != Int32(1) && (encoded_size += PB._encoded_size(x.num_bop_solvers_used_by_decomposition, 31))
    x.decomposed_problem_min_time_in_seconds !== Float64(0.0) && (encoded_size += PB._encoded_size(x.decomposed_problem_min_time_in_seconds, 36))
    x.guided_sat_conflicts_chunk != Int32(1000) && (encoded_size += PB._encoded_size(x.guided_sat_conflicts_chunk, 34))
    x.max_lp_solve_for_feasibility_problems != Int32(0) && (encoded_size += PB._encoded_size(x.max_lp_solve_for_feasibility_problems, 41))
    return encoded_size
end
