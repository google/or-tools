# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:02.125
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/math_opt/solvers/osqp.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export OsqpSettingsProto, OsqpOutput


struct OsqpSettingsProto
    rho::Float64
    sigma::Float64
    scaling::Int64
    adaptive_rho::Bool
    adaptive_rho_interval::Int64
    adaptive_rho_tolerance::Float64
    adaptive_rho_fraction::Float64
    max_iter::Int64
    eps_abs::Float64
    eps_rel::Float64
    eps_prim_inf::Float64
    eps_dual_inf::Float64
    alpha::Float64
    delta::Float64
    polish::Bool
    polish_refine_iter::Int64
    verbose::Bool
    scaled_termination::Bool
    check_termination::Int64
    warm_start::Bool
    time_limit::Float64
end
PB.default_values(::Type{OsqpSettingsProto}) = (;rho = zero(Float64), sigma = zero(Float64), scaling = zero(Int64), adaptive_rho = false, adaptive_rho_interval = zero(Int64), adaptive_rho_tolerance = zero(Float64), adaptive_rho_fraction = zero(Float64), max_iter = zero(Int64), eps_abs = zero(Float64), eps_rel = zero(Float64), eps_prim_inf = zero(Float64), eps_dual_inf = zero(Float64), alpha = zero(Float64), delta = zero(Float64), polish = false, polish_refine_iter = zero(Int64), verbose = false, scaled_termination = false, check_termination = zero(Int64), warm_start = false, time_limit = zero(Float64))
PB.field_numbers(::Type{OsqpSettingsProto}) = (;rho = 1, sigma = 2, scaling = 3, adaptive_rho = 4, adaptive_rho_interval = 5, adaptive_rho_tolerance = 6, adaptive_rho_fraction = 7, max_iter = 8, eps_abs = 9, eps_rel = 10, eps_prim_inf = 11, eps_dual_inf = 12, alpha = 13, delta = 14, polish = 15, polish_refine_iter = 16, verbose = 17, scaled_termination = 18, check_termination = 19, warm_start = 20, time_limit = 21)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:OsqpSettingsProto})
    rho = zero(Float64)
    sigma = zero(Float64)
    scaling = zero(Int64)
    adaptive_rho = false
    adaptive_rho_interval = zero(Int64)
    adaptive_rho_tolerance = zero(Float64)
    adaptive_rho_fraction = zero(Float64)
    max_iter = zero(Int64)
    eps_abs = zero(Float64)
    eps_rel = zero(Float64)
    eps_prim_inf = zero(Float64)
    eps_dual_inf = zero(Float64)
    alpha = zero(Float64)
    delta = zero(Float64)
    polish = false
    polish_refine_iter = zero(Int64)
    verbose = false
    scaled_termination = false
    check_termination = zero(Int64)
    warm_start = false
    time_limit = zero(Float64)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            rho = PB.decode(d, Float64)
        elseif field_number == 2
            sigma = PB.decode(d, Float64)
        elseif field_number == 3
            scaling = PB.decode(d, Int64)
        elseif field_number == 4
            adaptive_rho = PB.decode(d, Bool)
        elseif field_number == 5
            adaptive_rho_interval = PB.decode(d, Int64)
        elseif field_number == 6
            adaptive_rho_tolerance = PB.decode(d, Float64)
        elseif field_number == 7
            adaptive_rho_fraction = PB.decode(d, Float64)
        elseif field_number == 8
            max_iter = PB.decode(d, Int64)
        elseif field_number == 9
            eps_abs = PB.decode(d, Float64)
        elseif field_number == 10
            eps_rel = PB.decode(d, Float64)
        elseif field_number == 11
            eps_prim_inf = PB.decode(d, Float64)
        elseif field_number == 12
            eps_dual_inf = PB.decode(d, Float64)
        elseif field_number == 13
            alpha = PB.decode(d, Float64)
        elseif field_number == 14
            delta = PB.decode(d, Float64)
        elseif field_number == 15
            polish = PB.decode(d, Bool)
        elseif field_number == 16
            polish_refine_iter = PB.decode(d, Int64)
        elseif field_number == 17
            verbose = PB.decode(d, Bool)
        elseif field_number == 18
            scaled_termination = PB.decode(d, Bool)
        elseif field_number == 19
            check_termination = PB.decode(d, Int64)
        elseif field_number == 20
            warm_start = PB.decode(d, Bool)
        elseif field_number == 21
            time_limit = PB.decode(d, Float64)
        else
            PB.skip(d, wire_type)
        end
    end
    return OsqpSettingsProto(rho, sigma, scaling, adaptive_rho, adaptive_rho_interval, adaptive_rho_tolerance, adaptive_rho_fraction, max_iter, eps_abs, eps_rel, eps_prim_inf, eps_dual_inf, alpha, delta, polish, polish_refine_iter, verbose, scaled_termination, check_termination, warm_start, time_limit)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::OsqpSettingsProto)
    initpos = position(e.io)
    x.rho !== zero(Float64) && PB.encode(e, 1, x.rho)
    x.sigma !== zero(Float64) && PB.encode(e, 2, x.sigma)
    x.scaling != zero(Int64) && PB.encode(e, 3, x.scaling)
    x.adaptive_rho != false && PB.encode(e, 4, x.adaptive_rho)
    x.adaptive_rho_interval != zero(Int64) && PB.encode(e, 5, x.adaptive_rho_interval)
    x.adaptive_rho_tolerance !== zero(Float64) && PB.encode(e, 6, x.adaptive_rho_tolerance)
    x.adaptive_rho_fraction !== zero(Float64) && PB.encode(e, 7, x.adaptive_rho_fraction)
    x.max_iter != zero(Int64) && PB.encode(e, 8, x.max_iter)
    x.eps_abs !== zero(Float64) && PB.encode(e, 9, x.eps_abs)
    x.eps_rel !== zero(Float64) && PB.encode(e, 10, x.eps_rel)
    x.eps_prim_inf !== zero(Float64) && PB.encode(e, 11, x.eps_prim_inf)
    x.eps_dual_inf !== zero(Float64) && PB.encode(e, 12, x.eps_dual_inf)
    x.alpha !== zero(Float64) && PB.encode(e, 13, x.alpha)
    x.delta !== zero(Float64) && PB.encode(e, 14, x.delta)
    x.polish != false && PB.encode(e, 15, x.polish)
    x.polish_refine_iter != zero(Int64) && PB.encode(e, 16, x.polish_refine_iter)
    x.verbose != false && PB.encode(e, 17, x.verbose)
    x.scaled_termination != false && PB.encode(e, 18, x.scaled_termination)
    x.check_termination != zero(Int64) && PB.encode(e, 19, x.check_termination)
    x.warm_start != false && PB.encode(e, 20, x.warm_start)
    x.time_limit !== zero(Float64) && PB.encode(e, 21, x.time_limit)
    return position(e.io) - initpos
end
function PB._encoded_size(x::OsqpSettingsProto)
    encoded_size = 0
    x.rho !== zero(Float64) && (encoded_size += PB._encoded_size(x.rho, 1))
    x.sigma !== zero(Float64) && (encoded_size += PB._encoded_size(x.sigma, 2))
    x.scaling != zero(Int64) && (encoded_size += PB._encoded_size(x.scaling, 3))
    x.adaptive_rho != false && (encoded_size += PB._encoded_size(x.adaptive_rho, 4))
    x.adaptive_rho_interval != zero(Int64) && (encoded_size += PB._encoded_size(x.adaptive_rho_interval, 5))
    x.adaptive_rho_tolerance !== zero(Float64) && (encoded_size += PB._encoded_size(x.adaptive_rho_tolerance, 6))
    x.adaptive_rho_fraction !== zero(Float64) && (encoded_size += PB._encoded_size(x.adaptive_rho_fraction, 7))
    x.max_iter != zero(Int64) && (encoded_size += PB._encoded_size(x.max_iter, 8))
    x.eps_abs !== zero(Float64) && (encoded_size += PB._encoded_size(x.eps_abs, 9))
    x.eps_rel !== zero(Float64) && (encoded_size += PB._encoded_size(x.eps_rel, 10))
    x.eps_prim_inf !== zero(Float64) && (encoded_size += PB._encoded_size(x.eps_prim_inf, 11))
    x.eps_dual_inf !== zero(Float64) && (encoded_size += PB._encoded_size(x.eps_dual_inf, 12))
    x.alpha !== zero(Float64) && (encoded_size += PB._encoded_size(x.alpha, 13))
    x.delta !== zero(Float64) && (encoded_size += PB._encoded_size(x.delta, 14))
    x.polish != false && (encoded_size += PB._encoded_size(x.polish, 15))
    x.polish_refine_iter != zero(Int64) && (encoded_size += PB._encoded_size(x.polish_refine_iter, 16))
    x.verbose != false && (encoded_size += PB._encoded_size(x.verbose, 17))
    x.scaled_termination != false && (encoded_size += PB._encoded_size(x.scaled_termination, 18))
    x.check_termination != zero(Int64) && (encoded_size += PB._encoded_size(x.check_termination, 19))
    x.warm_start != false && (encoded_size += PB._encoded_size(x.warm_start, 20))
    x.time_limit !== zero(Float64) && (encoded_size += PB._encoded_size(x.time_limit, 21))
    return encoded_size
end

struct OsqpOutput
    initialized_underlying_solver::Bool
end
PB.default_values(::Type{OsqpOutput}) = (;initialized_underlying_solver = false)
PB.field_numbers(::Type{OsqpOutput}) = (;initialized_underlying_solver = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:OsqpOutput})
    initialized_underlying_solver = false
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            initialized_underlying_solver = PB.decode(d, Bool)
        else
            PB.skip(d, wire_type)
        end
    end
    return OsqpOutput(initialized_underlying_solver)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::OsqpOutput)
    initpos = position(e.io)
    x.initialized_underlying_solver != false && PB.encode(e, 1, x.initialized_underlying_solver)
    return position(e.io) - initpos
end
function PB._encoded_size(x::OsqpOutput)
    encoded_size = 0
    x.initialized_underlying_solver != false && (encoded_size += PB._encoded_size(x.initialized_underlying_solver, 1))
    return encoded_size
end
