# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:02.126
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/math_opt/solvers/gurobi.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"GurobiParametersProto.Parameter", var"GurobiInitializerProto.ISVKey"
export GurobiParametersProto, GurobiInitializerProto


struct var"GurobiParametersProto.Parameter"
    name::String
    value::String
end
PB.default_values(::Type{var"GurobiParametersProto.Parameter"}) = (;name = "", value = "")
PB.field_numbers(::Type{var"GurobiParametersProto.Parameter"}) = (;name = 1, value = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"GurobiParametersProto.Parameter"})
    name = ""
    value = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            name = PB.decode(d, String)
        elseif field_number == 2
            value = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"GurobiParametersProto.Parameter"(name, value)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"GurobiParametersProto.Parameter")
    initpos = position(e.io)
    !isempty(x.name) && PB.encode(e, 1, x.name)
    !isempty(x.value) && PB.encode(e, 2, x.value)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"GurobiParametersProto.Parameter")
    encoded_size = 0
    !isempty(x.name) && (encoded_size += PB._encoded_size(x.name, 1))
    !isempty(x.value) && (encoded_size += PB._encoded_size(x.value, 2))
    return encoded_size
end

struct var"GurobiInitializerProto.ISVKey"
    name::String
    application_name::String
    expiration::Int32
    key::String
end
PB.default_values(::Type{var"GurobiInitializerProto.ISVKey"}) = (;name = "", application_name = "", expiration = zero(Int32), key = "")
PB.field_numbers(::Type{var"GurobiInitializerProto.ISVKey"}) = (;name = 1, application_name = 2, expiration = 3, key = 4)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"GurobiInitializerProto.ISVKey"})
    name = ""
    application_name = ""
    expiration = zero(Int32)
    key = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            name = PB.decode(d, String)
        elseif field_number == 2
            application_name = PB.decode(d, String)
        elseif field_number == 3
            expiration = PB.decode(d, Int32)
        elseif field_number == 4
            key = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"GurobiInitializerProto.ISVKey"(name, application_name, expiration, key)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"GurobiInitializerProto.ISVKey")
    initpos = position(e.io)
    !isempty(x.name) && PB.encode(e, 1, x.name)
    !isempty(x.application_name) && PB.encode(e, 2, x.application_name)
    x.expiration != zero(Int32) && PB.encode(e, 3, x.expiration)
    !isempty(x.key) && PB.encode(e, 4, x.key)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"GurobiInitializerProto.ISVKey")
    encoded_size = 0
    !isempty(x.name) && (encoded_size += PB._encoded_size(x.name, 1))
    !isempty(x.application_name) && (encoded_size += PB._encoded_size(x.application_name, 2))
    x.expiration != zero(Int32) && (encoded_size += PB._encoded_size(x.expiration, 3))
    !isempty(x.key) && (encoded_size += PB._encoded_size(x.key, 4))
    return encoded_size
end

struct GurobiParametersProto
    parameters::Vector{var"GurobiParametersProto.Parameter"}
end
PB.default_values(::Type{GurobiParametersProto}) = (;parameters = Vector{var"GurobiParametersProto.Parameter"}())
PB.field_numbers(::Type{GurobiParametersProto}) = (;parameters = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:GurobiParametersProto})
    parameters = PB.BufferedVector{var"GurobiParametersProto.Parameter"}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, parameters)
        else
            PB.skip(d, wire_type)
        end
    end
    return GurobiParametersProto(parameters[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::GurobiParametersProto)
    initpos = position(e.io)
    !isempty(x.parameters) && PB.encode(e, 1, x.parameters)
    return position(e.io) - initpos
end
function PB._encoded_size(x::GurobiParametersProto)
    encoded_size = 0
    !isempty(x.parameters) && (encoded_size += PB._encoded_size(x.parameters, 1))
    return encoded_size
end

struct GurobiInitializerProto
    isv_key::Union{Nothing,var"GurobiInitializerProto.ISVKey"}
end
PB.default_values(::Type{GurobiInitializerProto}) = (;isv_key = nothing)
PB.field_numbers(::Type{GurobiInitializerProto}) = (;isv_key = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:GurobiInitializerProto})
    isv_key = Ref{Union{Nothing,var"GurobiInitializerProto.ISVKey"}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, isv_key)
        else
            PB.skip(d, wire_type)
        end
    end
    return GurobiInitializerProto(isv_key[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::GurobiInitializerProto)
    initpos = position(e.io)
    !isnothing(x.isv_key) && PB.encode(e, 1, x.isv_key)
    return position(e.io) - initpos
end
function PB._encoded_size(x::GurobiInitializerProto)
    encoded_size = 0
    !isnothing(x.isv_key) && (encoded_size += PB._encoded_size(x.isv_key, 1))
    return encoded_size
end
