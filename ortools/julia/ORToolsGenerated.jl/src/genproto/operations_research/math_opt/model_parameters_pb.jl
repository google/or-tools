# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:02.129
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/math_opt/model_parameters.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export SolutionHintProto, ObjectiveParametersProto, ModelSolveParametersProto


struct SolutionHintProto
    variable_values::Union{Nothing,SparseDoubleVectorProto}
    dual_values::Union{Nothing,SparseDoubleVectorProto}
end
PB.default_values(::Type{SolutionHintProto}) = (;variable_values = nothing, dual_values = nothing)
PB.field_numbers(::Type{SolutionHintProto}) = (;variable_values = 1, dual_values = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:SolutionHintProto})
    variable_values = Ref{Union{Nothing,SparseDoubleVectorProto}}(nothing)
    dual_values = Ref{Union{Nothing,SparseDoubleVectorProto}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, variable_values)
        elseif field_number == 2
            PB.decode!(d, dual_values)
        else
            PB.skip(d, wire_type)
        end
    end
    return SolutionHintProto(variable_values[], dual_values[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::SolutionHintProto)
    initpos = position(e.io)
    !isnothing(x.variable_values) && PB.encode(e, 1, x.variable_values)
    !isnothing(x.dual_values) && PB.encode(e, 2, x.dual_values)
    return position(e.io) - initpos
end
function PB._encoded_size(x::SolutionHintProto)
    encoded_size = 0
    !isnothing(x.variable_values) && (encoded_size += PB._encoded_size(x.variable_values, 1))
    !isnothing(x.dual_values) && (encoded_size += PB._encoded_size(x.dual_values, 2))
    return encoded_size
end

struct ObjectiveParametersProto
    objective_degradation_absolute_tolerance::Float64
    objective_degradation_relative_tolerance::Float64
    time_limit::Union{Nothing,google.protobuf.Duration}
end
PB.default_values(::Type{ObjectiveParametersProto}) = (;objective_degradation_absolute_tolerance = zero(Float64), objective_degradation_relative_tolerance = zero(Float64), time_limit = nothing)
PB.field_numbers(::Type{ObjectiveParametersProto}) = (;objective_degradation_absolute_tolerance = 7, objective_degradation_relative_tolerance = 8, time_limit = 9)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ObjectiveParametersProto})
    objective_degradation_absolute_tolerance = zero(Float64)
    objective_degradation_relative_tolerance = zero(Float64)
    time_limit = Ref{Union{Nothing,google.protobuf.Duration}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 7
            objective_degradation_absolute_tolerance = PB.decode(d, Float64)
        elseif field_number == 8
            objective_degradation_relative_tolerance = PB.decode(d, Float64)
        elseif field_number == 9
            PB.decode!(d, time_limit)
        else
            PB.skip(d, wire_type)
        end
    end
    return ObjectiveParametersProto(objective_degradation_absolute_tolerance, objective_degradation_relative_tolerance, time_limit[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ObjectiveParametersProto)
    initpos = position(e.io)
    x.objective_degradation_absolute_tolerance !== zero(Float64) && PB.encode(e, 7, x.objective_degradation_absolute_tolerance)
    x.objective_degradation_relative_tolerance !== zero(Float64) && PB.encode(e, 8, x.objective_degradation_relative_tolerance)
    !isnothing(x.time_limit) && PB.encode(e, 9, x.time_limit)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ObjectiveParametersProto)
    encoded_size = 0
    x.objective_degradation_absolute_tolerance !== zero(Float64) && (encoded_size += PB._encoded_size(x.objective_degradation_absolute_tolerance, 7))
    x.objective_degradation_relative_tolerance !== zero(Float64) && (encoded_size += PB._encoded_size(x.objective_degradation_relative_tolerance, 8))
    !isnothing(x.time_limit) && (encoded_size += PB._encoded_size(x.time_limit, 9))
    return encoded_size
end

struct ModelSolveParametersProto
    variable_values_filter::Union{Nothing,SparseVectorFilterProto}
    dual_values_filter::Union{Nothing,SparseVectorFilterProto}
    quadratic_dual_values_filter::Union{Nothing,SparseVectorFilterProto}
    reduced_costs_filter::Union{Nothing,SparseVectorFilterProto}
    initial_basis::Union{Nothing,BasisProto}
    solution_hints::Vector{SolutionHintProto}
    branching_priorities::Union{Nothing,SparseInt32VectorProto}
    primary_objective_parameters::Union{Nothing,ObjectiveParametersProto}
    auxiliary_objective_parameters::Dict{Int64,ObjectiveParametersProto}
    lazy_linear_constraint_ids::Vector{Int64}
end
PB.default_values(::Type{ModelSolveParametersProto}) = (;variable_values_filter = nothing, dual_values_filter = nothing, quadratic_dual_values_filter = nothing, reduced_costs_filter = nothing, initial_basis = nothing, solution_hints = Vector{SolutionHintProto}(), branching_priorities = nothing, primary_objective_parameters = nothing, auxiliary_objective_parameters = Dict{Int64,ObjectiveParametersProto}(), lazy_linear_constraint_ids = Vector{Int64}())
PB.field_numbers(::Type{ModelSolveParametersProto}) = (;variable_values_filter = 1, dual_values_filter = 2, quadratic_dual_values_filter = 10, reduced_costs_filter = 3, initial_basis = 4, solution_hints = 5, branching_priorities = 6, primary_objective_parameters = 7, auxiliary_objective_parameters = 8, lazy_linear_constraint_ids = 9)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ModelSolveParametersProto})
    variable_values_filter = Ref{Union{Nothing,SparseVectorFilterProto}}(nothing)
    dual_values_filter = Ref{Union{Nothing,SparseVectorFilterProto}}(nothing)
    quadratic_dual_values_filter = Ref{Union{Nothing,SparseVectorFilterProto}}(nothing)
    reduced_costs_filter = Ref{Union{Nothing,SparseVectorFilterProto}}(nothing)
    initial_basis = Ref{Union{Nothing,BasisProto}}(nothing)
    solution_hints = PB.BufferedVector{SolutionHintProto}()
    branching_priorities = Ref{Union{Nothing,SparseInt32VectorProto}}(nothing)
    primary_objective_parameters = Ref{Union{Nothing,ObjectiveParametersProto}}(nothing)
    auxiliary_objective_parameters = Dict{Int64,ObjectiveParametersProto}()
    lazy_linear_constraint_ids = PB.BufferedVector{Int64}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, variable_values_filter)
        elseif field_number == 2
            PB.decode!(d, dual_values_filter)
        elseif field_number == 10
            PB.decode!(d, quadratic_dual_values_filter)
        elseif field_number == 3
            PB.decode!(d, reduced_costs_filter)
        elseif field_number == 4
            PB.decode!(d, initial_basis)
        elseif field_number == 5
            PB.decode!(d, solution_hints)
        elseif field_number == 6
            PB.decode!(d, branching_priorities)
        elseif field_number == 7
            PB.decode!(d, primary_objective_parameters)
        elseif field_number == 8
            PB.decode!(d, auxiliary_objective_parameters)
        elseif field_number == 9
            PB.decode!(d, wire_type, lazy_linear_constraint_ids)
        else
            PB.skip(d, wire_type)
        end
    end
    return ModelSolveParametersProto(variable_values_filter[], dual_values_filter[], quadratic_dual_values_filter[], reduced_costs_filter[], initial_basis[], solution_hints[], branching_priorities[], primary_objective_parameters[], auxiliary_objective_parameters, lazy_linear_constraint_ids[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ModelSolveParametersProto)
    initpos = position(e.io)
    !isnothing(x.variable_values_filter) && PB.encode(e, 1, x.variable_values_filter)
    !isnothing(x.dual_values_filter) && PB.encode(e, 2, x.dual_values_filter)
    !isnothing(x.quadratic_dual_values_filter) && PB.encode(e, 10, x.quadratic_dual_values_filter)
    !isnothing(x.reduced_costs_filter) && PB.encode(e, 3, x.reduced_costs_filter)
    !isnothing(x.initial_basis) && PB.encode(e, 4, x.initial_basis)
    !isempty(x.solution_hints) && PB.encode(e, 5, x.solution_hints)
    !isnothing(x.branching_priorities) && PB.encode(e, 6, x.branching_priorities)
    !isnothing(x.primary_objective_parameters) && PB.encode(e, 7, x.primary_objective_parameters)
    !isempty(x.auxiliary_objective_parameters) && PB.encode(e, 8, x.auxiliary_objective_parameters)
    !isempty(x.lazy_linear_constraint_ids) && PB.encode(e, 9, x.lazy_linear_constraint_ids)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ModelSolveParametersProto)
    encoded_size = 0
    !isnothing(x.variable_values_filter) && (encoded_size += PB._encoded_size(x.variable_values_filter, 1))
    !isnothing(x.dual_values_filter) && (encoded_size += PB._encoded_size(x.dual_values_filter, 2))
    !isnothing(x.quadratic_dual_values_filter) && (encoded_size += PB._encoded_size(x.quadratic_dual_values_filter, 10))
    !isnothing(x.reduced_costs_filter) && (encoded_size += PB._encoded_size(x.reduced_costs_filter, 3))
    !isnothing(x.initial_basis) && (encoded_size += PB._encoded_size(x.initial_basis, 4))
    !isempty(x.solution_hints) && (encoded_size += PB._encoded_size(x.solution_hints, 5))
    !isnothing(x.branching_priorities) && (encoded_size += PB._encoded_size(x.branching_priorities, 6))
    !isnothing(x.primary_objective_parameters) && (encoded_size += PB._encoded_size(x.primary_objective_parameters, 7))
    !isempty(x.auxiliary_objective_parameters) && (encoded_size += PB._encoded_size(x.auxiliary_objective_parameters, 8))
    !isempty(x.lazy_linear_constraint_ids) && (encoded_size += PB._encoded_size(x.lazy_linear_constraint_ids, 9))
    return encoded_size
end
