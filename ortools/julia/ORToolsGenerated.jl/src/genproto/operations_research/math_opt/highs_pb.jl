# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:02.126
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/math_opt/solvers/highs.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export HighsOptionsProto


struct HighsOptionsProto
    string_options::Dict{String,String}
    double_options::Dict{String,Float64}
    int_options::Dict{String,Int32}
    bool_options::Dict{String,Bool}
end
PB.default_values(::Type{HighsOptionsProto}) = (;string_options = Dict{String,String}(), double_options = Dict{String,Float64}(), int_options = Dict{String,Int32}(), bool_options = Dict{String,Bool}())
PB.field_numbers(::Type{HighsOptionsProto}) = (;string_options = 1, double_options = 2, int_options = 3, bool_options = 4)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:HighsOptionsProto})
    string_options = Dict{String,String}()
    double_options = Dict{String,Float64}()
    int_options = Dict{String,Int32}()
    bool_options = Dict{String,Bool}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, string_options)
        elseif field_number == 2
            PB.decode!(d, double_options)
        elseif field_number == 3
            PB.decode!(d, int_options)
        elseif field_number == 4
            PB.decode!(d, bool_options)
        else
            PB.skip(d, wire_type)
        end
    end
    return HighsOptionsProto(string_options, double_options, int_options, bool_options)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::HighsOptionsProto)
    initpos = position(e.io)
    !isempty(x.string_options) && PB.encode(e, 1, x.string_options)
    !isempty(x.double_options) && PB.encode(e, 2, x.double_options)
    !isempty(x.int_options) && PB.encode(e, 3, x.int_options)
    !isempty(x.bool_options) && PB.encode(e, 4, x.bool_options)
    return position(e.io) - initpos
end
function PB._encoded_size(x::HighsOptionsProto)
    encoded_size = 0
    !isempty(x.string_options) && (encoded_size += PB._encoded_size(x.string_options, 1))
    !isempty(x.double_options) && (encoded_size += PB._encoded_size(x.double_options, 2))
    !isempty(x.int_options) && (encoded_size += PB._encoded_size(x.int_options, 3))
    !isempty(x.bool_options) && (encoded_size += PB._encoded_size(x.bool_options, 4))
    return encoded_size
end
