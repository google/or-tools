# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:02.109
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/constraint_solver/routing_parameters.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"RoutingSearchParameters.InsertionSortingProperty"
export var"RoutingSearchParameters.PairInsertionStrategy", RoutingModelParameters
export var"RoutingSearchParameters.LocalSearchNeighborhoodOperators"
export var"RoutingSearchParameters.ImprovementSearchLimitParameters"
export var"RoutingSearchParameters.SchedulingSolver", RoutingSearchParameters


@enumx var"RoutingSearchParameters.InsertionSortingProperty" SORTING_PROPERTY_UNSPECIFIED=0 SORTING_PROPERTY_ALLOWED_VEHICLES=1 SORTING_PROPERTY_PENALTY=2 SORTING_PROPERTY_PENALTY_OVER_ALLOWED_VEHICLES_RATIO=3 SORTING_PROPERTY_HIGHEST_AVG_ARC_COST_TO_VEHICLE_START_ENDS=4 SORTING_PROPERTY_LOWEST_AVG_ARC_COST_TO_VEHICLE_START_ENDS=5 SORTING_PROPERTY_LOWEST_MIN_ARC_COST_TO_VEHICLE_START_ENDS=6 SORTING_PROPERTY_HIGHEST_DIMENSION_USAGE=7 SORTING_PROPERTY_RANDOM=8

@enumx var"RoutingSearchParameters.PairInsertionStrategy" AUTOMATIC=0 BEST_PICKUP_THEN_BEST_DELIVERY=1 BEST_PICKUP_DELIVERY_PAIR=2 BEST_PICKUP_DELIVERY_PAIR_MULTITOUR=3

struct RoutingModelParameters
    solver_parameters::Union{Nothing,ConstraintSolverParameters}
    reduce_vehicle_cost_model::Bool
    max_callback_cache_size::Int32
end
PB.default_values(::Type{RoutingModelParameters}) = (;solver_parameters = nothing, reduce_vehicle_cost_model = false, max_callback_cache_size = zero(Int32))
PB.field_numbers(::Type{RoutingModelParameters}) = (;solver_parameters = 1, reduce_vehicle_cost_model = 2, max_callback_cache_size = 3)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:RoutingModelParameters})
    solver_parameters = Ref{Union{Nothing,ConstraintSolverParameters}}(nothing)
    reduce_vehicle_cost_model = false
    max_callback_cache_size = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, solver_parameters)
        elseif field_number == 2
            reduce_vehicle_cost_model = PB.decode(d, Bool)
        elseif field_number == 3
            max_callback_cache_size = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return RoutingModelParameters(solver_parameters[], reduce_vehicle_cost_model, max_callback_cache_size)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::RoutingModelParameters)
    initpos = position(e.io)
    !isnothing(x.solver_parameters) && PB.encode(e, 1, x.solver_parameters)
    x.reduce_vehicle_cost_model != false && PB.encode(e, 2, x.reduce_vehicle_cost_model)
    x.max_callback_cache_size != zero(Int32) && PB.encode(e, 3, x.max_callback_cache_size)
    return position(e.io) - initpos
end
function PB._encoded_size(x::RoutingModelParameters)
    encoded_size = 0
    !isnothing(x.solver_parameters) && (encoded_size += PB._encoded_size(x.solver_parameters, 1))
    x.reduce_vehicle_cost_model != false && (encoded_size += PB._encoded_size(x.reduce_vehicle_cost_model, 2))
    x.max_callback_cache_size != zero(Int32) && (encoded_size += PB._encoded_size(x.max_callback_cache_size, 3))
    return encoded_size
end

struct var"RoutingSearchParameters.LocalSearchNeighborhoodOperators"
    use_relocate::OptionalBoolean.T
    use_relocate_pair::OptionalBoolean.T
    use_light_relocate_pair::OptionalBoolean.T
    use_relocate_neighbors::OptionalBoolean.T
    use_relocate_subtrip::OptionalBoolean.T
    use_exchange::OptionalBoolean.T
    use_exchange_pair::OptionalBoolean.T
    use_exchange_subtrip::OptionalBoolean.T
    use_cross::OptionalBoolean.T
    use_cross_exchange::OptionalBoolean.T
    use_relocate_expensive_chain::OptionalBoolean.T
    use_two_opt::OptionalBoolean.T
    use_or_opt::OptionalBoolean.T
    use_lin_kernighan::OptionalBoolean.T
    use_tsp_opt::OptionalBoolean.T
    use_make_active::OptionalBoolean.T
    use_relocate_and_make_active::OptionalBoolean.T
    use_exchange_and_make_active::OptionalBoolean.T
    use_exchange_path_start_ends_and_make_active::OptionalBoolean.T
    use_make_inactive::OptionalBoolean.T
    use_make_chain_inactive::OptionalBoolean.T
    use_swap_active::OptionalBoolean.T
    use_swap_active_chain::OptionalBoolean.T
    use_extended_swap_active::OptionalBoolean.T
    use_shortest_path_swap_active::OptionalBoolean.T
    use_shortest_path_two_opt::OptionalBoolean.T
    use_node_pair_swap_active::OptionalBoolean.T
    use_path_lns::OptionalBoolean.T
    use_full_path_lns::OptionalBoolean.T
    use_tsp_lns::OptionalBoolean.T
    use_inactive_lns::OptionalBoolean.T
    use_global_cheapest_insertion_path_lns::OptionalBoolean.T
    use_local_cheapest_insertion_path_lns::OptionalBoolean.T
    use_relocate_path_global_cheapest_insertion_insert_unperformed::OptionalBoolean.T
    use_global_cheapest_insertion_expensive_chain_lns::OptionalBoolean.T
    use_local_cheapest_insertion_expensive_chain_lns::OptionalBoolean.T
    use_global_cheapest_insertion_close_nodes_lns::OptionalBoolean.T
    use_local_cheapest_insertion_close_nodes_lns::OptionalBoolean.T
end
PB.default_values(::Type{var"RoutingSearchParameters.LocalSearchNeighborhoodOperators"}) = (;use_relocate = OptionalBoolean.BOOL_UNSPECIFIED, use_relocate_pair = OptionalBoolean.BOOL_UNSPECIFIED, use_light_relocate_pair = OptionalBoolean.BOOL_UNSPECIFIED, use_relocate_neighbors = OptionalBoolean.BOOL_UNSPECIFIED, use_relocate_subtrip = OptionalBoolean.BOOL_UNSPECIFIED, use_exchange = OptionalBoolean.BOOL_UNSPECIFIED, use_exchange_pair = OptionalBoolean.BOOL_UNSPECIFIED, use_exchange_subtrip = OptionalBoolean.BOOL_UNSPECIFIED, use_cross = OptionalBoolean.BOOL_UNSPECIFIED, use_cross_exchange = OptionalBoolean.BOOL_UNSPECIFIED, use_relocate_expensive_chain = OptionalBoolean.BOOL_UNSPECIFIED, use_two_opt = OptionalBoolean.BOOL_UNSPECIFIED, use_or_opt = OptionalBoolean.BOOL_UNSPECIFIED, use_lin_kernighan = OptionalBoolean.BOOL_UNSPECIFIED, use_tsp_opt = OptionalBoolean.BOOL_UNSPECIFIED, use_make_active = OptionalBoolean.BOOL_UNSPECIFIED, use_relocate_and_make_active = OptionalBoolean.BOOL_UNSPECIFIED, use_exchange_and_make_active = OptionalBoolean.BOOL_UNSPECIFIED, use_exchange_path_start_ends_and_make_active = OptionalBoolean.BOOL_UNSPECIFIED, use_make_inactive = OptionalBoolean.BOOL_UNSPECIFIED, use_make_chain_inactive = OptionalBoolean.BOOL_UNSPECIFIED, use_swap_active = OptionalBoolean.BOOL_UNSPECIFIED, use_swap_active_chain = OptionalBoolean.BOOL_UNSPECIFIED, use_extended_swap_active = OptionalBoolean.BOOL_UNSPECIFIED, use_shortest_path_swap_active = OptionalBoolean.BOOL_UNSPECIFIED, use_shortest_path_two_opt = OptionalBoolean.BOOL_UNSPECIFIED, use_node_pair_swap_active = OptionalBoolean.BOOL_UNSPECIFIED, use_path_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_full_path_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_tsp_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_inactive_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_global_cheapest_insertion_path_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_local_cheapest_insertion_path_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_relocate_path_global_cheapest_insertion_insert_unperformed = OptionalBoolean.BOOL_UNSPECIFIED, use_global_cheapest_insertion_expensive_chain_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_local_cheapest_insertion_expensive_chain_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_global_cheapest_insertion_close_nodes_lns = OptionalBoolean.BOOL_UNSPECIFIED, use_local_cheapest_insertion_close_nodes_lns = OptionalBoolean.BOOL_UNSPECIFIED)
PB.field_numbers(::Type{var"RoutingSearchParameters.LocalSearchNeighborhoodOperators"}) = (;use_relocate = 1, use_relocate_pair = 2, use_light_relocate_pair = 24, use_relocate_neighbors = 3, use_relocate_subtrip = 25, use_exchange = 4, use_exchange_pair = 22, use_exchange_subtrip = 26, use_cross = 5, use_cross_exchange = 6, use_relocate_expensive_chain = 23, use_two_opt = 7, use_or_opt = 8, use_lin_kernighan = 9, use_tsp_opt = 10, use_make_active = 11, use_relocate_and_make_active = 21, use_exchange_and_make_active = 37, use_exchange_path_start_ends_and_make_active = 38, use_make_inactive = 12, use_make_chain_inactive = 13, use_swap_active = 14, use_swap_active_chain = 35, use_extended_swap_active = 15, use_shortest_path_swap_active = 34, use_shortest_path_two_opt = 36, use_node_pair_swap_active = 20, use_path_lns = 16, use_full_path_lns = 17, use_tsp_lns = 18, use_inactive_lns = 19, use_global_cheapest_insertion_path_lns = 27, use_local_cheapest_insertion_path_lns = 28, use_relocate_path_global_cheapest_insertion_insert_unperformed = 33, use_global_cheapest_insertion_expensive_chain_lns = 29, use_local_cheapest_insertion_expensive_chain_lns = 30, use_global_cheapest_insertion_close_nodes_lns = 31, use_local_cheapest_insertion_close_nodes_lns = 32)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"RoutingSearchParameters.LocalSearchNeighborhoodOperators"})
    use_relocate = OptionalBoolean.BOOL_UNSPECIFIED
    use_relocate_pair = OptionalBoolean.BOOL_UNSPECIFIED
    use_light_relocate_pair = OptionalBoolean.BOOL_UNSPECIFIED
    use_relocate_neighbors = OptionalBoolean.BOOL_UNSPECIFIED
    use_relocate_subtrip = OptionalBoolean.BOOL_UNSPECIFIED
    use_exchange = OptionalBoolean.BOOL_UNSPECIFIED
    use_exchange_pair = OptionalBoolean.BOOL_UNSPECIFIED
    use_exchange_subtrip = OptionalBoolean.BOOL_UNSPECIFIED
    use_cross = OptionalBoolean.BOOL_UNSPECIFIED
    use_cross_exchange = OptionalBoolean.BOOL_UNSPECIFIED
    use_relocate_expensive_chain = OptionalBoolean.BOOL_UNSPECIFIED
    use_two_opt = OptionalBoolean.BOOL_UNSPECIFIED
    use_or_opt = OptionalBoolean.BOOL_UNSPECIFIED
    use_lin_kernighan = OptionalBoolean.BOOL_UNSPECIFIED
    use_tsp_opt = OptionalBoolean.BOOL_UNSPECIFIED
    use_make_active = OptionalBoolean.BOOL_UNSPECIFIED
    use_relocate_and_make_active = OptionalBoolean.BOOL_UNSPECIFIED
    use_exchange_and_make_active = OptionalBoolean.BOOL_UNSPECIFIED
    use_exchange_path_start_ends_and_make_active = OptionalBoolean.BOOL_UNSPECIFIED
    use_make_inactive = OptionalBoolean.BOOL_UNSPECIFIED
    use_make_chain_inactive = OptionalBoolean.BOOL_UNSPECIFIED
    use_swap_active = OptionalBoolean.BOOL_UNSPECIFIED
    use_swap_active_chain = OptionalBoolean.BOOL_UNSPECIFIED
    use_extended_swap_active = OptionalBoolean.BOOL_UNSPECIFIED
    use_shortest_path_swap_active = OptionalBoolean.BOOL_UNSPECIFIED
    use_shortest_path_two_opt = OptionalBoolean.BOOL_UNSPECIFIED
    use_node_pair_swap_active = OptionalBoolean.BOOL_UNSPECIFIED
    use_path_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_full_path_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_tsp_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_inactive_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_global_cheapest_insertion_path_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_local_cheapest_insertion_path_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_relocate_path_global_cheapest_insertion_insert_unperformed = OptionalBoolean.BOOL_UNSPECIFIED
    use_global_cheapest_insertion_expensive_chain_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_local_cheapest_insertion_expensive_chain_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_global_cheapest_insertion_close_nodes_lns = OptionalBoolean.BOOL_UNSPECIFIED
    use_local_cheapest_insertion_close_nodes_lns = OptionalBoolean.BOOL_UNSPECIFIED
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            use_relocate = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 2
            use_relocate_pair = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 24
            use_light_relocate_pair = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 3
            use_relocate_neighbors = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 25
            use_relocate_subtrip = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 4
            use_exchange = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 22
            use_exchange_pair = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 26
            use_exchange_subtrip = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 5
            use_cross = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 6
            use_cross_exchange = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 23
            use_relocate_expensive_chain = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 7
            use_two_opt = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 8
            use_or_opt = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 9
            use_lin_kernighan = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 10
            use_tsp_opt = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 11
            use_make_active = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 21
            use_relocate_and_make_active = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 37
            use_exchange_and_make_active = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 38
            use_exchange_path_start_ends_and_make_active = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 12
            use_make_inactive = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 13
            use_make_chain_inactive = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 14
            use_swap_active = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 35
            use_swap_active_chain = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 15
            use_extended_swap_active = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 34
            use_shortest_path_swap_active = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 36
            use_shortest_path_two_opt = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 20
            use_node_pair_swap_active = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 16
            use_path_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 17
            use_full_path_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 18
            use_tsp_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 19
            use_inactive_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 27
            use_global_cheapest_insertion_path_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 28
            use_local_cheapest_insertion_path_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 33
            use_relocate_path_global_cheapest_insertion_insert_unperformed = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 29
            use_global_cheapest_insertion_expensive_chain_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 30
            use_local_cheapest_insertion_expensive_chain_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 31
            use_global_cheapest_insertion_close_nodes_lns = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 32
            use_local_cheapest_insertion_close_nodes_lns = PB.decode(d, OptionalBoolean.T)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"RoutingSearchParameters.LocalSearchNeighborhoodOperators"(use_relocate, use_relocate_pair, use_light_relocate_pair, use_relocate_neighbors, use_relocate_subtrip, use_exchange, use_exchange_pair, use_exchange_subtrip, use_cross, use_cross_exchange, use_relocate_expensive_chain, use_two_opt, use_or_opt, use_lin_kernighan, use_tsp_opt, use_make_active, use_relocate_and_make_active, use_exchange_and_make_active, use_exchange_path_start_ends_and_make_active, use_make_inactive, use_make_chain_inactive, use_swap_active, use_swap_active_chain, use_extended_swap_active, use_shortest_path_swap_active, use_shortest_path_two_opt, use_node_pair_swap_active, use_path_lns, use_full_path_lns, use_tsp_lns, use_inactive_lns, use_global_cheapest_insertion_path_lns, use_local_cheapest_insertion_path_lns, use_relocate_path_global_cheapest_insertion_insert_unperformed, use_global_cheapest_insertion_expensive_chain_lns, use_local_cheapest_insertion_expensive_chain_lns, use_global_cheapest_insertion_close_nodes_lns, use_local_cheapest_insertion_close_nodes_lns)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"RoutingSearchParameters.LocalSearchNeighborhoodOperators")
    initpos = position(e.io)
    x.use_relocate != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 1, x.use_relocate)
    x.use_relocate_pair != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 2, x.use_relocate_pair)
    x.use_light_relocate_pair != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 24, x.use_light_relocate_pair)
    x.use_relocate_neighbors != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 3, x.use_relocate_neighbors)
    x.use_relocate_subtrip != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 25, x.use_relocate_subtrip)
    x.use_exchange != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 4, x.use_exchange)
    x.use_exchange_pair != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 22, x.use_exchange_pair)
    x.use_exchange_subtrip != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 26, x.use_exchange_subtrip)
    x.use_cross != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 5, x.use_cross)
    x.use_cross_exchange != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 6, x.use_cross_exchange)
    x.use_relocate_expensive_chain != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 23, x.use_relocate_expensive_chain)
    x.use_two_opt != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 7, x.use_two_opt)
    x.use_or_opt != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 8, x.use_or_opt)
    x.use_lin_kernighan != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 9, x.use_lin_kernighan)
    x.use_tsp_opt != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 10, x.use_tsp_opt)
    x.use_make_active != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 11, x.use_make_active)
    x.use_relocate_and_make_active != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 21, x.use_relocate_and_make_active)
    x.use_exchange_and_make_active != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 37, x.use_exchange_and_make_active)
    x.use_exchange_path_start_ends_and_make_active != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 38, x.use_exchange_path_start_ends_and_make_active)
    x.use_make_inactive != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 12, x.use_make_inactive)
    x.use_make_chain_inactive != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 13, x.use_make_chain_inactive)
    x.use_swap_active != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 14, x.use_swap_active)
    x.use_swap_active_chain != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 35, x.use_swap_active_chain)
    x.use_extended_swap_active != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 15, x.use_extended_swap_active)
    x.use_shortest_path_swap_active != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 34, x.use_shortest_path_swap_active)
    x.use_shortest_path_two_opt != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 36, x.use_shortest_path_two_opt)
    x.use_node_pair_swap_active != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 20, x.use_node_pair_swap_active)
    x.use_path_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 16, x.use_path_lns)
    x.use_full_path_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 17, x.use_full_path_lns)
    x.use_tsp_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 18, x.use_tsp_lns)
    x.use_inactive_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 19, x.use_inactive_lns)
    x.use_global_cheapest_insertion_path_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 27, x.use_global_cheapest_insertion_path_lns)
    x.use_local_cheapest_insertion_path_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 28, x.use_local_cheapest_insertion_path_lns)
    x.use_relocate_path_global_cheapest_insertion_insert_unperformed != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 33, x.use_relocate_path_global_cheapest_insertion_insert_unperformed)
    x.use_global_cheapest_insertion_expensive_chain_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 29, x.use_global_cheapest_insertion_expensive_chain_lns)
    x.use_local_cheapest_insertion_expensive_chain_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 30, x.use_local_cheapest_insertion_expensive_chain_lns)
    x.use_global_cheapest_insertion_close_nodes_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 31, x.use_global_cheapest_insertion_close_nodes_lns)
    x.use_local_cheapest_insertion_close_nodes_lns != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 32, x.use_local_cheapest_insertion_close_nodes_lns)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"RoutingSearchParameters.LocalSearchNeighborhoodOperators")
    encoded_size = 0
    x.use_relocate != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_relocate, 1))
    x.use_relocate_pair != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_relocate_pair, 2))
    x.use_light_relocate_pair != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_light_relocate_pair, 24))
    x.use_relocate_neighbors != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_relocate_neighbors, 3))
    x.use_relocate_subtrip != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_relocate_subtrip, 25))
    x.use_exchange != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_exchange, 4))
    x.use_exchange_pair != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_exchange_pair, 22))
    x.use_exchange_subtrip != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_exchange_subtrip, 26))
    x.use_cross != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_cross, 5))
    x.use_cross_exchange != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_cross_exchange, 6))
    x.use_relocate_expensive_chain != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_relocate_expensive_chain, 23))
    x.use_two_opt != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_two_opt, 7))
    x.use_or_opt != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_or_opt, 8))
    x.use_lin_kernighan != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_lin_kernighan, 9))
    x.use_tsp_opt != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_tsp_opt, 10))
    x.use_make_active != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_make_active, 11))
    x.use_relocate_and_make_active != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_relocate_and_make_active, 21))
    x.use_exchange_and_make_active != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_exchange_and_make_active, 37))
    x.use_exchange_path_start_ends_and_make_active != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_exchange_path_start_ends_and_make_active, 38))
    x.use_make_inactive != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_make_inactive, 12))
    x.use_make_chain_inactive != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_make_chain_inactive, 13))
    x.use_swap_active != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_swap_active, 14))
    x.use_swap_active_chain != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_swap_active_chain, 35))
    x.use_extended_swap_active != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_extended_swap_active, 15))
    x.use_shortest_path_swap_active != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_shortest_path_swap_active, 34))
    x.use_shortest_path_two_opt != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_shortest_path_two_opt, 36))
    x.use_node_pair_swap_active != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_node_pair_swap_active, 20))
    x.use_path_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_path_lns, 16))
    x.use_full_path_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_full_path_lns, 17))
    x.use_tsp_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_tsp_lns, 18))
    x.use_inactive_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_inactive_lns, 19))
    x.use_global_cheapest_insertion_path_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_global_cheapest_insertion_path_lns, 27))
    x.use_local_cheapest_insertion_path_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_local_cheapest_insertion_path_lns, 28))
    x.use_relocate_path_global_cheapest_insertion_insert_unperformed != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_relocate_path_global_cheapest_insertion_insert_unperformed, 33))
    x.use_global_cheapest_insertion_expensive_chain_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_global_cheapest_insertion_expensive_chain_lns, 29))
    x.use_local_cheapest_insertion_expensive_chain_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_local_cheapest_insertion_expensive_chain_lns, 30))
    x.use_global_cheapest_insertion_close_nodes_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_global_cheapest_insertion_close_nodes_lns, 31))
    x.use_local_cheapest_insertion_close_nodes_lns != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_local_cheapest_insertion_close_nodes_lns, 32))
    return encoded_size
end

struct var"RoutingSearchParameters.ImprovementSearchLimitParameters"
    improvement_rate_coefficient::Float64
    improvement_rate_solutions_distance::Int32
end
PB.default_values(::Type{var"RoutingSearchParameters.ImprovementSearchLimitParameters"}) = (;improvement_rate_coefficient = zero(Float64), improvement_rate_solutions_distance = zero(Int32))
PB.field_numbers(::Type{var"RoutingSearchParameters.ImprovementSearchLimitParameters"}) = (;improvement_rate_coefficient = 38, improvement_rate_solutions_distance = 39)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"RoutingSearchParameters.ImprovementSearchLimitParameters"})
    improvement_rate_coefficient = zero(Float64)
    improvement_rate_solutions_distance = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 38
            improvement_rate_coefficient = PB.decode(d, Float64)
        elseif field_number == 39
            improvement_rate_solutions_distance = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"RoutingSearchParameters.ImprovementSearchLimitParameters"(improvement_rate_coefficient, improvement_rate_solutions_distance)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"RoutingSearchParameters.ImprovementSearchLimitParameters")
    initpos = position(e.io)
    x.improvement_rate_coefficient !== zero(Float64) && PB.encode(e, 38, x.improvement_rate_coefficient)
    x.improvement_rate_solutions_distance != zero(Int32) && PB.encode(e, 39, x.improvement_rate_solutions_distance)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"RoutingSearchParameters.ImprovementSearchLimitParameters")
    encoded_size = 0
    x.improvement_rate_coefficient !== zero(Float64) && (encoded_size += PB._encoded_size(x.improvement_rate_coefficient, 38))
    x.improvement_rate_solutions_distance != zero(Int32) && (encoded_size += PB._encoded_size(x.improvement_rate_solutions_distance, 39))
    return encoded_size
end

@enumx var"RoutingSearchParameters.SchedulingSolver" SCHEDULING_UNSET=0 SCHEDULING_GLOP=1 SCHEDULING_CP_SAT=2

struct RoutingSearchParameters
    first_solution_strategy::var"FirstSolutionStrategy.Value".T
    use_unfiltered_first_solution_strategy::Bool
    savings_neighbors_ratio::Float64
    savings_max_memory_usage_bytes::Float64
    savings_add_reverse_arcs::Bool
    savings_arc_coefficient::Float64
    cheapest_insertion_farthest_seeds_ratio::Float64
    cheapest_insertion_first_solution_neighbors_ratio::Float64
    cheapest_insertion_first_solution_min_neighbors::Int32
    cheapest_insertion_ls_operator_neighbors_ratio::Float64
    cheapest_insertion_ls_operator_min_neighbors::Int32
    cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization::Bool
    cheapest_insertion_add_unperformed_entries::Bool
    local_cheapest_insertion_pickup_delivery_strategy::var"RoutingSearchParameters.PairInsertionStrategy".T
    local_cheapest_cost_insertion_pickup_delivery_strategy::var"RoutingSearchParameters.PairInsertionStrategy".T
    local_cheapest_insertion_sorting_properties::Vector{var"RoutingSearchParameters.InsertionSortingProperty".T}
    christofides_use_minimum_matching::Bool
    first_solution_optimization_period::Int32
    local_search_operators::Union{Nothing,var"RoutingSearchParameters.LocalSearchNeighborhoodOperators"}
    ls_operator_neighbors_ratio::Float64
    ls_operator_min_neighbors::Int32
    use_multi_armed_bandit_concatenate_operators::Bool
    multi_armed_bandit_compound_operator_memory_coefficient::Float64
    multi_armed_bandit_compound_operator_exploration_coefficient::Float64
    max_swap_active_chain_size::Int32
    relocate_expensive_chain_num_arcs_to_consider::Int32
    heuristic_expensive_chain_lns_num_arcs_to_consider::Int32
    heuristic_close_nodes_lns_num_nodes::Int32
    local_search_metaheuristic::var"LocalSearchMetaheuristic.Value".T
    local_search_metaheuristics::Vector{var"LocalSearchMetaheuristic.Value".T}
    num_max_local_optima_before_metaheuristic_switch::Int32
    guided_local_search_lambda_coefficient::Float64
    guided_local_search_reset_penalties_on_new_best_solution::Bool
    guided_local_search_penalize_with_vehicle_classes::Bool
    use_guided_local_search_penalties_in_local_search_operators::Bool
    use_depth_first_search::Bool
    use_cp::OptionalBoolean.T
    use_cp_sat::OptionalBoolean.T
    use_generalized_cp_sat::OptionalBoolean.T
    sat_parameters::Union{Nothing,operations_research.sat.SatParameters}
    report_intermediate_cp_sat_solutions::Bool
    fallback_to_cp_sat_size_threshold::Int32
    continuous_scheduling_solver::var"RoutingSearchParameters.SchedulingSolver".T
    mixed_integer_scheduling_solver::var"RoutingSearchParameters.SchedulingSolver".T
    disable_scheduling_beware_this_may_degrade_performance::Bool
    optimization_step::Float64
    number_of_solutions_to_collect::Int32
    solution_limit::Int64
    time_limit::Union{Nothing,google.protobuf.Duration}
    lns_time_limit::Union{Nothing,google.protobuf.Duration}
    secondary_ls_time_limit_ratio::Float64
    improvement_limit_parameters::Union{Nothing,var"RoutingSearchParameters.ImprovementSearchLimitParameters"}
    use_full_propagation::Bool
    log_search::Bool
    log_cost_scaling_factor::Float64
    log_cost_offset::Float64
    log_tag::String
    use_iterated_local_search::Bool
    iterated_local_search_parameters::Union{Nothing,IteratedLocalSearchParameters}
end
PB.reserved_fields(::Type{RoutingSearchParameters}) = (names = String[], numbers = Union{Int,UnitRange{Int}}[19, 65])
PB.default_values(::Type{RoutingSearchParameters}) = (;first_solution_strategy = var"FirstSolutionStrategy.Value".UNSET, use_unfiltered_first_solution_strategy = false, savings_neighbors_ratio = zero(Float64), savings_max_memory_usage_bytes = zero(Float64), savings_add_reverse_arcs = false, savings_arc_coefficient = zero(Float64), cheapest_insertion_farthest_seeds_ratio = zero(Float64), cheapest_insertion_first_solution_neighbors_ratio = zero(Float64), cheapest_insertion_first_solution_min_neighbors = zero(Int32), cheapest_insertion_ls_operator_neighbors_ratio = zero(Float64), cheapest_insertion_ls_operator_min_neighbors = zero(Int32), cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = false, cheapest_insertion_add_unperformed_entries = false, local_cheapest_insertion_pickup_delivery_strategy = var"RoutingSearchParameters.PairInsertionStrategy".AUTOMATIC, local_cheapest_cost_insertion_pickup_delivery_strategy = var"RoutingSearchParameters.PairInsertionStrategy".AUTOMATIC, local_cheapest_insertion_sorting_properties = Vector{var"RoutingSearchParameters.InsertionSortingProperty".T}(), christofides_use_minimum_matching = false, first_solution_optimization_period = zero(Int32), local_search_operators = nothing, ls_operator_neighbors_ratio = zero(Float64), ls_operator_min_neighbors = zero(Int32), use_multi_armed_bandit_concatenate_operators = false, multi_armed_bandit_compound_operator_memory_coefficient = zero(Float64), multi_armed_bandit_compound_operator_exploration_coefficient = zero(Float64), max_swap_active_chain_size = zero(Int32), relocate_expensive_chain_num_arcs_to_consider = zero(Int32), heuristic_expensive_chain_lns_num_arcs_to_consider = zero(Int32), heuristic_close_nodes_lns_num_nodes = zero(Int32), local_search_metaheuristic = var"LocalSearchMetaheuristic.Value".UNSET, local_search_metaheuristics = Vector{var"LocalSearchMetaheuristic.Value".T}(), num_max_local_optima_before_metaheuristic_switch = zero(Int32), guided_local_search_lambda_coefficient = zero(Float64), guided_local_search_reset_penalties_on_new_best_solution = false, guided_local_search_penalize_with_vehicle_classes = false, use_guided_local_search_penalties_in_local_search_operators = false, use_depth_first_search = false, use_cp = OptionalBoolean.BOOL_UNSPECIFIED, use_cp_sat = OptionalBoolean.BOOL_UNSPECIFIED, use_generalized_cp_sat = OptionalBoolean.BOOL_UNSPECIFIED, sat_parameters = nothing, report_intermediate_cp_sat_solutions = false, fallback_to_cp_sat_size_threshold = zero(Int32), continuous_scheduling_solver = var"RoutingSearchParameters.SchedulingSolver".SCHEDULING_UNSET, mixed_integer_scheduling_solver = var"RoutingSearchParameters.SchedulingSolver".SCHEDULING_UNSET, disable_scheduling_beware_this_may_degrade_performance = false, optimization_step = zero(Float64), number_of_solutions_to_collect = zero(Int32), solution_limit = zero(Int64), time_limit = nothing, lns_time_limit = nothing, secondary_ls_time_limit_ratio = zero(Float64), improvement_limit_parameters = nothing, use_full_propagation = false, log_search = false, log_cost_scaling_factor = zero(Float64), log_cost_offset = zero(Float64), log_tag = "", use_iterated_local_search = false, iterated_local_search_parameters = nothing)
PB.field_numbers(::Type{RoutingSearchParameters}) = (;first_solution_strategy = 1, use_unfiltered_first_solution_strategy = 2, savings_neighbors_ratio = 14, savings_max_memory_usage_bytes = 23, savings_add_reverse_arcs = 15, savings_arc_coefficient = 18, cheapest_insertion_farthest_seeds_ratio = 16, cheapest_insertion_first_solution_neighbors_ratio = 21, cheapest_insertion_first_solution_min_neighbors = 44, cheapest_insertion_ls_operator_neighbors_ratio = 31, cheapest_insertion_ls_operator_min_neighbors = 45, cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = 46, cheapest_insertion_add_unperformed_entries = 40, local_cheapest_insertion_pickup_delivery_strategy = 49, local_cheapest_cost_insertion_pickup_delivery_strategy = 55, local_cheapest_insertion_sorting_properties = 67, christofides_use_minimum_matching = 30, first_solution_optimization_period = 59, local_search_operators = 3, ls_operator_neighbors_ratio = 53, ls_operator_min_neighbors = 54, use_multi_armed_bandit_concatenate_operators = 41, multi_armed_bandit_compound_operator_memory_coefficient = 42, multi_armed_bandit_compound_operator_exploration_coefficient = 43, max_swap_active_chain_size = 66, relocate_expensive_chain_num_arcs_to_consider = 20, heuristic_expensive_chain_lns_num_arcs_to_consider = 32, heuristic_close_nodes_lns_num_nodes = 35, local_search_metaheuristic = 4, local_search_metaheuristics = 63, num_max_local_optima_before_metaheuristic_switch = 64, guided_local_search_lambda_coefficient = 5, guided_local_search_reset_penalties_on_new_best_solution = 51, guided_local_search_penalize_with_vehicle_classes = 61, use_guided_local_search_penalties_in_local_search_operators = 62, use_depth_first_search = 6, use_cp = 28, use_cp_sat = 27, use_generalized_cp_sat = 47, sat_parameters = 48, report_intermediate_cp_sat_solutions = 56, fallback_to_cp_sat_size_threshold = 52, continuous_scheduling_solver = 33, mixed_integer_scheduling_solver = 34, disable_scheduling_beware_this_may_degrade_performance = 50, optimization_step = 7, number_of_solutions_to_collect = 17, solution_limit = 8, time_limit = 9, lns_time_limit = 10, secondary_ls_time_limit_ratio = 57, improvement_limit_parameters = 37, use_full_propagation = 11, log_search = 13, log_cost_scaling_factor = 22, log_cost_offset = 29, log_tag = 36, use_iterated_local_search = 58, iterated_local_search_parameters = 60)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:RoutingSearchParameters})
    first_solution_strategy = var"FirstSolutionStrategy.Value".UNSET
    use_unfiltered_first_solution_strategy = false
    savings_neighbors_ratio = zero(Float64)
    savings_max_memory_usage_bytes = zero(Float64)
    savings_add_reverse_arcs = false
    savings_arc_coefficient = zero(Float64)
    cheapest_insertion_farthest_seeds_ratio = zero(Float64)
    cheapest_insertion_first_solution_neighbors_ratio = zero(Float64)
    cheapest_insertion_first_solution_min_neighbors = zero(Int32)
    cheapest_insertion_ls_operator_neighbors_ratio = zero(Float64)
    cheapest_insertion_ls_operator_min_neighbors = zero(Int32)
    cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = false
    cheapest_insertion_add_unperformed_entries = false
    local_cheapest_insertion_pickup_delivery_strategy = var"RoutingSearchParameters.PairInsertionStrategy".AUTOMATIC
    local_cheapest_cost_insertion_pickup_delivery_strategy = var"RoutingSearchParameters.PairInsertionStrategy".AUTOMATIC
    local_cheapest_insertion_sorting_properties = PB.BufferedVector{var"RoutingSearchParameters.InsertionSortingProperty".T}()
    christofides_use_minimum_matching = false
    first_solution_optimization_period = zero(Int32)
    local_search_operators = Ref{Union{Nothing,var"RoutingSearchParameters.LocalSearchNeighborhoodOperators"}}(nothing)
    ls_operator_neighbors_ratio = zero(Float64)
    ls_operator_min_neighbors = zero(Int32)
    use_multi_armed_bandit_concatenate_operators = false
    multi_armed_bandit_compound_operator_memory_coefficient = zero(Float64)
    multi_armed_bandit_compound_operator_exploration_coefficient = zero(Float64)
    max_swap_active_chain_size = zero(Int32)
    relocate_expensive_chain_num_arcs_to_consider = zero(Int32)
    heuristic_expensive_chain_lns_num_arcs_to_consider = zero(Int32)
    heuristic_close_nodes_lns_num_nodes = zero(Int32)
    local_search_metaheuristic = var"LocalSearchMetaheuristic.Value".UNSET
    local_search_metaheuristics = PB.BufferedVector{var"LocalSearchMetaheuristic.Value".T}()
    num_max_local_optima_before_metaheuristic_switch = zero(Int32)
    guided_local_search_lambda_coefficient = zero(Float64)
    guided_local_search_reset_penalties_on_new_best_solution = false
    guided_local_search_penalize_with_vehicle_classes = false
    use_guided_local_search_penalties_in_local_search_operators = false
    use_depth_first_search = false
    use_cp = OptionalBoolean.BOOL_UNSPECIFIED
    use_cp_sat = OptionalBoolean.BOOL_UNSPECIFIED
    use_generalized_cp_sat = OptionalBoolean.BOOL_UNSPECIFIED
    sat_parameters = Ref{Union{Nothing,operations_research.sat.SatParameters}}(nothing)
    report_intermediate_cp_sat_solutions = false
    fallback_to_cp_sat_size_threshold = zero(Int32)
    continuous_scheduling_solver = var"RoutingSearchParameters.SchedulingSolver".SCHEDULING_UNSET
    mixed_integer_scheduling_solver = var"RoutingSearchParameters.SchedulingSolver".SCHEDULING_UNSET
    disable_scheduling_beware_this_may_degrade_performance = false
    optimization_step = zero(Float64)
    number_of_solutions_to_collect = zero(Int32)
    solution_limit = zero(Int64)
    time_limit = Ref{Union{Nothing,google.protobuf.Duration}}(nothing)
    lns_time_limit = Ref{Union{Nothing,google.protobuf.Duration}}(nothing)
    secondary_ls_time_limit_ratio = zero(Float64)
    improvement_limit_parameters = Ref{Union{Nothing,var"RoutingSearchParameters.ImprovementSearchLimitParameters"}}(nothing)
    use_full_propagation = false
    log_search = false
    log_cost_scaling_factor = zero(Float64)
    log_cost_offset = zero(Float64)
    log_tag = ""
    use_iterated_local_search = false
    iterated_local_search_parameters = Ref{Union{Nothing,IteratedLocalSearchParameters}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            first_solution_strategy = PB.decode(d, var"FirstSolutionStrategy.Value".T)
        elseif field_number == 2
            use_unfiltered_first_solution_strategy = PB.decode(d, Bool)
        elseif field_number == 14
            savings_neighbors_ratio = PB.decode(d, Float64)
        elseif field_number == 23
            savings_max_memory_usage_bytes = PB.decode(d, Float64)
        elseif field_number == 15
            savings_add_reverse_arcs = PB.decode(d, Bool)
        elseif field_number == 18
            savings_arc_coefficient = PB.decode(d, Float64)
        elseif field_number == 16
            cheapest_insertion_farthest_seeds_ratio = PB.decode(d, Float64)
        elseif field_number == 21
            cheapest_insertion_first_solution_neighbors_ratio = PB.decode(d, Float64)
        elseif field_number == 44
            cheapest_insertion_first_solution_min_neighbors = PB.decode(d, Int32)
        elseif field_number == 31
            cheapest_insertion_ls_operator_neighbors_ratio = PB.decode(d, Float64)
        elseif field_number == 45
            cheapest_insertion_ls_operator_min_neighbors = PB.decode(d, Int32)
        elseif field_number == 46
            cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = PB.decode(d, Bool)
        elseif field_number == 40
            cheapest_insertion_add_unperformed_entries = PB.decode(d, Bool)
        elseif field_number == 49
            local_cheapest_insertion_pickup_delivery_strategy = PB.decode(d, var"RoutingSearchParameters.PairInsertionStrategy".T)
        elseif field_number == 55
            local_cheapest_cost_insertion_pickup_delivery_strategy = PB.decode(d, var"RoutingSearchParameters.PairInsertionStrategy".T)
        elseif field_number == 67
            PB.decode!(d, wire_type, local_cheapest_insertion_sorting_properties)
        elseif field_number == 30
            christofides_use_minimum_matching = PB.decode(d, Bool)
        elseif field_number == 59
            first_solution_optimization_period = PB.decode(d, Int32)
        elseif field_number == 3
            PB.decode!(d, local_search_operators)
        elseif field_number == 53
            ls_operator_neighbors_ratio = PB.decode(d, Float64)
        elseif field_number == 54
            ls_operator_min_neighbors = PB.decode(d, Int32)
        elseif field_number == 41
            use_multi_armed_bandit_concatenate_operators = PB.decode(d, Bool)
        elseif field_number == 42
            multi_armed_bandit_compound_operator_memory_coefficient = PB.decode(d, Float64)
        elseif field_number == 43
            multi_armed_bandit_compound_operator_exploration_coefficient = PB.decode(d, Float64)
        elseif field_number == 66
            max_swap_active_chain_size = PB.decode(d, Int32)
        elseif field_number == 20
            relocate_expensive_chain_num_arcs_to_consider = PB.decode(d, Int32)
        elseif field_number == 32
            heuristic_expensive_chain_lns_num_arcs_to_consider = PB.decode(d, Int32)
        elseif field_number == 35
            heuristic_close_nodes_lns_num_nodes = PB.decode(d, Int32)
        elseif field_number == 4
            local_search_metaheuristic = PB.decode(d, var"LocalSearchMetaheuristic.Value".T)
        elseif field_number == 63
            PB.decode!(d, wire_type, local_search_metaheuristics)
        elseif field_number == 64
            num_max_local_optima_before_metaheuristic_switch = PB.decode(d, Int32)
        elseif field_number == 5
            guided_local_search_lambda_coefficient = PB.decode(d, Float64)
        elseif field_number == 51
            guided_local_search_reset_penalties_on_new_best_solution = PB.decode(d, Bool)
        elseif field_number == 61
            guided_local_search_penalize_with_vehicle_classes = PB.decode(d, Bool)
        elseif field_number == 62
            use_guided_local_search_penalties_in_local_search_operators = PB.decode(d, Bool)
        elseif field_number == 6
            use_depth_first_search = PB.decode(d, Bool)
        elseif field_number == 28
            use_cp = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 27
            use_cp_sat = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 47
            use_generalized_cp_sat = PB.decode(d, OptionalBoolean.T)
        elseif field_number == 48
            PB.decode!(d, sat_parameters)
        elseif field_number == 56
            report_intermediate_cp_sat_solutions = PB.decode(d, Bool)
        elseif field_number == 52
            fallback_to_cp_sat_size_threshold = PB.decode(d, Int32)
        elseif field_number == 33
            continuous_scheduling_solver = PB.decode(d, var"RoutingSearchParameters.SchedulingSolver".T)
        elseif field_number == 34
            mixed_integer_scheduling_solver = PB.decode(d, var"RoutingSearchParameters.SchedulingSolver".T)
        elseif field_number == 50
            disable_scheduling_beware_this_may_degrade_performance = PB.decode(d, Bool)
        elseif field_number == 7
            optimization_step = PB.decode(d, Float64)
        elseif field_number == 17
            number_of_solutions_to_collect = PB.decode(d, Int32)
        elseif field_number == 8
            solution_limit = PB.decode(d, Int64)
        elseif field_number == 9
            PB.decode!(d, time_limit)
        elseif field_number == 10
            PB.decode!(d, lns_time_limit)
        elseif field_number == 57
            secondary_ls_time_limit_ratio = PB.decode(d, Float64)
        elseif field_number == 37
            PB.decode!(d, improvement_limit_parameters)
        elseif field_number == 11
            use_full_propagation = PB.decode(d, Bool)
        elseif field_number == 13
            log_search = PB.decode(d, Bool)
        elseif field_number == 22
            log_cost_scaling_factor = PB.decode(d, Float64)
        elseif field_number == 29
            log_cost_offset = PB.decode(d, Float64)
        elseif field_number == 36
            log_tag = PB.decode(d, String)
        elseif field_number == 58
            use_iterated_local_search = PB.decode(d, Bool)
        elseif field_number == 60
            PB.decode!(d, iterated_local_search_parameters)
        else
            PB.skip(d, wire_type)
        end
    end
    return RoutingSearchParameters(first_solution_strategy, use_unfiltered_first_solution_strategy, savings_neighbors_ratio, savings_max_memory_usage_bytes, savings_add_reverse_arcs, savings_arc_coefficient, cheapest_insertion_farthest_seeds_ratio, cheapest_insertion_first_solution_neighbors_ratio, cheapest_insertion_first_solution_min_neighbors, cheapest_insertion_ls_operator_neighbors_ratio, cheapest_insertion_ls_operator_min_neighbors, cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization, cheapest_insertion_add_unperformed_entries, local_cheapest_insertion_pickup_delivery_strategy, local_cheapest_cost_insertion_pickup_delivery_strategy, local_cheapest_insertion_sorting_properties[], christofides_use_minimum_matching, first_solution_optimization_period, local_search_operators[], ls_operator_neighbors_ratio, ls_operator_min_neighbors, use_multi_armed_bandit_concatenate_operators, multi_armed_bandit_compound_operator_memory_coefficient, multi_armed_bandit_compound_operator_exploration_coefficient, max_swap_active_chain_size, relocate_expensive_chain_num_arcs_to_consider, heuristic_expensive_chain_lns_num_arcs_to_consider, heuristic_close_nodes_lns_num_nodes, local_search_metaheuristic, local_search_metaheuristics[], num_max_local_optima_before_metaheuristic_switch, guided_local_search_lambda_coefficient, guided_local_search_reset_penalties_on_new_best_solution, guided_local_search_penalize_with_vehicle_classes, use_guided_local_search_penalties_in_local_search_operators, use_depth_first_search, use_cp, use_cp_sat, use_generalized_cp_sat, sat_parameters[], report_intermediate_cp_sat_solutions, fallback_to_cp_sat_size_threshold, continuous_scheduling_solver, mixed_integer_scheduling_solver, disable_scheduling_beware_this_may_degrade_performance, optimization_step, number_of_solutions_to_collect, solution_limit, time_limit[], lns_time_limit[], secondary_ls_time_limit_ratio, improvement_limit_parameters[], use_full_propagation, log_search, log_cost_scaling_factor, log_cost_offset, log_tag, use_iterated_local_search, iterated_local_search_parameters[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::RoutingSearchParameters)
    initpos = position(e.io)
    x.first_solution_strategy != var"FirstSolutionStrategy.Value".UNSET && PB.encode(e, 1, x.first_solution_strategy)
    x.use_unfiltered_first_solution_strategy != false && PB.encode(e, 2, x.use_unfiltered_first_solution_strategy)
    x.savings_neighbors_ratio !== zero(Float64) && PB.encode(e, 14, x.savings_neighbors_ratio)
    x.savings_max_memory_usage_bytes !== zero(Float64) && PB.encode(e, 23, x.savings_max_memory_usage_bytes)
    x.savings_add_reverse_arcs != false && PB.encode(e, 15, x.savings_add_reverse_arcs)
    x.savings_arc_coefficient !== zero(Float64) && PB.encode(e, 18, x.savings_arc_coefficient)
    x.cheapest_insertion_farthest_seeds_ratio !== zero(Float64) && PB.encode(e, 16, x.cheapest_insertion_farthest_seeds_ratio)
    x.cheapest_insertion_first_solution_neighbors_ratio !== zero(Float64) && PB.encode(e, 21, x.cheapest_insertion_first_solution_neighbors_ratio)
    x.cheapest_insertion_first_solution_min_neighbors != zero(Int32) && PB.encode(e, 44, x.cheapest_insertion_first_solution_min_neighbors)
    x.cheapest_insertion_ls_operator_neighbors_ratio !== zero(Float64) && PB.encode(e, 31, x.cheapest_insertion_ls_operator_neighbors_ratio)
    x.cheapest_insertion_ls_operator_min_neighbors != zero(Int32) && PB.encode(e, 45, x.cheapest_insertion_ls_operator_min_neighbors)
    x.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization != false && PB.encode(e, 46, x.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization)
    x.cheapest_insertion_add_unperformed_entries != false && PB.encode(e, 40, x.cheapest_insertion_add_unperformed_entries)
    x.local_cheapest_insertion_pickup_delivery_strategy != var"RoutingSearchParameters.PairInsertionStrategy".AUTOMATIC && PB.encode(e, 49, x.local_cheapest_insertion_pickup_delivery_strategy)
    x.local_cheapest_cost_insertion_pickup_delivery_strategy != var"RoutingSearchParameters.PairInsertionStrategy".AUTOMATIC && PB.encode(e, 55, x.local_cheapest_cost_insertion_pickup_delivery_strategy)
    !isempty(x.local_cheapest_insertion_sorting_properties) && PB.encode(e, 67, x.local_cheapest_insertion_sorting_properties)
    x.christofides_use_minimum_matching != false && PB.encode(e, 30, x.christofides_use_minimum_matching)
    x.first_solution_optimization_period != zero(Int32) && PB.encode(e, 59, x.first_solution_optimization_period)
    !isnothing(x.local_search_operators) && PB.encode(e, 3, x.local_search_operators)
    x.ls_operator_neighbors_ratio !== zero(Float64) && PB.encode(e, 53, x.ls_operator_neighbors_ratio)
    x.ls_operator_min_neighbors != zero(Int32) && PB.encode(e, 54, x.ls_operator_min_neighbors)
    x.use_multi_armed_bandit_concatenate_operators != false && PB.encode(e, 41, x.use_multi_armed_bandit_concatenate_operators)
    x.multi_armed_bandit_compound_operator_memory_coefficient !== zero(Float64) && PB.encode(e, 42, x.multi_armed_bandit_compound_operator_memory_coefficient)
    x.multi_armed_bandit_compound_operator_exploration_coefficient !== zero(Float64) && PB.encode(e, 43, x.multi_armed_bandit_compound_operator_exploration_coefficient)
    x.max_swap_active_chain_size != zero(Int32) && PB.encode(e, 66, x.max_swap_active_chain_size)
    x.relocate_expensive_chain_num_arcs_to_consider != zero(Int32) && PB.encode(e, 20, x.relocate_expensive_chain_num_arcs_to_consider)
    x.heuristic_expensive_chain_lns_num_arcs_to_consider != zero(Int32) && PB.encode(e, 32, x.heuristic_expensive_chain_lns_num_arcs_to_consider)
    x.heuristic_close_nodes_lns_num_nodes != zero(Int32) && PB.encode(e, 35, x.heuristic_close_nodes_lns_num_nodes)
    x.local_search_metaheuristic != var"LocalSearchMetaheuristic.Value".UNSET && PB.encode(e, 4, x.local_search_metaheuristic)
    !isempty(x.local_search_metaheuristics) && PB.encode(e, 63, x.local_search_metaheuristics)
    x.num_max_local_optima_before_metaheuristic_switch != zero(Int32) && PB.encode(e, 64, x.num_max_local_optima_before_metaheuristic_switch)
    x.guided_local_search_lambda_coefficient !== zero(Float64) && PB.encode(e, 5, x.guided_local_search_lambda_coefficient)
    x.guided_local_search_reset_penalties_on_new_best_solution != false && PB.encode(e, 51, x.guided_local_search_reset_penalties_on_new_best_solution)
    x.guided_local_search_penalize_with_vehicle_classes != false && PB.encode(e, 61, x.guided_local_search_penalize_with_vehicle_classes)
    x.use_guided_local_search_penalties_in_local_search_operators != false && PB.encode(e, 62, x.use_guided_local_search_penalties_in_local_search_operators)
    x.use_depth_first_search != false && PB.encode(e, 6, x.use_depth_first_search)
    x.use_cp != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 28, x.use_cp)
    x.use_cp_sat != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 27, x.use_cp_sat)
    x.use_generalized_cp_sat != OptionalBoolean.BOOL_UNSPECIFIED && PB.encode(e, 47, x.use_generalized_cp_sat)
    !isnothing(x.sat_parameters) && PB.encode(e, 48, x.sat_parameters)
    x.report_intermediate_cp_sat_solutions != false && PB.encode(e, 56, x.report_intermediate_cp_sat_solutions)
    x.fallback_to_cp_sat_size_threshold != zero(Int32) && PB.encode(e, 52, x.fallback_to_cp_sat_size_threshold)
    x.continuous_scheduling_solver != var"RoutingSearchParameters.SchedulingSolver".SCHEDULING_UNSET && PB.encode(e, 33, x.continuous_scheduling_solver)
    x.mixed_integer_scheduling_solver != var"RoutingSearchParameters.SchedulingSolver".SCHEDULING_UNSET && PB.encode(e, 34, x.mixed_integer_scheduling_solver)
    x.disable_scheduling_beware_this_may_degrade_performance != false && PB.encode(e, 50, x.disable_scheduling_beware_this_may_degrade_performance)
    x.optimization_step !== zero(Float64) && PB.encode(e, 7, x.optimization_step)
    x.number_of_solutions_to_collect != zero(Int32) && PB.encode(e, 17, x.number_of_solutions_to_collect)
    x.solution_limit != zero(Int64) && PB.encode(e, 8, x.solution_limit)
    !isnothing(x.time_limit) && PB.encode(e, 9, x.time_limit)
    !isnothing(x.lns_time_limit) && PB.encode(e, 10, x.lns_time_limit)
    x.secondary_ls_time_limit_ratio !== zero(Float64) && PB.encode(e, 57, x.secondary_ls_time_limit_ratio)
    !isnothing(x.improvement_limit_parameters) && PB.encode(e, 37, x.improvement_limit_parameters)
    x.use_full_propagation != false && PB.encode(e, 11, x.use_full_propagation)
    x.log_search != false && PB.encode(e, 13, x.log_search)
    x.log_cost_scaling_factor !== zero(Float64) && PB.encode(e, 22, x.log_cost_scaling_factor)
    x.log_cost_offset !== zero(Float64) && PB.encode(e, 29, x.log_cost_offset)
    !isempty(x.log_tag) && PB.encode(e, 36, x.log_tag)
    x.use_iterated_local_search != false && PB.encode(e, 58, x.use_iterated_local_search)
    !isnothing(x.iterated_local_search_parameters) && PB.encode(e, 60, x.iterated_local_search_parameters)
    return position(e.io) - initpos
end
function PB._encoded_size(x::RoutingSearchParameters)
    encoded_size = 0
    x.first_solution_strategy != var"FirstSolutionStrategy.Value".UNSET && (encoded_size += PB._encoded_size(x.first_solution_strategy, 1))
    x.use_unfiltered_first_solution_strategy != false && (encoded_size += PB._encoded_size(x.use_unfiltered_first_solution_strategy, 2))
    x.savings_neighbors_ratio !== zero(Float64) && (encoded_size += PB._encoded_size(x.savings_neighbors_ratio, 14))
    x.savings_max_memory_usage_bytes !== zero(Float64) && (encoded_size += PB._encoded_size(x.savings_max_memory_usage_bytes, 23))
    x.savings_add_reverse_arcs != false && (encoded_size += PB._encoded_size(x.savings_add_reverse_arcs, 15))
    x.savings_arc_coefficient !== zero(Float64) && (encoded_size += PB._encoded_size(x.savings_arc_coefficient, 18))
    x.cheapest_insertion_farthest_seeds_ratio !== zero(Float64) && (encoded_size += PB._encoded_size(x.cheapest_insertion_farthest_seeds_ratio, 16))
    x.cheapest_insertion_first_solution_neighbors_ratio !== zero(Float64) && (encoded_size += PB._encoded_size(x.cheapest_insertion_first_solution_neighbors_ratio, 21))
    x.cheapest_insertion_first_solution_min_neighbors != zero(Int32) && (encoded_size += PB._encoded_size(x.cheapest_insertion_first_solution_min_neighbors, 44))
    x.cheapest_insertion_ls_operator_neighbors_ratio !== zero(Float64) && (encoded_size += PB._encoded_size(x.cheapest_insertion_ls_operator_neighbors_ratio, 31))
    x.cheapest_insertion_ls_operator_min_neighbors != zero(Int32) && (encoded_size += PB._encoded_size(x.cheapest_insertion_ls_operator_min_neighbors, 45))
    x.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization != false && (encoded_size += PB._encoded_size(x.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization, 46))
    x.cheapest_insertion_add_unperformed_entries != false && (encoded_size += PB._encoded_size(x.cheapest_insertion_add_unperformed_entries, 40))
    x.local_cheapest_insertion_pickup_delivery_strategy != var"RoutingSearchParameters.PairInsertionStrategy".AUTOMATIC && (encoded_size += PB._encoded_size(x.local_cheapest_insertion_pickup_delivery_strategy, 49))
    x.local_cheapest_cost_insertion_pickup_delivery_strategy != var"RoutingSearchParameters.PairInsertionStrategy".AUTOMATIC && (encoded_size += PB._encoded_size(x.local_cheapest_cost_insertion_pickup_delivery_strategy, 55))
    !isempty(x.local_cheapest_insertion_sorting_properties) && (encoded_size += PB._encoded_size(x.local_cheapest_insertion_sorting_properties, 67))
    x.christofides_use_minimum_matching != false && (encoded_size += PB._encoded_size(x.christofides_use_minimum_matching, 30))
    x.first_solution_optimization_period != zero(Int32) && (encoded_size += PB._encoded_size(x.first_solution_optimization_period, 59))
    !isnothing(x.local_search_operators) && (encoded_size += PB._encoded_size(x.local_search_operators, 3))
    x.ls_operator_neighbors_ratio !== zero(Float64) && (encoded_size += PB._encoded_size(x.ls_operator_neighbors_ratio, 53))
    x.ls_operator_min_neighbors != zero(Int32) && (encoded_size += PB._encoded_size(x.ls_operator_min_neighbors, 54))
    x.use_multi_armed_bandit_concatenate_operators != false && (encoded_size += PB._encoded_size(x.use_multi_armed_bandit_concatenate_operators, 41))
    x.multi_armed_bandit_compound_operator_memory_coefficient !== zero(Float64) && (encoded_size += PB._encoded_size(x.multi_armed_bandit_compound_operator_memory_coefficient, 42))
    x.multi_armed_bandit_compound_operator_exploration_coefficient !== zero(Float64) && (encoded_size += PB._encoded_size(x.multi_armed_bandit_compound_operator_exploration_coefficient, 43))
    x.max_swap_active_chain_size != zero(Int32) && (encoded_size += PB._encoded_size(x.max_swap_active_chain_size, 66))
    x.relocate_expensive_chain_num_arcs_to_consider != zero(Int32) && (encoded_size += PB._encoded_size(x.relocate_expensive_chain_num_arcs_to_consider, 20))
    x.heuristic_expensive_chain_lns_num_arcs_to_consider != zero(Int32) && (encoded_size += PB._encoded_size(x.heuristic_expensive_chain_lns_num_arcs_to_consider, 32))
    x.heuristic_close_nodes_lns_num_nodes != zero(Int32) && (encoded_size += PB._encoded_size(x.heuristic_close_nodes_lns_num_nodes, 35))
    x.local_search_metaheuristic != var"LocalSearchMetaheuristic.Value".UNSET && (encoded_size += PB._encoded_size(x.local_search_metaheuristic, 4))
    !isempty(x.local_search_metaheuristics) && (encoded_size += PB._encoded_size(x.local_search_metaheuristics, 63))
    x.num_max_local_optima_before_metaheuristic_switch != zero(Int32) && (encoded_size += PB._encoded_size(x.num_max_local_optima_before_metaheuristic_switch, 64))
    x.guided_local_search_lambda_coefficient !== zero(Float64) && (encoded_size += PB._encoded_size(x.guided_local_search_lambda_coefficient, 5))
    x.guided_local_search_reset_penalties_on_new_best_solution != false && (encoded_size += PB._encoded_size(x.guided_local_search_reset_penalties_on_new_best_solution, 51))
    x.guided_local_search_penalize_with_vehicle_classes != false && (encoded_size += PB._encoded_size(x.guided_local_search_penalize_with_vehicle_classes, 61))
    x.use_guided_local_search_penalties_in_local_search_operators != false && (encoded_size += PB._encoded_size(x.use_guided_local_search_penalties_in_local_search_operators, 62))
    x.use_depth_first_search != false && (encoded_size += PB._encoded_size(x.use_depth_first_search, 6))
    x.use_cp != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_cp, 28))
    x.use_cp_sat != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_cp_sat, 27))
    x.use_generalized_cp_sat != OptionalBoolean.BOOL_UNSPECIFIED && (encoded_size += PB._encoded_size(x.use_generalized_cp_sat, 47))
    !isnothing(x.sat_parameters) && (encoded_size += PB._encoded_size(x.sat_parameters, 48))
    x.report_intermediate_cp_sat_solutions != false && (encoded_size += PB._encoded_size(x.report_intermediate_cp_sat_solutions, 56))
    x.fallback_to_cp_sat_size_threshold != zero(Int32) && (encoded_size += PB._encoded_size(x.fallback_to_cp_sat_size_threshold, 52))
    x.continuous_scheduling_solver != var"RoutingSearchParameters.SchedulingSolver".SCHEDULING_UNSET && (encoded_size += PB._encoded_size(x.continuous_scheduling_solver, 33))
    x.mixed_integer_scheduling_solver != var"RoutingSearchParameters.SchedulingSolver".SCHEDULING_UNSET && (encoded_size += PB._encoded_size(x.mixed_integer_scheduling_solver, 34))
    x.disable_scheduling_beware_this_may_degrade_performance != false && (encoded_size += PB._encoded_size(x.disable_scheduling_beware_this_may_degrade_performance, 50))
    x.optimization_step !== zero(Float64) && (encoded_size += PB._encoded_size(x.optimization_step, 7))
    x.number_of_solutions_to_collect != zero(Int32) && (encoded_size += PB._encoded_size(x.number_of_solutions_to_collect, 17))
    x.solution_limit != zero(Int64) && (encoded_size += PB._encoded_size(x.solution_limit, 8))
    !isnothing(x.time_limit) && (encoded_size += PB._encoded_size(x.time_limit, 9))
    !isnothing(x.lns_time_limit) && (encoded_size += PB._encoded_size(x.lns_time_limit, 10))
    x.secondary_ls_time_limit_ratio !== zero(Float64) && (encoded_size += PB._encoded_size(x.secondary_ls_time_limit_ratio, 57))
    !isnothing(x.improvement_limit_parameters) && (encoded_size += PB._encoded_size(x.improvement_limit_parameters, 37))
    x.use_full_propagation != false && (encoded_size += PB._encoded_size(x.use_full_propagation, 11))
    x.log_search != false && (encoded_size += PB._encoded_size(x.log_search, 13))
    x.log_cost_scaling_factor !== zero(Float64) && (encoded_size += PB._encoded_size(x.log_cost_scaling_factor, 22))
    x.log_cost_offset !== zero(Float64) && (encoded_size += PB._encoded_size(x.log_cost_offset, 29))
    !isempty(x.log_tag) && (encoded_size += PB._encoded_size(x.log_tag, 36))
    x.use_iterated_local_search != false && (encoded_size += PB._encoded_size(x.use_iterated_local_search, 58))
    !isnothing(x.iterated_local_search_parameters) && (encoded_size += PB._encoded_size(x.iterated_local_search_parameters, 60))
    return encoded_size
end
