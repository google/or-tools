# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:01.863
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/constraint_solver/demon_profiler.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export DemonRuns, ConstraintRuns


struct DemonRuns
    demon_id::String
    start_time::Vector{Int64}
    end_time::Vector{Int64}
    failures::Int64
end
PB.default_values(::Type{DemonRuns}) = (;demon_id = "", start_time = Vector{Int64}(), end_time = Vector{Int64}(), failures = zero(Int64))
PB.field_numbers(::Type{DemonRuns}) = (;demon_id = 1, start_time = 2, end_time = 3, failures = 4)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:DemonRuns})
    demon_id = ""
    start_time = PB.BufferedVector{Int64}()
    end_time = PB.BufferedVector{Int64}()
    failures = zero(Int64)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            demon_id = PB.decode(d, String)
        elseif field_number == 2
            PB.decode!(d, wire_type, start_time)
        elseif field_number == 3
            PB.decode!(d, wire_type, end_time)
        elseif field_number == 4
            failures = PB.decode(d, Int64)
        else
            PB.skip(d, wire_type)
        end
    end
    return DemonRuns(demon_id, start_time[], end_time[], failures)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::DemonRuns)
    initpos = position(e.io)
    !isempty(x.demon_id) && PB.encode(e, 1, x.demon_id)
    !isempty(x.start_time) && PB.encode(e, 2, x.start_time)
    !isempty(x.end_time) && PB.encode(e, 3, x.end_time)
    x.failures != zero(Int64) && PB.encode(e, 4, x.failures)
    return position(e.io) - initpos
end
function PB._encoded_size(x::DemonRuns)
    encoded_size = 0
    !isempty(x.demon_id) && (encoded_size += PB._encoded_size(x.demon_id, 1))
    !isempty(x.start_time) && (encoded_size += PB._encoded_size(x.start_time, 2))
    !isempty(x.end_time) && (encoded_size += PB._encoded_size(x.end_time, 3))
    x.failures != zero(Int64) && (encoded_size += PB._encoded_size(x.failures, 4))
    return encoded_size
end

struct ConstraintRuns
    constraint_id::String
    initial_propagation_start_time::Vector{Int64}
    initial_propagation_end_time::Vector{Int64}
    failures::Int64
    demons::Vector{DemonRuns}
end
PB.default_values(::Type{ConstraintRuns}) = (;constraint_id = "", initial_propagation_start_time = Vector{Int64}(), initial_propagation_end_time = Vector{Int64}(), failures = zero(Int64), demons = Vector{DemonRuns}())
PB.field_numbers(::Type{ConstraintRuns}) = (;constraint_id = 1, initial_propagation_start_time = 2, initial_propagation_end_time = 3, failures = 4, demons = 5)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ConstraintRuns})
    constraint_id = ""
    initial_propagation_start_time = PB.BufferedVector{Int64}()
    initial_propagation_end_time = PB.BufferedVector{Int64}()
    failures = zero(Int64)
    demons = PB.BufferedVector{DemonRuns}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            constraint_id = PB.decode(d, String)
        elseif field_number == 2
            PB.decode!(d, wire_type, initial_propagation_start_time)
        elseif field_number == 3
            PB.decode!(d, wire_type, initial_propagation_end_time)
        elseif field_number == 4
            failures = PB.decode(d, Int64)
        elseif field_number == 5
            PB.decode!(d, demons)
        else
            PB.skip(d, wire_type)
        end
    end
    return ConstraintRuns(constraint_id, initial_propagation_start_time[], initial_propagation_end_time[], failures, demons[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ConstraintRuns)
    initpos = position(e.io)
    !isempty(x.constraint_id) && PB.encode(e, 1, x.constraint_id)
    !isempty(x.initial_propagation_start_time) && PB.encode(e, 2, x.initial_propagation_start_time)
    !isempty(x.initial_propagation_end_time) && PB.encode(e, 3, x.initial_propagation_end_time)
    x.failures != zero(Int64) && PB.encode(e, 4, x.failures)
    !isempty(x.demons) && PB.encode(e, 5, x.demons)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ConstraintRuns)
    encoded_size = 0
    !isempty(x.constraint_id) && (encoded_size += PB._encoded_size(x.constraint_id, 1))
    !isempty(x.initial_propagation_start_time) && (encoded_size += PB._encoded_size(x.initial_propagation_start_time, 2))
    !isempty(x.initial_propagation_end_time) && (encoded_size += PB._encoded_size(x.initial_propagation_end_time, 3))
    x.failures != zero(Int64) && (encoded_size += PB._encoded_size(x.failures, 4))
    !isempty(x.demons) && (encoded_size += PB._encoded_size(x.demons, 5))
    return encoded_size
end
