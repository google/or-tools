# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:01.674
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/constraint_solver/search_stats.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"LocalSearchStatistics.FirstSolutionStatistics"
export var"LocalSearchStatistics.LocalSearchFilterStatistics", ConstraintSolverStatistics
export var"LocalSearchStatistics.LocalSearchOperatorStatistics", LocalSearchStatistics
export SearchStatistics


struct var"LocalSearchStatistics.FirstSolutionStatistics"
    strategy::String
    duration_seconds::Float64
end
PB.default_values(::Type{var"LocalSearchStatistics.FirstSolutionStatistics"}) = (;strategy = "", duration_seconds = zero(Float64))
PB.field_numbers(::Type{var"LocalSearchStatistics.FirstSolutionStatistics"}) = (;strategy = 1, duration_seconds = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"LocalSearchStatistics.FirstSolutionStatistics"})
    strategy = ""
    duration_seconds = zero(Float64)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            strategy = PB.decode(d, String)
        elseif field_number == 2
            duration_seconds = PB.decode(d, Float64)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"LocalSearchStatistics.FirstSolutionStatistics"(strategy, duration_seconds)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"LocalSearchStatistics.FirstSolutionStatistics")
    initpos = position(e.io)
    !isempty(x.strategy) && PB.encode(e, 1, x.strategy)
    x.duration_seconds !== zero(Float64) && PB.encode(e, 2, x.duration_seconds)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"LocalSearchStatistics.FirstSolutionStatistics")
    encoded_size = 0
    !isempty(x.strategy) && (encoded_size += PB._encoded_size(x.strategy, 1))
    x.duration_seconds !== zero(Float64) && (encoded_size += PB._encoded_size(x.duration_seconds, 2))
    return encoded_size
end

struct var"LocalSearchStatistics.LocalSearchFilterStatistics"
    local_search_filter::String
    num_calls::Int64
    num_rejects::Int64
    duration_seconds::Float64
    num_rejects_per_second::Float64
    context::String
end
PB.default_values(::Type{var"LocalSearchStatistics.LocalSearchFilterStatistics"}) = (;local_search_filter = "", num_calls = zero(Int64), num_rejects = zero(Int64), duration_seconds = zero(Float64), num_rejects_per_second = zero(Float64), context = "")
PB.field_numbers(::Type{var"LocalSearchStatistics.LocalSearchFilterStatistics"}) = (;local_search_filter = 1, num_calls = 2, num_rejects = 3, duration_seconds = 4, num_rejects_per_second = 5, context = 6)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"LocalSearchStatistics.LocalSearchFilterStatistics"})
    local_search_filter = ""
    num_calls = zero(Int64)
    num_rejects = zero(Int64)
    duration_seconds = zero(Float64)
    num_rejects_per_second = zero(Float64)
    context = ""
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            local_search_filter = PB.decode(d, String)
        elseif field_number == 2
            num_calls = PB.decode(d, Int64)
        elseif field_number == 3
            num_rejects = PB.decode(d, Int64)
        elseif field_number == 4
            duration_seconds = PB.decode(d, Float64)
        elseif field_number == 5
            num_rejects_per_second = PB.decode(d, Float64)
        elseif field_number == 6
            context = PB.decode(d, String)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"LocalSearchStatistics.LocalSearchFilterStatistics"(local_search_filter, num_calls, num_rejects, duration_seconds, num_rejects_per_second, context)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"LocalSearchStatistics.LocalSearchFilterStatistics")
    initpos = position(e.io)
    !isempty(x.local_search_filter) && PB.encode(e, 1, x.local_search_filter)
    x.num_calls != zero(Int64) && PB.encode(e, 2, x.num_calls)
    x.num_rejects != zero(Int64) && PB.encode(e, 3, x.num_rejects)
    x.duration_seconds !== zero(Float64) && PB.encode(e, 4, x.duration_seconds)
    x.num_rejects_per_second !== zero(Float64) && PB.encode(e, 5, x.num_rejects_per_second)
    !isempty(x.context) && PB.encode(e, 6, x.context)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"LocalSearchStatistics.LocalSearchFilterStatistics")
    encoded_size = 0
    !isempty(x.local_search_filter) && (encoded_size += PB._encoded_size(x.local_search_filter, 1))
    x.num_calls != zero(Int64) && (encoded_size += PB._encoded_size(x.num_calls, 2))
    x.num_rejects != zero(Int64) && (encoded_size += PB._encoded_size(x.num_rejects, 3))
    x.duration_seconds !== zero(Float64) && (encoded_size += PB._encoded_size(x.duration_seconds, 4))
    x.num_rejects_per_second !== zero(Float64) && (encoded_size += PB._encoded_size(x.num_rejects_per_second, 5))
    !isempty(x.context) && (encoded_size += PB._encoded_size(x.context, 6))
    return encoded_size
end

struct ConstraintSolverStatistics
    num_branches::Int64
    num_failures::Int64
    num_solutions::Int64
    bytes_used::Int64
    duration_seconds::Float64
end
PB.default_values(::Type{ConstraintSolverStatistics}) = (;num_branches = zero(Int64), num_failures = zero(Int64), num_solutions = zero(Int64), bytes_used = zero(Int64), duration_seconds = zero(Float64))
PB.field_numbers(::Type{ConstraintSolverStatistics}) = (;num_branches = 1, num_failures = 2, num_solutions = 3, bytes_used = 4, duration_seconds = 5)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ConstraintSolverStatistics})
    num_branches = zero(Int64)
    num_failures = zero(Int64)
    num_solutions = zero(Int64)
    bytes_used = zero(Int64)
    duration_seconds = zero(Float64)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            num_branches = PB.decode(d, Int64)
        elseif field_number == 2
            num_failures = PB.decode(d, Int64)
        elseif field_number == 3
            num_solutions = PB.decode(d, Int64)
        elseif field_number == 4
            bytes_used = PB.decode(d, Int64)
        elseif field_number == 5
            duration_seconds = PB.decode(d, Float64)
        else
            PB.skip(d, wire_type)
        end
    end
    return ConstraintSolverStatistics(num_branches, num_failures, num_solutions, bytes_used, duration_seconds)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ConstraintSolverStatistics)
    initpos = position(e.io)
    x.num_branches != zero(Int64) && PB.encode(e, 1, x.num_branches)
    x.num_failures != zero(Int64) && PB.encode(e, 2, x.num_failures)
    x.num_solutions != zero(Int64) && PB.encode(e, 3, x.num_solutions)
    x.bytes_used != zero(Int64) && PB.encode(e, 4, x.bytes_used)
    x.duration_seconds !== zero(Float64) && PB.encode(e, 5, x.duration_seconds)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ConstraintSolverStatistics)
    encoded_size = 0
    x.num_branches != zero(Int64) && (encoded_size += PB._encoded_size(x.num_branches, 1))
    x.num_failures != zero(Int64) && (encoded_size += PB._encoded_size(x.num_failures, 2))
    x.num_solutions != zero(Int64) && (encoded_size += PB._encoded_size(x.num_solutions, 3))
    x.bytes_used != zero(Int64) && (encoded_size += PB._encoded_size(x.bytes_used, 4))
    x.duration_seconds !== zero(Float64) && (encoded_size += PB._encoded_size(x.duration_seconds, 5))
    return encoded_size
end

struct var"LocalSearchStatistics.LocalSearchOperatorStatistics"
    local_search_operator::String
    num_neighbors::Int64
    num_filtered_neighbors::Int64
    num_accepted_neighbors::Int64
    duration_seconds::Float64
    make_next_neighbor_duration_seconds::Float64
    accept_neighbor_duration_seconds::Float64
end
PB.default_values(::Type{var"LocalSearchStatistics.LocalSearchOperatorStatistics"}) = (;local_search_operator = "", num_neighbors = zero(Int64), num_filtered_neighbors = zero(Int64), num_accepted_neighbors = zero(Int64), duration_seconds = zero(Float64), make_next_neighbor_duration_seconds = zero(Float64), accept_neighbor_duration_seconds = zero(Float64))
PB.field_numbers(::Type{var"LocalSearchStatistics.LocalSearchOperatorStatistics"}) = (;local_search_operator = 1, num_neighbors = 2, num_filtered_neighbors = 3, num_accepted_neighbors = 4, duration_seconds = 5, make_next_neighbor_duration_seconds = 6, accept_neighbor_duration_seconds = 7)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"LocalSearchStatistics.LocalSearchOperatorStatistics"})
    local_search_operator = ""
    num_neighbors = zero(Int64)
    num_filtered_neighbors = zero(Int64)
    num_accepted_neighbors = zero(Int64)
    duration_seconds = zero(Float64)
    make_next_neighbor_duration_seconds = zero(Float64)
    accept_neighbor_duration_seconds = zero(Float64)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            local_search_operator = PB.decode(d, String)
        elseif field_number == 2
            num_neighbors = PB.decode(d, Int64)
        elseif field_number == 3
            num_filtered_neighbors = PB.decode(d, Int64)
        elseif field_number == 4
            num_accepted_neighbors = PB.decode(d, Int64)
        elseif field_number == 5
            duration_seconds = PB.decode(d, Float64)
        elseif field_number == 6
            make_next_neighbor_duration_seconds = PB.decode(d, Float64)
        elseif field_number == 7
            accept_neighbor_duration_seconds = PB.decode(d, Float64)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"LocalSearchStatistics.LocalSearchOperatorStatistics"(local_search_operator, num_neighbors, num_filtered_neighbors, num_accepted_neighbors, duration_seconds, make_next_neighbor_duration_seconds, accept_neighbor_duration_seconds)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"LocalSearchStatistics.LocalSearchOperatorStatistics")
    initpos = position(e.io)
    !isempty(x.local_search_operator) && PB.encode(e, 1, x.local_search_operator)
    x.num_neighbors != zero(Int64) && PB.encode(e, 2, x.num_neighbors)
    x.num_filtered_neighbors != zero(Int64) && PB.encode(e, 3, x.num_filtered_neighbors)
    x.num_accepted_neighbors != zero(Int64) && PB.encode(e, 4, x.num_accepted_neighbors)
    x.duration_seconds !== zero(Float64) && PB.encode(e, 5, x.duration_seconds)
    x.make_next_neighbor_duration_seconds !== zero(Float64) && PB.encode(e, 6, x.make_next_neighbor_duration_seconds)
    x.accept_neighbor_duration_seconds !== zero(Float64) && PB.encode(e, 7, x.accept_neighbor_duration_seconds)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"LocalSearchStatistics.LocalSearchOperatorStatistics")
    encoded_size = 0
    !isempty(x.local_search_operator) && (encoded_size += PB._encoded_size(x.local_search_operator, 1))
    x.num_neighbors != zero(Int64) && (encoded_size += PB._encoded_size(x.num_neighbors, 2))
    x.num_filtered_neighbors != zero(Int64) && (encoded_size += PB._encoded_size(x.num_filtered_neighbors, 3))
    x.num_accepted_neighbors != zero(Int64) && (encoded_size += PB._encoded_size(x.num_accepted_neighbors, 4))
    x.duration_seconds !== zero(Float64) && (encoded_size += PB._encoded_size(x.duration_seconds, 5))
    x.make_next_neighbor_duration_seconds !== zero(Float64) && (encoded_size += PB._encoded_size(x.make_next_neighbor_duration_seconds, 6))
    x.accept_neighbor_duration_seconds !== zero(Float64) && (encoded_size += PB._encoded_size(x.accept_neighbor_duration_seconds, 7))
    return encoded_size
end

struct LocalSearchStatistics
    first_solution_statistics::Vector{var"LocalSearchStatistics.FirstSolutionStatistics"}
    local_search_operator_statistics::Vector{var"LocalSearchStatistics.LocalSearchOperatorStatistics"}
    total_num_neighbors::Int64
    total_num_filtered_neighbors::Int64
    total_num_accepted_neighbors::Int64
    local_search_filter_statistics::Vector{var"LocalSearchStatistics.LocalSearchFilterStatistics"}
end
PB.default_values(::Type{LocalSearchStatistics}) = (;first_solution_statistics = Vector{var"LocalSearchStatistics.FirstSolutionStatistics"}(), local_search_operator_statistics = Vector{var"LocalSearchStatistics.LocalSearchOperatorStatistics"}(), total_num_neighbors = zero(Int64), total_num_filtered_neighbors = zero(Int64), total_num_accepted_neighbors = zero(Int64), local_search_filter_statistics = Vector{var"LocalSearchStatistics.LocalSearchFilterStatistics"}())
PB.field_numbers(::Type{LocalSearchStatistics}) = (;first_solution_statistics = 6, local_search_operator_statistics = 1, total_num_neighbors = 3, total_num_filtered_neighbors = 4, total_num_accepted_neighbors = 5, local_search_filter_statistics = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:LocalSearchStatistics})
    first_solution_statistics = PB.BufferedVector{var"LocalSearchStatistics.FirstSolutionStatistics"}()
    local_search_operator_statistics = PB.BufferedVector{var"LocalSearchStatistics.LocalSearchOperatorStatistics"}()
    total_num_neighbors = zero(Int64)
    total_num_filtered_neighbors = zero(Int64)
    total_num_accepted_neighbors = zero(Int64)
    local_search_filter_statistics = PB.BufferedVector{var"LocalSearchStatistics.LocalSearchFilterStatistics"}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 6
            PB.decode!(d, first_solution_statistics)
        elseif field_number == 1
            PB.decode!(d, local_search_operator_statistics)
        elseif field_number == 3
            total_num_neighbors = PB.decode(d, Int64)
        elseif field_number == 4
            total_num_filtered_neighbors = PB.decode(d, Int64)
        elseif field_number == 5
            total_num_accepted_neighbors = PB.decode(d, Int64)
        elseif field_number == 2
            PB.decode!(d, local_search_filter_statistics)
        else
            PB.skip(d, wire_type)
        end
    end
    return LocalSearchStatistics(first_solution_statistics[], local_search_operator_statistics[], total_num_neighbors, total_num_filtered_neighbors, total_num_accepted_neighbors, local_search_filter_statistics[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::LocalSearchStatistics)
    initpos = position(e.io)
    !isempty(x.first_solution_statistics) && PB.encode(e, 6, x.first_solution_statistics)
    !isempty(x.local_search_operator_statistics) && PB.encode(e, 1, x.local_search_operator_statistics)
    x.total_num_neighbors != zero(Int64) && PB.encode(e, 3, x.total_num_neighbors)
    x.total_num_filtered_neighbors != zero(Int64) && PB.encode(e, 4, x.total_num_filtered_neighbors)
    x.total_num_accepted_neighbors != zero(Int64) && PB.encode(e, 5, x.total_num_accepted_neighbors)
    !isempty(x.local_search_filter_statistics) && PB.encode(e, 2, x.local_search_filter_statistics)
    return position(e.io) - initpos
end
function PB._encoded_size(x::LocalSearchStatistics)
    encoded_size = 0
    !isempty(x.first_solution_statistics) && (encoded_size += PB._encoded_size(x.first_solution_statistics, 6))
    !isempty(x.local_search_operator_statistics) && (encoded_size += PB._encoded_size(x.local_search_operator_statistics, 1))
    x.total_num_neighbors != zero(Int64) && (encoded_size += PB._encoded_size(x.total_num_neighbors, 3))
    x.total_num_filtered_neighbors != zero(Int64) && (encoded_size += PB._encoded_size(x.total_num_filtered_neighbors, 4))
    x.total_num_accepted_neighbors != zero(Int64) && (encoded_size += PB._encoded_size(x.total_num_accepted_neighbors, 5))
    !isempty(x.local_search_filter_statistics) && (encoded_size += PB._encoded_size(x.local_search_filter_statistics, 2))
    return encoded_size
end

struct SearchStatistics
    local_search_statistics::Vector{LocalSearchStatistics}
    constraint_solver_statistics::Vector{ConstraintSolverStatistics}
end
PB.default_values(::Type{SearchStatistics}) = (;local_search_statistics = Vector{LocalSearchStatistics}(), constraint_solver_statistics = Vector{ConstraintSolverStatistics}())
PB.field_numbers(::Type{SearchStatistics}) = (;local_search_statistics = 1, constraint_solver_statistics = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:SearchStatistics})
    local_search_statistics = PB.BufferedVector{LocalSearchStatistics}()
    constraint_solver_statistics = PB.BufferedVector{ConstraintSolverStatistics}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, local_search_statistics)
        elseif field_number == 2
            PB.decode!(d, constraint_solver_statistics)
        else
            PB.skip(d, wire_type)
        end
    end
    return SearchStatistics(local_search_statistics[], constraint_solver_statistics[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::SearchStatistics)
    initpos = position(e.io)
    !isempty(x.local_search_statistics) && PB.encode(e, 1, x.local_search_statistics)
    !isempty(x.constraint_solver_statistics) && PB.encode(e, 2, x.constraint_solver_statistics)
    return position(e.io) - initpos
end
function PB._encoded_size(x::SearchStatistics)
    encoded_size = 0
    !isempty(x.local_search_statistics) && (encoded_size += PB._encoded_size(x.local_search_statistics, 1))
    !isempty(x.constraint_solver_statistics) && (encoded_size += PB._encoded_size(x.constraint_solver_statistics, 2))
    return encoded_size
end
