# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:02.135
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/sat/sat_parameters.proto (proto2 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"SatParameters.ConflictMinimizationAlgorithm"
export var"SatParameters.FPRoundingMethod", var"SatParameters.Polarity"
export var"SatParameters.SearchBranching", var"SatParameters.SharedTreeSplitStrategy"
export var"SatParameters.VariableOrder", var"SatParameters.ClauseProtection"
export var"SatParameters.MaxSatAssumptionOrder"
export var"SatParameters.MaxSatStratificationAlgorithm"
export var"SatParameters.RestartAlgorithm", var"SatParameters.BinaryMinizationAlgorithm"
export var"SatParameters.ClauseOrdering", SatParameters


@enumx var"SatParameters.ConflictMinimizationAlgorithm" NONE=0 SIMPLE=1 RECURSIVE=2 EXPERIMENTAL=3

@enumx var"SatParameters.FPRoundingMethod" NEAREST_INTEGER=0 LOCK_BASED=1 ACTIVE_LOCK_BASED=3 PROPAGATION_ASSISTED=2

@enumx var"SatParameters.Polarity" POLARITY_TRUE=0 POLARITY_FALSE=1 POLARITY_RANDOM=2

@enumx var"SatParameters.SearchBranching" AUTOMATIC_SEARCH=0 FIXED_SEARCH=1 PORTFOLIO_SEARCH=2 LP_SEARCH=3 PSEUDO_COST_SEARCH=4 PORTFOLIO_WITH_QUICK_RESTART_SEARCH=5 HINT_SEARCH=6 PARTIAL_FIXED_SEARCH=7 RANDOMIZED_SEARCH=8

@enumx var"SatParameters.SharedTreeSplitStrategy" SPLIT_STRATEGY_AUTO=0 SPLIT_STRATEGY_DISCREPANCY=1 SPLIT_STRATEGY_OBJECTIVE_LB=2 SPLIT_STRATEGY_BALANCED_TREE=3 SPLIT_STRATEGY_FIRST_PROPOSAL=4

@enumx var"SatParameters.VariableOrder" IN_ORDER=0 IN_REVERSE_ORDER=1 IN_RANDOM_ORDER=2

@enumx var"SatParameters.ClauseProtection" PROTECTION_NONE=0 PROTECTION_ALWAYS=1 PROTECTION_LBD=2

@enumx var"SatParameters.MaxSatAssumptionOrder" DEFAULT_ASSUMPTION_ORDER=0 ORDER_ASSUMPTION_BY_DEPTH=1 ORDER_ASSUMPTION_BY_WEIGHT=2

@enumx var"SatParameters.MaxSatStratificationAlgorithm" STRATIFICATION_NONE=0 STRATIFICATION_DESCENT=1 STRATIFICATION_ASCENT=2

@enumx var"SatParameters.RestartAlgorithm" NO_RESTART=0 LUBY_RESTART=1 DL_MOVING_AVERAGE_RESTART=2 LBD_MOVING_AVERAGE_RESTART=3 FIXED_RESTART=4

@enumx var"SatParameters.BinaryMinizationAlgorithm" NO_BINARY_MINIMIZATION=0 BINARY_MINIMIZATION_FIRST=1 BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION=4 BINARY_MINIMIZATION_WITH_REACHABILITY=2 EXPERIMENTAL_BINARY_MINIMIZATION=3

@enumx var"SatParameters.ClauseOrdering" CLAUSE_ACTIVITY=0 CLAUSE_LBD=1

struct SatParameters
    name::String
    preferred_variable_order::var"SatParameters.VariableOrder".T
    initial_polarity::var"SatParameters.Polarity".T
    use_phase_saving::Bool
    polarity_rephase_increment::Int32
    polarity_exploit_ls_hints::Bool
    random_polarity_ratio::Float64
    random_branches_ratio::Float64
    use_erwa_heuristic::Bool
    initial_variables_activity::Float64
    also_bump_variables_in_conflict_reasons::Bool
    minimization_algorithm::var"SatParameters.ConflictMinimizationAlgorithm".T
    binary_minimization_algorithm::var"SatParameters.BinaryMinizationAlgorithm".T
    subsumption_during_conflict_analysis::Bool
    clause_cleanup_period::Int32
    clause_cleanup_target::Int32
    clause_cleanup_ratio::Float64
    clause_cleanup_protection::var"SatParameters.ClauseProtection".T
    clause_cleanup_lbd_bound::Int32
    clause_cleanup_ordering::var"SatParameters.ClauseOrdering".T
    pb_cleanup_increment::Int32
    pb_cleanup_ratio::Float64
    variable_activity_decay::Float64
    max_variable_activity_value::Float64
    glucose_max_decay::Float64
    glucose_decay_increment::Float64
    glucose_decay_increment_period::Int32
    clause_activity_decay::Float64
    max_clause_activity_value::Float64
    restart_algorithms::Vector{var"SatParameters.RestartAlgorithm".T}
    default_restart_algorithms::String
    restart_period::Int32
    restart_running_window_size::Int32
    restart_dl_average_ratio::Float64
    restart_lbd_average_ratio::Float64
    use_blocking_restart::Bool
    blocking_restart_window_size::Int32
    blocking_restart_multiplier::Float64
    num_conflicts_before_strategy_changes::Int32
    strategy_change_increase_ratio::Float64
    max_time_in_seconds::Float64
    max_deterministic_time::Float64
    max_num_deterministic_batches::Int32
    max_number_of_conflicts::Int64
    max_memory_in_mb::Int64
    absolute_gap_limit::Float64
    relative_gap_limit::Float64
    random_seed::Int32
    permute_variable_randomly::Bool
    permute_presolve_constraint_order::Bool
    use_absl_random::Bool
    log_search_progress::Bool
    log_subsolver_statistics::Bool
    log_prefix::String
    log_to_stdout::Bool
    log_to_response::Bool
    use_pb_resolution::Bool
    minimize_reduction_during_pb_resolution::Bool
    count_assumption_levels_in_lbd::Bool
    presolve_bve_threshold::Int32
    filter_sat_postsolve_clauses::Bool
    presolve_bve_clause_weight::Int32
    probing_deterministic_time_limit::Float64
    presolve_probing_deterministic_time_limit::Float64
    presolve_blocked_clause::Bool
    presolve_use_bva::Bool
    presolve_bva_threshold::Int32
    max_presolve_iterations::Int32
    cp_model_presolve::Bool
    cp_model_probing_level::Int32
    cp_model_use_sat_presolve::Bool
    remove_fixed_variables_early::Bool
    detect_table_with_cost::Bool
    table_compression_level::Int32
    expand_alldiff_constraints::Bool
    max_alldiff_domain_size::Int32
    expand_reservoir_constraints::Bool
    expand_reservoir_using_circuit::Bool
    encode_cumulative_as_reservoir::Bool
    max_lin_max_size_for_expansion::Int32
    disable_constraint_expansion::Bool
    encode_complex_linear_constraint_with_integer::Bool
    merge_no_overlap_work_limit::Float64
    merge_at_most_one_work_limit::Float64
    presolve_substitution_level::Int32
    presolve_extract_integer_enforcement::Bool
    presolve_inclusion_work_limit::Int64
    ignore_names::Bool
    infer_all_diffs::Bool
    find_big_linear_overlap::Bool
    use_sat_inprocessing::Bool
    inprocessing_dtime_ratio::Float64
    inprocessing_probing_dtime::Float64
    inprocessing_minimization_dtime::Float64
    inprocessing_minimization_use_conflict_analysis::Bool
    inprocessing_minimization_use_all_orderings::Bool
    num_workers::Int32
    num_search_workers::Int32
    num_full_subsolvers::Int32
    subsolvers::Vector{String}
    extra_subsolvers::Vector{String}
    ignore_subsolvers::Vector{String}
    filter_subsolvers::Vector{String}
    subsolver_params::Vector{SatParameters}
    interleave_search::Bool
    interleave_batch_size::Int32
    share_objective_bounds::Bool
    share_level_zero_bounds::Bool
    share_binary_clauses::Bool
    share_glue_clauses::Bool
    minimize_shared_clauses::Bool
    share_glue_clauses_dtime::Float64
    debug_postsolve_with_full_solver::Bool
    debug_max_num_presolve_operations::Int32
    debug_crash_on_bad_hint::Bool
    debug_crash_if_presolve_breaks_hint::Bool
    use_optimization_hints::Bool
    core_minimization_level::Int32
    find_multiple_cores::Bool
    cover_optimization::Bool
    max_sat_assumption_order::var"SatParameters.MaxSatAssumptionOrder".T
    max_sat_reverse_assumption_order::Bool
    max_sat_stratification::var"SatParameters.MaxSatStratificationAlgorithm".T
    propagation_loop_detection_factor::Float64
    use_precedences_in_disjunctive_constraint::Bool
    max_size_to_create_precedence_literals_in_disjunctive::Int32
    use_strong_propagation_in_disjunctive::Bool
    use_dynamic_precedence_in_disjunctive::Bool
    use_dynamic_precedence_in_cumulative::Bool
    use_overload_checker_in_cumulative::Bool
    use_conservative_scale_overload_checker::Bool
    use_timetable_edge_finding_in_cumulative::Bool
    max_num_intervals_for_timetable_edge_finding::Int32
    use_hard_precedences_in_cumulative::Bool
    exploit_all_precedences::Bool
    use_disjunctive_constraint_in_cumulative::Bool
    no_overlap_2d_boolean_relations_limit::Int32
    use_timetabling_in_no_overlap_2d::Bool
    use_energetic_reasoning_in_no_overlap_2d::Bool
    use_area_energetic_reasoning_in_no_overlap_2d::Bool
    use_try_edge_reasoning_in_no_overlap_2d::Bool
    max_pairs_pairwise_reasoning_in_no_overlap_2d::Int32
    maximum_regions_to_split_in_disconnected_no_overlap_2d::Int32
    use_linear3_for_no_overlap_2d_precedences::Bool
    use_dual_scheduling_heuristics::Bool
    use_all_different_for_circuit::Bool
    routing_cut_subset_size_for_binary_relation_bound::Int32
    routing_cut_subset_size_for_tight_binary_relation_bound::Int32
    routing_cut_subset_size_for_exact_binary_relation_bound::Int32
    routing_cut_subset_size_for_shortest_paths_bound::Int32
    routing_cut_dp_effort::Float64
    routing_cut_max_infeasible_path_length::Int32
    search_branching::var"SatParameters.SearchBranching".T
    hint_conflict_limit::Int32
    repair_hint::Bool
    fix_variables_to_their_hinted_value::Bool
    use_probing_search::Bool
    use_extended_probing::Bool
    probing_num_combinations_limit::Int32
    shaving_deterministic_time_in_probing_search::Float64
    shaving_search_deterministic_time::Float64
    shaving_search_threshold::Int64
    use_objective_lb_search::Bool
    use_objective_shaving_search::Bool
    variables_shaving_level::Int32
    pseudo_cost_reliability_threshold::Int64
    optimize_with_core::Bool
    optimize_with_lb_tree_search::Bool
    save_lp_basis_in_lb_tree_search::Bool
    binary_search_num_conflicts::Int32
    optimize_with_max_hs::Bool
    use_feasibility_jump::Bool
    use_ls_only::Bool
    feasibility_jump_decay::Float64
    feasibility_jump_linearization_level::Int32
    feasibility_jump_restart_factor::Int32
    feasibility_jump_batch_dtime::Float64
    feasibility_jump_var_randomization_probability::Float64
    feasibility_jump_var_perburbation_range_ratio::Float64
    feasibility_jump_enable_restarts::Bool
    feasibility_jump_max_expanded_constraint_size::Int32
    num_violation_ls::Int32
    violation_ls_perturbation_period::Int32
    violation_ls_compound_move_probability::Float64
    shared_tree_num_workers::Int32
    use_shared_tree_search::Bool
    shared_tree_worker_min_restarts_per_subtree::Int32
    shared_tree_worker_enable_trail_sharing::Bool
    shared_tree_worker_enable_phase_sharing::Bool
    shared_tree_open_leaves_per_worker::Float64
    shared_tree_max_nodes_per_worker::Int32
    shared_tree_split_strategy::var"SatParameters.SharedTreeSplitStrategy".T
    shared_tree_balance_tolerance::Int32
    enumerate_all_solutions::Bool
    keep_all_feasible_solutions_in_presolve::Bool
    fill_tightened_domains_in_response::Bool
    fill_additional_solutions_in_response::Bool
    instantiate_all_variables::Bool
    auto_detect_greater_than_at_least_one_of::Bool
    stop_after_first_solution::Bool
    stop_after_presolve::Bool
    stop_after_root_propagation::Bool
    lns_initial_difficulty::Float64
    lns_initial_deterministic_limit::Float64
    use_lns::Bool
    use_lns_only::Bool
    solution_pool_size::Int32
    use_rins_lns::Bool
    use_feasibility_pump::Bool
    use_lb_relax_lns::Bool
    lb_relax_num_workers_threshold::Int32
    fp_rounding::var"SatParameters.FPRoundingMethod".T
    diversify_lns_params::Bool
    randomize_search::Bool
    search_random_variable_pool_size::Int64
    push_all_tasks_toward_start::Bool
    use_optional_variables::Bool
    use_exact_lp_reason::Bool
    use_combined_no_overlap::Bool
    at_most_one_max_expansion_size::Int32
    catch_sigint_signal::Bool
    use_implied_bounds::Bool
    polish_lp_solution::Bool
    lp_primal_tolerance::Float64
    lp_dual_tolerance::Float64
    convert_intervals::Bool
    symmetry_level::Int32
    use_symmetry_in_lp::Bool
    keep_symmetry_in_presolve::Bool
    symmetry_detection_deterministic_time_limit::Float64
    new_linear_propagation::Bool
    linear_split_size::Int32
    linearization_level::Int32
    boolean_encoding_level::Int32
    max_domain_size_when_encoding_eq_neq_constraints::Int32
    max_num_cuts::Int32
    cut_level::Int32
    only_add_cuts_at_level_zero::Bool
    add_objective_cut::Bool
    add_cg_cuts::Bool
    add_mir_cuts::Bool
    add_zero_half_cuts::Bool
    add_clique_cuts::Bool
    add_rlt_cuts::Bool
    max_all_diff_cut_size::Int32
    add_lin_max_cuts::Bool
    max_integer_rounding_scaling::Int32
    add_lp_constraints_lazily::Bool
    root_lp_iterations::Int32
    min_orthogonality_for_lp_constraints::Float64
    max_cut_rounds_at_level_zero::Int32
    max_consecutive_inactive_count::Int32
    cut_max_active_count_value::Float64
    cut_active_count_decay::Float64
    cut_cleanup_target::Int32
    new_constraints_batch_size::Int32
    exploit_integer_lp_solution::Bool
    exploit_all_lp_solution::Bool
    exploit_best_solution::Bool
    exploit_relaxation_solution::Bool
    exploit_objective::Bool
    detect_linearized_product::Bool
    mip_max_bound::Float64
    mip_var_scaling::Float64
    mip_scale_large_domain::Bool
    mip_automatically_scale_variables::Bool
    only_solve_ip::Bool
    mip_wanted_precision::Float64
    mip_max_activity_exponent::Int32
    mip_check_precision::Float64
    mip_compute_true_objective_bound::Bool
    mip_max_valid_magnitude::Float64
    mip_treat_high_magnitude_bounds_as_infinity::Bool
    mip_drop_tolerance::Float64
    mip_presolve_level::Int32
end
PB.default_values(::Type{SatParameters}) = (;name = "", preferred_variable_order = var"SatParameters.VariableOrder".IN_ORDER, initial_polarity = var"SatParameters.Polarity".POLARITY_FALSE, use_phase_saving = true, polarity_rephase_increment = Int32(1000), polarity_exploit_ls_hints = false, random_polarity_ratio = Float64(0.0), random_branches_ratio = Float64(0.0), use_erwa_heuristic = false, initial_variables_activity = Float64(0.0), also_bump_variables_in_conflict_reasons = false, minimization_algorithm = var"SatParameters.ConflictMinimizationAlgorithm".RECURSIVE, binary_minimization_algorithm = var"SatParameters.BinaryMinizationAlgorithm".BINARY_MINIMIZATION_FIRST, subsumption_during_conflict_analysis = true, clause_cleanup_period = Int32(10000), clause_cleanup_target = Int32(0), clause_cleanup_ratio = Float64(0.5), clause_cleanup_protection = var"SatParameters.ClauseProtection".PROTECTION_NONE, clause_cleanup_lbd_bound = Int32(5), clause_cleanup_ordering = var"SatParameters.ClauseOrdering".CLAUSE_ACTIVITY, pb_cleanup_increment = Int32(200), pb_cleanup_ratio = Float64(0.5), variable_activity_decay = Float64(0.8), max_variable_activity_value = Float64(1e100), glucose_max_decay = Float64(0.95), glucose_decay_increment = Float64(0.01), glucose_decay_increment_period = Int32(5000), clause_activity_decay = Float64(0.999), max_clause_activity_value = Float64(1e20), restart_algorithms = Vector{var"SatParameters.RestartAlgorithm".T}(), default_restart_algorithms = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART", restart_period = Int32(50), restart_running_window_size = Int32(50), restart_dl_average_ratio = Float64(1.0), restart_lbd_average_ratio = Float64(1.0), use_blocking_restart = false, blocking_restart_window_size = Int32(5000), blocking_restart_multiplier = Float64(1.4), num_conflicts_before_strategy_changes = Int32(0), strategy_change_increase_ratio = Float64(0.0), max_time_in_seconds = Float64(Inf), max_deterministic_time = Float64(Inf), max_num_deterministic_batches = Int32(0), max_number_of_conflicts = Int64(9223372036854775807), max_memory_in_mb = Int64(10000), absolute_gap_limit = Float64(1e-4), relative_gap_limit = Float64(0.0), random_seed = Int32(1), permute_variable_randomly = false, permute_presolve_constraint_order = false, use_absl_random = false, log_search_progress = false, log_subsolver_statistics = false, log_prefix = "", log_to_stdout = true, log_to_response = false, use_pb_resolution = false, minimize_reduction_during_pb_resolution = false, count_assumption_levels_in_lbd = true, presolve_bve_threshold = Int32(500), filter_sat_postsolve_clauses = false, presolve_bve_clause_weight = Int32(3), probing_deterministic_time_limit = Float64(1.0), presolve_probing_deterministic_time_limit = Float64(30.0), presolve_blocked_clause = true, presolve_use_bva = true, presolve_bva_threshold = Int32(1), max_presolve_iterations = Int32(3), cp_model_presolve = true, cp_model_probing_level = Int32(2), cp_model_use_sat_presolve = true, remove_fixed_variables_early = true, detect_table_with_cost = false, table_compression_level = Int32(2), expand_alldiff_constraints = false, max_alldiff_domain_size = Int32(256), expand_reservoir_constraints = true, expand_reservoir_using_circuit = false, encode_cumulative_as_reservoir = false, max_lin_max_size_for_expansion = Int32(0), disable_constraint_expansion = false, encode_complex_linear_constraint_with_integer = false, merge_no_overlap_work_limit = Float64(1e12), merge_at_most_one_work_limit = Float64(1e8), presolve_substitution_level = Int32(1), presolve_extract_integer_enforcement = false, presolve_inclusion_work_limit = Int64(100000000), ignore_names = true, infer_all_diffs = true, find_big_linear_overlap = true, use_sat_inprocessing = true, inprocessing_dtime_ratio = Float64(0.2), inprocessing_probing_dtime = Float64(1.0), inprocessing_minimization_dtime = Float64(1.0), inprocessing_minimization_use_conflict_analysis = true, inprocessing_minimization_use_all_orderings = false, num_workers = Int32(0), num_search_workers = Int32(0), num_full_subsolvers = Int32(0), subsolvers = Vector{String}(), extra_subsolvers = Vector{String}(), ignore_subsolvers = Vector{String}(), filter_subsolvers = Vector{String}(), subsolver_params = Vector{SatParameters}(), interleave_search = false, interleave_batch_size = Int32(0), share_objective_bounds = true, share_level_zero_bounds = true, share_binary_clauses = true, share_glue_clauses = false, minimize_shared_clauses = true, share_glue_clauses_dtime = Float64(1.0), debug_postsolve_with_full_solver = false, debug_max_num_presolve_operations = Int32(0), debug_crash_on_bad_hint = false, debug_crash_if_presolve_breaks_hint = false, use_optimization_hints = true, core_minimization_level = Int32(2), find_multiple_cores = true, cover_optimization = true, max_sat_assumption_order = var"SatParameters.MaxSatAssumptionOrder".DEFAULT_ASSUMPTION_ORDER, max_sat_reverse_assumption_order = false, max_sat_stratification = var"SatParameters.MaxSatStratificationAlgorithm".STRATIFICATION_DESCENT, propagation_loop_detection_factor = Float64(10.0), use_precedences_in_disjunctive_constraint = true, max_size_to_create_precedence_literals_in_disjunctive = Int32(60), use_strong_propagation_in_disjunctive = false, use_dynamic_precedence_in_disjunctive = false, use_dynamic_precedence_in_cumulative = false, use_overload_checker_in_cumulative = false, use_conservative_scale_overload_checker = false, use_timetable_edge_finding_in_cumulative = false, max_num_intervals_for_timetable_edge_finding = Int32(100), use_hard_precedences_in_cumulative = false, exploit_all_precedences = false, use_disjunctive_constraint_in_cumulative = true, no_overlap_2d_boolean_relations_limit = Int32(10), use_timetabling_in_no_overlap_2d = false, use_energetic_reasoning_in_no_overlap_2d = false, use_area_energetic_reasoning_in_no_overlap_2d = false, use_try_edge_reasoning_in_no_overlap_2d = false, max_pairs_pairwise_reasoning_in_no_overlap_2d = Int32(1250), maximum_regions_to_split_in_disconnected_no_overlap_2d = Int32(0), use_linear3_for_no_overlap_2d_precedences = true, use_dual_scheduling_heuristics = true, use_all_different_for_circuit = false, routing_cut_subset_size_for_binary_relation_bound = Int32(0), routing_cut_subset_size_for_tight_binary_relation_bound = Int32(0), routing_cut_subset_size_for_exact_binary_relation_bound = Int32(8), routing_cut_subset_size_for_shortest_paths_bound = Int32(8), routing_cut_dp_effort = Float64(1e7), routing_cut_max_infeasible_path_length = Int32(6), search_branching = var"SatParameters.SearchBranching".AUTOMATIC_SEARCH, hint_conflict_limit = Int32(10), repair_hint = false, fix_variables_to_their_hinted_value = false, use_probing_search = false, use_extended_probing = true, probing_num_combinations_limit = Int32(20000), shaving_deterministic_time_in_probing_search = Float64(0.001), shaving_search_deterministic_time = Float64(0.1), shaving_search_threshold = Int64(64), use_objective_lb_search = false, use_objective_shaving_search = false, variables_shaving_level = Int32(-1), pseudo_cost_reliability_threshold = Int64(100), optimize_with_core = false, optimize_with_lb_tree_search = false, save_lp_basis_in_lb_tree_search = false, binary_search_num_conflicts = Int32(-1), optimize_with_max_hs = false, use_feasibility_jump = true, use_ls_only = false, feasibility_jump_decay = Float64(0.95), feasibility_jump_linearization_level = Int32(2), feasibility_jump_restart_factor = Int32(1), feasibility_jump_batch_dtime = Float64(0.1), feasibility_jump_var_randomization_probability = Float64(0.05), feasibility_jump_var_perburbation_range_ratio = Float64(0.2), feasibility_jump_enable_restarts = true, feasibility_jump_max_expanded_constraint_size = Int32(500), num_violation_ls = Int32(0), violation_ls_perturbation_period = Int32(100), violation_ls_compound_move_probability = Float64(0.5), shared_tree_num_workers = Int32(0), use_shared_tree_search = false, shared_tree_worker_min_restarts_per_subtree = Int32(1), shared_tree_worker_enable_trail_sharing = true, shared_tree_worker_enable_phase_sharing = true, shared_tree_open_leaves_per_worker = Float64(2.0), shared_tree_max_nodes_per_worker = Int32(10000), shared_tree_split_strategy = var"SatParameters.SharedTreeSplitStrategy".SPLIT_STRATEGY_AUTO, shared_tree_balance_tolerance = Int32(1), enumerate_all_solutions = false, keep_all_feasible_solutions_in_presolve = false, fill_tightened_domains_in_response = false, fill_additional_solutions_in_response = false, instantiate_all_variables = true, auto_detect_greater_than_at_least_one_of = true, stop_after_first_solution = false, stop_after_presolve = false, stop_after_root_propagation = false, lns_initial_difficulty = Float64(0.5), lns_initial_deterministic_limit = Float64(0.1), use_lns = true, use_lns_only = false, solution_pool_size = Int32(3), use_rins_lns = true, use_feasibility_pump = true, use_lb_relax_lns = true, lb_relax_num_workers_threshold = Int32(16), fp_rounding = var"SatParameters.FPRoundingMethod".PROPAGATION_ASSISTED, diversify_lns_params = false, randomize_search = false, search_random_variable_pool_size = Int64(0), push_all_tasks_toward_start = false, use_optional_variables = false, use_exact_lp_reason = true, use_combined_no_overlap = false, at_most_one_max_expansion_size = Int32(3), catch_sigint_signal = true, use_implied_bounds = true, polish_lp_solution = false, lp_primal_tolerance = Float64(1e-7), lp_dual_tolerance = Float64(1e-7), convert_intervals = true, symmetry_level = Int32(2), use_symmetry_in_lp = false, keep_symmetry_in_presolve = false, symmetry_detection_deterministic_time_limit = Float64(1.0), new_linear_propagation = true, linear_split_size = Int32(100), linearization_level = Int32(1), boolean_encoding_level = Int32(1), max_domain_size_when_encoding_eq_neq_constraints = Int32(16), max_num_cuts = Int32(10000), cut_level = Int32(1), only_add_cuts_at_level_zero = false, add_objective_cut = false, add_cg_cuts = true, add_mir_cuts = true, add_zero_half_cuts = true, add_clique_cuts = true, add_rlt_cuts = true, max_all_diff_cut_size = Int32(64), add_lin_max_cuts = true, max_integer_rounding_scaling = Int32(600), add_lp_constraints_lazily = true, root_lp_iterations = Int32(2000), min_orthogonality_for_lp_constraints = Float64(0.05), max_cut_rounds_at_level_zero = Int32(1), max_consecutive_inactive_count = Int32(100), cut_max_active_count_value = Float64(1e10), cut_active_count_decay = Float64(0.8), cut_cleanup_target = Int32(1000), new_constraints_batch_size = Int32(50), exploit_integer_lp_solution = true, exploit_all_lp_solution = true, exploit_best_solution = false, exploit_relaxation_solution = false, exploit_objective = true, detect_linearized_product = false, mip_max_bound = Float64(1e7), mip_var_scaling = Float64(1.0), mip_scale_large_domain = false, mip_automatically_scale_variables = true, only_solve_ip = false, mip_wanted_precision = Float64(1e-6), mip_max_activity_exponent = Int32(53), mip_check_precision = Float64(1e-4), mip_compute_true_objective_bound = true, mip_max_valid_magnitude = Float64(1e20), mip_treat_high_magnitude_bounds_as_infinity = false, mip_drop_tolerance = Float64(1e-16), mip_presolve_level = Int32(2))
PB.field_numbers(::Type{SatParameters}) = (;name = 171, preferred_variable_order = 1, initial_polarity = 2, use_phase_saving = 44, polarity_rephase_increment = 168, polarity_exploit_ls_hints = 309, random_polarity_ratio = 45, random_branches_ratio = 32, use_erwa_heuristic = 75, initial_variables_activity = 76, also_bump_variables_in_conflict_reasons = 77, minimization_algorithm = 4, binary_minimization_algorithm = 34, subsumption_during_conflict_analysis = 56, clause_cleanup_period = 11, clause_cleanup_target = 13, clause_cleanup_ratio = 190, clause_cleanup_protection = 58, clause_cleanup_lbd_bound = 59, clause_cleanup_ordering = 60, pb_cleanup_increment = 46, pb_cleanup_ratio = 47, variable_activity_decay = 15, max_variable_activity_value = 16, glucose_max_decay = 22, glucose_decay_increment = 23, glucose_decay_increment_period = 24, clause_activity_decay = 17, max_clause_activity_value = 18, restart_algorithms = 61, default_restart_algorithms = 70, restart_period = 30, restart_running_window_size = 62, restart_dl_average_ratio = 63, restart_lbd_average_ratio = 71, use_blocking_restart = 64, blocking_restart_window_size = 65, blocking_restart_multiplier = 66, num_conflicts_before_strategy_changes = 68, strategy_change_increase_ratio = 69, max_time_in_seconds = 36, max_deterministic_time = 67, max_num_deterministic_batches = 291, max_number_of_conflicts = 37, max_memory_in_mb = 40, absolute_gap_limit = 159, relative_gap_limit = 160, random_seed = 31, permute_variable_randomly = 178, permute_presolve_constraint_order = 179, use_absl_random = 180, log_search_progress = 41, log_subsolver_statistics = 189, log_prefix = 185, log_to_stdout = 186, log_to_response = 187, use_pb_resolution = 43, minimize_reduction_during_pb_resolution = 48, count_assumption_levels_in_lbd = 49, presolve_bve_threshold = 54, filter_sat_postsolve_clauses = 324, presolve_bve_clause_weight = 55, probing_deterministic_time_limit = 226, presolve_probing_deterministic_time_limit = 57, presolve_blocked_clause = 88, presolve_use_bva = 72, presolve_bva_threshold = 73, max_presolve_iterations = 138, cp_model_presolve = 86, cp_model_probing_level = 110, cp_model_use_sat_presolve = 93, remove_fixed_variables_early = 310, detect_table_with_cost = 216, table_compression_level = 217, expand_alldiff_constraints = 170, max_alldiff_domain_size = 320, expand_reservoir_constraints = 182, expand_reservoir_using_circuit = 288, encode_cumulative_as_reservoir = 287, max_lin_max_size_for_expansion = 280, disable_constraint_expansion = 181, encode_complex_linear_constraint_with_integer = 223, merge_no_overlap_work_limit = 145, merge_at_most_one_work_limit = 146, presolve_substitution_level = 147, presolve_extract_integer_enforcement = 174, presolve_inclusion_work_limit = 201, ignore_names = 202, infer_all_diffs = 233, find_big_linear_overlap = 234, use_sat_inprocessing = 163, inprocessing_dtime_ratio = 273, inprocessing_probing_dtime = 274, inprocessing_minimization_dtime = 275, inprocessing_minimization_use_conflict_analysis = 297, inprocessing_minimization_use_all_orderings = 298, num_workers = 206, num_search_workers = 100, num_full_subsolvers = 294, subsolvers = 207, extra_subsolvers = 219, ignore_subsolvers = 209, filter_subsolvers = 293, subsolver_params = 210, interleave_search = 136, interleave_batch_size = 134, share_objective_bounds = 113, share_level_zero_bounds = 114, share_binary_clauses = 203, share_glue_clauses = 285, minimize_shared_clauses = 300, share_glue_clauses_dtime = 322, debug_postsolve_with_full_solver = 162, debug_max_num_presolve_operations = 151, debug_crash_on_bad_hint = 195, debug_crash_if_presolve_breaks_hint = 306, use_optimization_hints = 35, core_minimization_level = 50, find_multiple_cores = 84, cover_optimization = 89, max_sat_assumption_order = 51, max_sat_reverse_assumption_order = 52, max_sat_stratification = 53, propagation_loop_detection_factor = 221, use_precedences_in_disjunctive_constraint = 74, max_size_to_create_precedence_literals_in_disjunctive = 229, use_strong_propagation_in_disjunctive = 230, use_dynamic_precedence_in_disjunctive = 263, use_dynamic_precedence_in_cumulative = 268, use_overload_checker_in_cumulative = 78, use_conservative_scale_overload_checker = 286, use_timetable_edge_finding_in_cumulative = 79, max_num_intervals_for_timetable_edge_finding = 260, use_hard_precedences_in_cumulative = 215, exploit_all_precedences = 220, use_disjunctive_constraint_in_cumulative = 80, no_overlap_2d_boolean_relations_limit = 321, use_timetabling_in_no_overlap_2d = 200, use_energetic_reasoning_in_no_overlap_2d = 213, use_area_energetic_reasoning_in_no_overlap_2d = 271, use_try_edge_reasoning_in_no_overlap_2d = 299, max_pairs_pairwise_reasoning_in_no_overlap_2d = 276, maximum_regions_to_split_in_disconnected_no_overlap_2d = 315, use_linear3_for_no_overlap_2d_precedences = 323, use_dual_scheduling_heuristics = 214, use_all_different_for_circuit = 311, routing_cut_subset_size_for_binary_relation_bound = 312, routing_cut_subset_size_for_tight_binary_relation_bound = 313, routing_cut_subset_size_for_exact_binary_relation_bound = 316, routing_cut_subset_size_for_shortest_paths_bound = 318, routing_cut_dp_effort = 314, routing_cut_max_infeasible_path_length = 317, search_branching = 82, hint_conflict_limit = 153, repair_hint = 167, fix_variables_to_their_hinted_value = 192, use_probing_search = 176, use_extended_probing = 269, probing_num_combinations_limit = 272, shaving_deterministic_time_in_probing_search = 204, shaving_search_deterministic_time = 205, shaving_search_threshold = 290, use_objective_lb_search = 228, use_objective_shaving_search = 253, variables_shaving_level = 289, pseudo_cost_reliability_threshold = 123, optimize_with_core = 83, optimize_with_lb_tree_search = 188, save_lp_basis_in_lb_tree_search = 284, binary_search_num_conflicts = 99, optimize_with_max_hs = 85, use_feasibility_jump = 265, use_ls_only = 240, feasibility_jump_decay = 242, feasibility_jump_linearization_level = 257, feasibility_jump_restart_factor = 258, feasibility_jump_batch_dtime = 292, feasibility_jump_var_randomization_probability = 247, feasibility_jump_var_perburbation_range_ratio = 248, feasibility_jump_enable_restarts = 250, feasibility_jump_max_expanded_constraint_size = 264, num_violation_ls = 244, violation_ls_perturbation_period = 249, violation_ls_compound_move_probability = 259, shared_tree_num_workers = 235, use_shared_tree_search = 236, shared_tree_worker_min_restarts_per_subtree = 282, shared_tree_worker_enable_trail_sharing = 295, shared_tree_worker_enable_phase_sharing = 304, shared_tree_open_leaves_per_worker = 281, shared_tree_max_nodes_per_worker = 238, shared_tree_split_strategy = 239, shared_tree_balance_tolerance = 305, enumerate_all_solutions = 87, keep_all_feasible_solutions_in_presolve = 173, fill_tightened_domains_in_response = 132, fill_additional_solutions_in_response = 194, instantiate_all_variables = 106, auto_detect_greater_than_at_least_one_of = 95, stop_after_first_solution = 98, stop_after_presolve = 149, stop_after_root_propagation = 252, lns_initial_difficulty = 307, lns_initial_deterministic_limit = 308, use_lns = 283, use_lns_only = 101, solution_pool_size = 193, use_rins_lns = 129, use_feasibility_pump = 164, use_lb_relax_lns = 255, lb_relax_num_workers_threshold = 296, fp_rounding = 165, diversify_lns_params = 137, randomize_search = 103, search_random_variable_pool_size = 104, push_all_tasks_toward_start = 262, use_optional_variables = 108, use_exact_lp_reason = 109, use_combined_no_overlap = 133, at_most_one_max_expansion_size = 270, catch_sigint_signal = 135, use_implied_bounds = 144, polish_lp_solution = 175, lp_primal_tolerance = 266, lp_dual_tolerance = 267, convert_intervals = 177, symmetry_level = 183, use_symmetry_in_lp = 301, keep_symmetry_in_presolve = 303, symmetry_detection_deterministic_time_limit = 302, new_linear_propagation = 224, linear_split_size = 256, linearization_level = 90, boolean_encoding_level = 107, max_domain_size_when_encoding_eq_neq_constraints = 191, max_num_cuts = 91, cut_level = 196, only_add_cuts_at_level_zero = 92, add_objective_cut = 197, add_cg_cuts = 117, add_mir_cuts = 120, add_zero_half_cuts = 169, add_clique_cuts = 172, add_rlt_cuts = 279, max_all_diff_cut_size = 148, add_lin_max_cuts = 152, max_integer_rounding_scaling = 119, add_lp_constraints_lazily = 112, root_lp_iterations = 227, min_orthogonality_for_lp_constraints = 115, max_cut_rounds_at_level_zero = 154, max_consecutive_inactive_count = 121, cut_max_active_count_value = 155, cut_active_count_decay = 156, cut_cleanup_target = 157, new_constraints_batch_size = 122, exploit_integer_lp_solution = 94, exploit_all_lp_solution = 116, exploit_best_solution = 130, exploit_relaxation_solution = 161, exploit_objective = 131, detect_linearized_product = 277, mip_max_bound = 124, mip_var_scaling = 125, mip_scale_large_domain = 225, mip_automatically_scale_variables = 166, only_solve_ip = 222, mip_wanted_precision = 126, mip_max_activity_exponent = 127, mip_check_precision = 128, mip_compute_true_objective_bound = 198, mip_max_valid_magnitude = 199, mip_treat_high_magnitude_bounds_as_infinity = 278, mip_drop_tolerance = 232, mip_presolve_level = 261)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:SatParameters})
    name = ""
    preferred_variable_order = var"SatParameters.VariableOrder".IN_ORDER
    initial_polarity = var"SatParameters.Polarity".POLARITY_FALSE
    use_phase_saving = true
    polarity_rephase_increment = Int32(1000)
    polarity_exploit_ls_hints = false
    random_polarity_ratio = Float64(0.0)
    random_branches_ratio = Float64(0.0)
    use_erwa_heuristic = false
    initial_variables_activity = Float64(0.0)
    also_bump_variables_in_conflict_reasons = false
    minimization_algorithm = var"SatParameters.ConflictMinimizationAlgorithm".RECURSIVE
    binary_minimization_algorithm = var"SatParameters.BinaryMinizationAlgorithm".BINARY_MINIMIZATION_FIRST
    subsumption_during_conflict_analysis = true
    clause_cleanup_period = Int32(10000)
    clause_cleanup_target = Int32(0)
    clause_cleanup_ratio = Float64(0.5)
    clause_cleanup_protection = var"SatParameters.ClauseProtection".PROTECTION_NONE
    clause_cleanup_lbd_bound = Int32(5)
    clause_cleanup_ordering = var"SatParameters.ClauseOrdering".CLAUSE_ACTIVITY
    pb_cleanup_increment = Int32(200)
    pb_cleanup_ratio = Float64(0.5)
    variable_activity_decay = Float64(0.8)
    max_variable_activity_value = Float64(1e100)
    glucose_max_decay = Float64(0.95)
    glucose_decay_increment = Float64(0.01)
    glucose_decay_increment_period = Int32(5000)
    clause_activity_decay = Float64(0.999)
    max_clause_activity_value = Float64(1e20)
    restart_algorithms = PB.BufferedVector{var"SatParameters.RestartAlgorithm".T}()
    default_restart_algorithms = "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART"
    restart_period = Int32(50)
    restart_running_window_size = Int32(50)
    restart_dl_average_ratio = Float64(1.0)
    restart_lbd_average_ratio = Float64(1.0)
    use_blocking_restart = false
    blocking_restart_window_size = Int32(5000)
    blocking_restart_multiplier = Float64(1.4)
    num_conflicts_before_strategy_changes = Int32(0)
    strategy_change_increase_ratio = Float64(0.0)
    max_time_in_seconds = Float64(Inf)
    max_deterministic_time = Float64(Inf)
    max_num_deterministic_batches = Int32(0)
    max_number_of_conflicts = Int64(9223372036854775807)
    max_memory_in_mb = Int64(10000)
    absolute_gap_limit = Float64(1e-4)
    relative_gap_limit = Float64(0.0)
    random_seed = Int32(1)
    permute_variable_randomly = false
    permute_presolve_constraint_order = false
    use_absl_random = false
    log_search_progress = false
    log_subsolver_statistics = false
    log_prefix = ""
    log_to_stdout = true
    log_to_response = false
    use_pb_resolution = false
    minimize_reduction_during_pb_resolution = false
    count_assumption_levels_in_lbd = true
    presolve_bve_threshold = Int32(500)
    filter_sat_postsolve_clauses = false
    presolve_bve_clause_weight = Int32(3)
    probing_deterministic_time_limit = Float64(1.0)
    presolve_probing_deterministic_time_limit = Float64(30.0)
    presolve_blocked_clause = true
    presolve_use_bva = true
    presolve_bva_threshold = Int32(1)
    max_presolve_iterations = Int32(3)
    cp_model_presolve = true
    cp_model_probing_level = Int32(2)
    cp_model_use_sat_presolve = true
    remove_fixed_variables_early = true
    detect_table_with_cost = false
    table_compression_level = Int32(2)
    expand_alldiff_constraints = false
    max_alldiff_domain_size = Int32(256)
    expand_reservoir_constraints = true
    expand_reservoir_using_circuit = false
    encode_cumulative_as_reservoir = false
    max_lin_max_size_for_expansion = Int32(0)
    disable_constraint_expansion = false
    encode_complex_linear_constraint_with_integer = false
    merge_no_overlap_work_limit = Float64(1e12)
    merge_at_most_one_work_limit = Float64(1e8)
    presolve_substitution_level = Int32(1)
    presolve_extract_integer_enforcement = false
    presolve_inclusion_work_limit = Int64(100000000)
    ignore_names = true
    infer_all_diffs = true
    find_big_linear_overlap = true
    use_sat_inprocessing = true
    inprocessing_dtime_ratio = Float64(0.2)
    inprocessing_probing_dtime = Float64(1.0)
    inprocessing_minimization_dtime = Float64(1.0)
    inprocessing_minimization_use_conflict_analysis = true
    inprocessing_minimization_use_all_orderings = false
    num_workers = Int32(0)
    num_search_workers = Int32(0)
    num_full_subsolvers = Int32(0)
    subsolvers = PB.BufferedVector{String}()
    extra_subsolvers = PB.BufferedVector{String}()
    ignore_subsolvers = PB.BufferedVector{String}()
    filter_subsolvers = PB.BufferedVector{String}()
    subsolver_params = PB.BufferedVector{SatParameters}()
    interleave_search = false
    interleave_batch_size = Int32(0)
    share_objective_bounds = true
    share_level_zero_bounds = true
    share_binary_clauses = true
    share_glue_clauses = false
    minimize_shared_clauses = true
    share_glue_clauses_dtime = Float64(1.0)
    debug_postsolve_with_full_solver = false
    debug_max_num_presolve_operations = Int32(0)
    debug_crash_on_bad_hint = false
    debug_crash_if_presolve_breaks_hint = false
    use_optimization_hints = true
    core_minimization_level = Int32(2)
    find_multiple_cores = true
    cover_optimization = true
    max_sat_assumption_order = var"SatParameters.MaxSatAssumptionOrder".DEFAULT_ASSUMPTION_ORDER
    max_sat_reverse_assumption_order = false
    max_sat_stratification = var"SatParameters.MaxSatStratificationAlgorithm".STRATIFICATION_DESCENT
    propagation_loop_detection_factor = Float64(10.0)
    use_precedences_in_disjunctive_constraint = true
    max_size_to_create_precedence_literals_in_disjunctive = Int32(60)
    use_strong_propagation_in_disjunctive = false
    use_dynamic_precedence_in_disjunctive = false
    use_dynamic_precedence_in_cumulative = false
    use_overload_checker_in_cumulative = false
    use_conservative_scale_overload_checker = false
    use_timetable_edge_finding_in_cumulative = false
    max_num_intervals_for_timetable_edge_finding = Int32(100)
    use_hard_precedences_in_cumulative = false
    exploit_all_precedences = false
    use_disjunctive_constraint_in_cumulative = true
    no_overlap_2d_boolean_relations_limit = Int32(10)
    use_timetabling_in_no_overlap_2d = false
    use_energetic_reasoning_in_no_overlap_2d = false
    use_area_energetic_reasoning_in_no_overlap_2d = false
    use_try_edge_reasoning_in_no_overlap_2d = false
    max_pairs_pairwise_reasoning_in_no_overlap_2d = Int32(1250)
    maximum_regions_to_split_in_disconnected_no_overlap_2d = Int32(0)
    use_linear3_for_no_overlap_2d_precedences = true
    use_dual_scheduling_heuristics = true
    use_all_different_for_circuit = false
    routing_cut_subset_size_for_binary_relation_bound = Int32(0)
    routing_cut_subset_size_for_tight_binary_relation_bound = Int32(0)
    routing_cut_subset_size_for_exact_binary_relation_bound = Int32(8)
    routing_cut_subset_size_for_shortest_paths_bound = Int32(8)
    routing_cut_dp_effort = Float64(1e7)
    routing_cut_max_infeasible_path_length = Int32(6)
    search_branching = var"SatParameters.SearchBranching".AUTOMATIC_SEARCH
    hint_conflict_limit = Int32(10)
    repair_hint = false
    fix_variables_to_their_hinted_value = false
    use_probing_search = false
    use_extended_probing = true
    probing_num_combinations_limit = Int32(20000)
    shaving_deterministic_time_in_probing_search = Float64(0.001)
    shaving_search_deterministic_time = Float64(0.1)
    shaving_search_threshold = Int64(64)
    use_objective_lb_search = false
    use_objective_shaving_search = false
    variables_shaving_level = Int32(-1)
    pseudo_cost_reliability_threshold = Int64(100)
    optimize_with_core = false
    optimize_with_lb_tree_search = false
    save_lp_basis_in_lb_tree_search = false
    binary_search_num_conflicts = Int32(-1)
    optimize_with_max_hs = false
    use_feasibility_jump = true
    use_ls_only = false
    feasibility_jump_decay = Float64(0.95)
    feasibility_jump_linearization_level = Int32(2)
    feasibility_jump_restart_factor = Int32(1)
    feasibility_jump_batch_dtime = Float64(0.1)
    feasibility_jump_var_randomization_probability = Float64(0.05)
    feasibility_jump_var_perburbation_range_ratio = Float64(0.2)
    feasibility_jump_enable_restarts = true
    feasibility_jump_max_expanded_constraint_size = Int32(500)
    num_violation_ls = Int32(0)
    violation_ls_perturbation_period = Int32(100)
    violation_ls_compound_move_probability = Float64(0.5)
    shared_tree_num_workers = Int32(0)
    use_shared_tree_search = false
    shared_tree_worker_min_restarts_per_subtree = Int32(1)
    shared_tree_worker_enable_trail_sharing = true
    shared_tree_worker_enable_phase_sharing = true
    shared_tree_open_leaves_per_worker = Float64(2.0)
    shared_tree_max_nodes_per_worker = Int32(10000)
    shared_tree_split_strategy = var"SatParameters.SharedTreeSplitStrategy".SPLIT_STRATEGY_AUTO
    shared_tree_balance_tolerance = Int32(1)
    enumerate_all_solutions = false
    keep_all_feasible_solutions_in_presolve = false
    fill_tightened_domains_in_response = false
    fill_additional_solutions_in_response = false
    instantiate_all_variables = true
    auto_detect_greater_than_at_least_one_of = true
    stop_after_first_solution = false
    stop_after_presolve = false
    stop_after_root_propagation = false
    lns_initial_difficulty = Float64(0.5)
    lns_initial_deterministic_limit = Float64(0.1)
    use_lns = true
    use_lns_only = false
    solution_pool_size = Int32(3)
    use_rins_lns = true
    use_feasibility_pump = true
    use_lb_relax_lns = true
    lb_relax_num_workers_threshold = Int32(16)
    fp_rounding = var"SatParameters.FPRoundingMethod".PROPAGATION_ASSISTED
    diversify_lns_params = false
    randomize_search = false
    search_random_variable_pool_size = Int64(0)
    push_all_tasks_toward_start = false
    use_optional_variables = false
    use_exact_lp_reason = true
    use_combined_no_overlap = false
    at_most_one_max_expansion_size = Int32(3)
    catch_sigint_signal = true
    use_implied_bounds = true
    polish_lp_solution = false
    lp_primal_tolerance = Float64(1e-7)
    lp_dual_tolerance = Float64(1e-7)
    convert_intervals = true
    symmetry_level = Int32(2)
    use_symmetry_in_lp = false
    keep_symmetry_in_presolve = false
    symmetry_detection_deterministic_time_limit = Float64(1.0)
    new_linear_propagation = true
    linear_split_size = Int32(100)
    linearization_level = Int32(1)
    boolean_encoding_level = Int32(1)
    max_domain_size_when_encoding_eq_neq_constraints = Int32(16)
    max_num_cuts = Int32(10000)
    cut_level = Int32(1)
    only_add_cuts_at_level_zero = false
    add_objective_cut = false
    add_cg_cuts = true
    add_mir_cuts = true
    add_zero_half_cuts = true
    add_clique_cuts = true
    add_rlt_cuts = true
    max_all_diff_cut_size = Int32(64)
    add_lin_max_cuts = true
    max_integer_rounding_scaling = Int32(600)
    add_lp_constraints_lazily = true
    root_lp_iterations = Int32(2000)
    min_orthogonality_for_lp_constraints = Float64(0.05)
    max_cut_rounds_at_level_zero = Int32(1)
    max_consecutive_inactive_count = Int32(100)
    cut_max_active_count_value = Float64(1e10)
    cut_active_count_decay = Float64(0.8)
    cut_cleanup_target = Int32(1000)
    new_constraints_batch_size = Int32(50)
    exploit_integer_lp_solution = true
    exploit_all_lp_solution = true
    exploit_best_solution = false
    exploit_relaxation_solution = false
    exploit_objective = true
    detect_linearized_product = false
    mip_max_bound = Float64(1e7)
    mip_var_scaling = Float64(1.0)
    mip_scale_large_domain = false
    mip_automatically_scale_variables = true
    only_solve_ip = false
    mip_wanted_precision = Float64(1e-6)
    mip_max_activity_exponent = Int32(53)
    mip_check_precision = Float64(1e-4)
    mip_compute_true_objective_bound = true
    mip_max_valid_magnitude = Float64(1e20)
    mip_treat_high_magnitude_bounds_as_infinity = false
    mip_drop_tolerance = Float64(1e-16)
    mip_presolve_level = Int32(2)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 171
            name = PB.decode(d, String)
        elseif field_number == 1
            preferred_variable_order = PB.decode(d, var"SatParameters.VariableOrder".T)
        elseif field_number == 2
            initial_polarity = PB.decode(d, var"SatParameters.Polarity".T)
        elseif field_number == 44
            use_phase_saving = PB.decode(d, Bool)
        elseif field_number == 168
            polarity_rephase_increment = PB.decode(d, Int32)
        elseif field_number == 309
            polarity_exploit_ls_hints = PB.decode(d, Bool)
        elseif field_number == 45
            random_polarity_ratio = PB.decode(d, Float64)
        elseif field_number == 32
            random_branches_ratio = PB.decode(d, Float64)
        elseif field_number == 75
            use_erwa_heuristic = PB.decode(d, Bool)
        elseif field_number == 76
            initial_variables_activity = PB.decode(d, Float64)
        elseif field_number == 77
            also_bump_variables_in_conflict_reasons = PB.decode(d, Bool)
        elseif field_number == 4
            minimization_algorithm = PB.decode(d, var"SatParameters.ConflictMinimizationAlgorithm".T)
        elseif field_number == 34
            binary_minimization_algorithm = PB.decode(d, var"SatParameters.BinaryMinizationAlgorithm".T)
        elseif field_number == 56
            subsumption_during_conflict_analysis = PB.decode(d, Bool)
        elseif field_number == 11
            clause_cleanup_period = PB.decode(d, Int32)
        elseif field_number == 13
            clause_cleanup_target = PB.decode(d, Int32)
        elseif field_number == 190
            clause_cleanup_ratio = PB.decode(d, Float64)
        elseif field_number == 58
            clause_cleanup_protection = PB.decode(d, var"SatParameters.ClauseProtection".T)
        elseif field_number == 59
            clause_cleanup_lbd_bound = PB.decode(d, Int32)
        elseif field_number == 60
            clause_cleanup_ordering = PB.decode(d, var"SatParameters.ClauseOrdering".T)
        elseif field_number == 46
            pb_cleanup_increment = PB.decode(d, Int32)
        elseif field_number == 47
            pb_cleanup_ratio = PB.decode(d, Float64)
        elseif field_number == 15
            variable_activity_decay = PB.decode(d, Float64)
        elseif field_number == 16
            max_variable_activity_value = PB.decode(d, Float64)
        elseif field_number == 22
            glucose_max_decay = PB.decode(d, Float64)
        elseif field_number == 23
            glucose_decay_increment = PB.decode(d, Float64)
        elseif field_number == 24
            glucose_decay_increment_period = PB.decode(d, Int32)
        elseif field_number == 17
            clause_activity_decay = PB.decode(d, Float64)
        elseif field_number == 18
            max_clause_activity_value = PB.decode(d, Float64)
        elseif field_number == 61
            PB.decode!(d, wire_type, restart_algorithms)
        elseif field_number == 70
            default_restart_algorithms = PB.decode(d, String)
        elseif field_number == 30
            restart_period = PB.decode(d, Int32)
        elseif field_number == 62
            restart_running_window_size = PB.decode(d, Int32)
        elseif field_number == 63
            restart_dl_average_ratio = PB.decode(d, Float64)
        elseif field_number == 71
            restart_lbd_average_ratio = PB.decode(d, Float64)
        elseif field_number == 64
            use_blocking_restart = PB.decode(d, Bool)
        elseif field_number == 65
            blocking_restart_window_size = PB.decode(d, Int32)
        elseif field_number == 66
            blocking_restart_multiplier = PB.decode(d, Float64)
        elseif field_number == 68
            num_conflicts_before_strategy_changes = PB.decode(d, Int32)
        elseif field_number == 69
            strategy_change_increase_ratio = PB.decode(d, Float64)
        elseif field_number == 36
            max_time_in_seconds = PB.decode(d, Float64)
        elseif field_number == 67
            max_deterministic_time = PB.decode(d, Float64)
        elseif field_number == 291
            max_num_deterministic_batches = PB.decode(d, Int32)
        elseif field_number == 37
            max_number_of_conflicts = PB.decode(d, Int64)
        elseif field_number == 40
            max_memory_in_mb = PB.decode(d, Int64)
        elseif field_number == 159
            absolute_gap_limit = PB.decode(d, Float64)
        elseif field_number == 160
            relative_gap_limit = PB.decode(d, Float64)
        elseif field_number == 31
            random_seed = PB.decode(d, Int32)
        elseif field_number == 178
            permute_variable_randomly = PB.decode(d, Bool)
        elseif field_number == 179
            permute_presolve_constraint_order = PB.decode(d, Bool)
        elseif field_number == 180
            use_absl_random = PB.decode(d, Bool)
        elseif field_number == 41
            log_search_progress = PB.decode(d, Bool)
        elseif field_number == 189
            log_subsolver_statistics = PB.decode(d, Bool)
        elseif field_number == 185
            log_prefix = PB.decode(d, String)
        elseif field_number == 186
            log_to_stdout = PB.decode(d, Bool)
        elseif field_number == 187
            log_to_response = PB.decode(d, Bool)
        elseif field_number == 43
            use_pb_resolution = PB.decode(d, Bool)
        elseif field_number == 48
            minimize_reduction_during_pb_resolution = PB.decode(d, Bool)
        elseif field_number == 49
            count_assumption_levels_in_lbd = PB.decode(d, Bool)
        elseif field_number == 54
            presolve_bve_threshold = PB.decode(d, Int32)
        elseif field_number == 324
            filter_sat_postsolve_clauses = PB.decode(d, Bool)
        elseif field_number == 55
            presolve_bve_clause_weight = PB.decode(d, Int32)
        elseif field_number == 226
            probing_deterministic_time_limit = PB.decode(d, Float64)
        elseif field_number == 57
            presolve_probing_deterministic_time_limit = PB.decode(d, Float64)
        elseif field_number == 88
            presolve_blocked_clause = PB.decode(d, Bool)
        elseif field_number == 72
            presolve_use_bva = PB.decode(d, Bool)
        elseif field_number == 73
            presolve_bva_threshold = PB.decode(d, Int32)
        elseif field_number == 138
            max_presolve_iterations = PB.decode(d, Int32)
        elseif field_number == 86
            cp_model_presolve = PB.decode(d, Bool)
        elseif field_number == 110
            cp_model_probing_level = PB.decode(d, Int32)
        elseif field_number == 93
            cp_model_use_sat_presolve = PB.decode(d, Bool)
        elseif field_number == 310
            remove_fixed_variables_early = PB.decode(d, Bool)
        elseif field_number == 216
            detect_table_with_cost = PB.decode(d, Bool)
        elseif field_number == 217
            table_compression_level = PB.decode(d, Int32)
        elseif field_number == 170
            expand_alldiff_constraints = PB.decode(d, Bool)
        elseif field_number == 320
            max_alldiff_domain_size = PB.decode(d, Int32)
        elseif field_number == 182
            expand_reservoir_constraints = PB.decode(d, Bool)
        elseif field_number == 288
            expand_reservoir_using_circuit = PB.decode(d, Bool)
        elseif field_number == 287
            encode_cumulative_as_reservoir = PB.decode(d, Bool)
        elseif field_number == 280
            max_lin_max_size_for_expansion = PB.decode(d, Int32)
        elseif field_number == 181
            disable_constraint_expansion = PB.decode(d, Bool)
        elseif field_number == 223
            encode_complex_linear_constraint_with_integer = PB.decode(d, Bool)
        elseif field_number == 145
            merge_no_overlap_work_limit = PB.decode(d, Float64)
        elseif field_number == 146
            merge_at_most_one_work_limit = PB.decode(d, Float64)
        elseif field_number == 147
            presolve_substitution_level = PB.decode(d, Int32)
        elseif field_number == 174
            presolve_extract_integer_enforcement = PB.decode(d, Bool)
        elseif field_number == 201
            presolve_inclusion_work_limit = PB.decode(d, Int64)
        elseif field_number == 202
            ignore_names = PB.decode(d, Bool)
        elseif field_number == 233
            infer_all_diffs = PB.decode(d, Bool)
        elseif field_number == 234
            find_big_linear_overlap = PB.decode(d, Bool)
        elseif field_number == 163
            use_sat_inprocessing = PB.decode(d, Bool)
        elseif field_number == 273
            inprocessing_dtime_ratio = PB.decode(d, Float64)
        elseif field_number == 274
            inprocessing_probing_dtime = PB.decode(d, Float64)
        elseif field_number == 275
            inprocessing_minimization_dtime = PB.decode(d, Float64)
        elseif field_number == 297
            inprocessing_minimization_use_conflict_analysis = PB.decode(d, Bool)
        elseif field_number == 298
            inprocessing_minimization_use_all_orderings = PB.decode(d, Bool)
        elseif field_number == 206
            num_workers = PB.decode(d, Int32)
        elseif field_number == 100
            num_search_workers = PB.decode(d, Int32)
        elseif field_number == 294
            num_full_subsolvers = PB.decode(d, Int32)
        elseif field_number == 207
            PB.decode!(d, subsolvers)
        elseif field_number == 219
            PB.decode!(d, extra_subsolvers)
        elseif field_number == 209
            PB.decode!(d, ignore_subsolvers)
        elseif field_number == 293
            PB.decode!(d, filter_subsolvers)
        elseif field_number == 210
            PB.decode!(d, subsolver_params)
        elseif field_number == 136
            interleave_search = PB.decode(d, Bool)
        elseif field_number == 134
            interleave_batch_size = PB.decode(d, Int32)
        elseif field_number == 113
            share_objective_bounds = PB.decode(d, Bool)
        elseif field_number == 114
            share_level_zero_bounds = PB.decode(d, Bool)
        elseif field_number == 203
            share_binary_clauses = PB.decode(d, Bool)
        elseif field_number == 285
            share_glue_clauses = PB.decode(d, Bool)
        elseif field_number == 300
            minimize_shared_clauses = PB.decode(d, Bool)
        elseif field_number == 322
            share_glue_clauses_dtime = PB.decode(d, Float64)
        elseif field_number == 162
            debug_postsolve_with_full_solver = PB.decode(d, Bool)
        elseif field_number == 151
            debug_max_num_presolve_operations = PB.decode(d, Int32)
        elseif field_number == 195
            debug_crash_on_bad_hint = PB.decode(d, Bool)
        elseif field_number == 306
            debug_crash_if_presolve_breaks_hint = PB.decode(d, Bool)
        elseif field_number == 35
            use_optimization_hints = PB.decode(d, Bool)
        elseif field_number == 50
            core_minimization_level = PB.decode(d, Int32)
        elseif field_number == 84
            find_multiple_cores = PB.decode(d, Bool)
        elseif field_number == 89
            cover_optimization = PB.decode(d, Bool)
        elseif field_number == 51
            max_sat_assumption_order = PB.decode(d, var"SatParameters.MaxSatAssumptionOrder".T)
        elseif field_number == 52
            max_sat_reverse_assumption_order = PB.decode(d, Bool)
        elseif field_number == 53
            max_sat_stratification = PB.decode(d, var"SatParameters.MaxSatStratificationAlgorithm".T)
        elseif field_number == 221
            propagation_loop_detection_factor = PB.decode(d, Float64)
        elseif field_number == 74
            use_precedences_in_disjunctive_constraint = PB.decode(d, Bool)
        elseif field_number == 229
            max_size_to_create_precedence_literals_in_disjunctive = PB.decode(d, Int32)
        elseif field_number == 230
            use_strong_propagation_in_disjunctive = PB.decode(d, Bool)
        elseif field_number == 263
            use_dynamic_precedence_in_disjunctive = PB.decode(d, Bool)
        elseif field_number == 268
            use_dynamic_precedence_in_cumulative = PB.decode(d, Bool)
        elseif field_number == 78
            use_overload_checker_in_cumulative = PB.decode(d, Bool)
        elseif field_number == 286
            use_conservative_scale_overload_checker = PB.decode(d, Bool)
        elseif field_number == 79
            use_timetable_edge_finding_in_cumulative = PB.decode(d, Bool)
        elseif field_number == 260
            max_num_intervals_for_timetable_edge_finding = PB.decode(d, Int32)
        elseif field_number == 215
            use_hard_precedences_in_cumulative = PB.decode(d, Bool)
        elseif field_number == 220
            exploit_all_precedences = PB.decode(d, Bool)
        elseif field_number == 80
            use_disjunctive_constraint_in_cumulative = PB.decode(d, Bool)
        elseif field_number == 321
            no_overlap_2d_boolean_relations_limit = PB.decode(d, Int32)
        elseif field_number == 200
            use_timetabling_in_no_overlap_2d = PB.decode(d, Bool)
        elseif field_number == 213
            use_energetic_reasoning_in_no_overlap_2d = PB.decode(d, Bool)
        elseif field_number == 271
            use_area_energetic_reasoning_in_no_overlap_2d = PB.decode(d, Bool)
        elseif field_number == 299
            use_try_edge_reasoning_in_no_overlap_2d = PB.decode(d, Bool)
        elseif field_number == 276
            max_pairs_pairwise_reasoning_in_no_overlap_2d = PB.decode(d, Int32)
        elseif field_number == 315
            maximum_regions_to_split_in_disconnected_no_overlap_2d = PB.decode(d, Int32)
        elseif field_number == 323
            use_linear3_for_no_overlap_2d_precedences = PB.decode(d, Bool)
        elseif field_number == 214
            use_dual_scheduling_heuristics = PB.decode(d, Bool)
        elseif field_number == 311
            use_all_different_for_circuit = PB.decode(d, Bool)
        elseif field_number == 312
            routing_cut_subset_size_for_binary_relation_bound = PB.decode(d, Int32)
        elseif field_number == 313
            routing_cut_subset_size_for_tight_binary_relation_bound = PB.decode(d, Int32)
        elseif field_number == 316
            routing_cut_subset_size_for_exact_binary_relation_bound = PB.decode(d, Int32)
        elseif field_number == 318
            routing_cut_subset_size_for_shortest_paths_bound = PB.decode(d, Int32)
        elseif field_number == 314
            routing_cut_dp_effort = PB.decode(d, Float64)
        elseif field_number == 317
            routing_cut_max_infeasible_path_length = PB.decode(d, Int32)
        elseif field_number == 82
            search_branching = PB.decode(d, var"SatParameters.SearchBranching".T)
        elseif field_number == 153
            hint_conflict_limit = PB.decode(d, Int32)
        elseif field_number == 167
            repair_hint = PB.decode(d, Bool)
        elseif field_number == 192
            fix_variables_to_their_hinted_value = PB.decode(d, Bool)
        elseif field_number == 176
            use_probing_search = PB.decode(d, Bool)
        elseif field_number == 269
            use_extended_probing = PB.decode(d, Bool)
        elseif field_number == 272
            probing_num_combinations_limit = PB.decode(d, Int32)
        elseif field_number == 204
            shaving_deterministic_time_in_probing_search = PB.decode(d, Float64)
        elseif field_number == 205
            shaving_search_deterministic_time = PB.decode(d, Float64)
        elseif field_number == 290
            shaving_search_threshold = PB.decode(d, Int64)
        elseif field_number == 228
            use_objective_lb_search = PB.decode(d, Bool)
        elseif field_number == 253
            use_objective_shaving_search = PB.decode(d, Bool)
        elseif field_number == 289
            variables_shaving_level = PB.decode(d, Int32)
        elseif field_number == 123
            pseudo_cost_reliability_threshold = PB.decode(d, Int64)
        elseif field_number == 83
            optimize_with_core = PB.decode(d, Bool)
        elseif field_number == 188
            optimize_with_lb_tree_search = PB.decode(d, Bool)
        elseif field_number == 284
            save_lp_basis_in_lb_tree_search = PB.decode(d, Bool)
        elseif field_number == 99
            binary_search_num_conflicts = PB.decode(d, Int32)
        elseif field_number == 85
            optimize_with_max_hs = PB.decode(d, Bool)
        elseif field_number == 265
            use_feasibility_jump = PB.decode(d, Bool)
        elseif field_number == 240
            use_ls_only = PB.decode(d, Bool)
        elseif field_number == 242
            feasibility_jump_decay = PB.decode(d, Float64)
        elseif field_number == 257
            feasibility_jump_linearization_level = PB.decode(d, Int32)
        elseif field_number == 258
            feasibility_jump_restart_factor = PB.decode(d, Int32)
        elseif field_number == 292
            feasibility_jump_batch_dtime = PB.decode(d, Float64)
        elseif field_number == 247
            feasibility_jump_var_randomization_probability = PB.decode(d, Float64)
        elseif field_number == 248
            feasibility_jump_var_perburbation_range_ratio = PB.decode(d, Float64)
        elseif field_number == 250
            feasibility_jump_enable_restarts = PB.decode(d, Bool)
        elseif field_number == 264
            feasibility_jump_max_expanded_constraint_size = PB.decode(d, Int32)
        elseif field_number == 244
            num_violation_ls = PB.decode(d, Int32)
        elseif field_number == 249
            violation_ls_perturbation_period = PB.decode(d, Int32)
        elseif field_number == 259
            violation_ls_compound_move_probability = PB.decode(d, Float64)
        elseif field_number == 235
            shared_tree_num_workers = PB.decode(d, Int32)
        elseif field_number == 236
            use_shared_tree_search = PB.decode(d, Bool)
        elseif field_number == 282
            shared_tree_worker_min_restarts_per_subtree = PB.decode(d, Int32)
        elseif field_number == 295
            shared_tree_worker_enable_trail_sharing = PB.decode(d, Bool)
        elseif field_number == 304
            shared_tree_worker_enable_phase_sharing = PB.decode(d, Bool)
        elseif field_number == 281
            shared_tree_open_leaves_per_worker = PB.decode(d, Float64)
        elseif field_number == 238
            shared_tree_max_nodes_per_worker = PB.decode(d, Int32)
        elseif field_number == 239
            shared_tree_split_strategy = PB.decode(d, var"SatParameters.SharedTreeSplitStrategy".T)
        elseif field_number == 305
            shared_tree_balance_tolerance = PB.decode(d, Int32)
        elseif field_number == 87
            enumerate_all_solutions = PB.decode(d, Bool)
        elseif field_number == 173
            keep_all_feasible_solutions_in_presolve = PB.decode(d, Bool)
        elseif field_number == 132
            fill_tightened_domains_in_response = PB.decode(d, Bool)
        elseif field_number == 194
            fill_additional_solutions_in_response = PB.decode(d, Bool)
        elseif field_number == 106
            instantiate_all_variables = PB.decode(d, Bool)
        elseif field_number == 95
            auto_detect_greater_than_at_least_one_of = PB.decode(d, Bool)
        elseif field_number == 98
            stop_after_first_solution = PB.decode(d, Bool)
        elseif field_number == 149
            stop_after_presolve = PB.decode(d, Bool)
        elseif field_number == 252
            stop_after_root_propagation = PB.decode(d, Bool)
        elseif field_number == 307
            lns_initial_difficulty = PB.decode(d, Float64)
        elseif field_number == 308
            lns_initial_deterministic_limit = PB.decode(d, Float64)
        elseif field_number == 283
            use_lns = PB.decode(d, Bool)
        elseif field_number == 101
            use_lns_only = PB.decode(d, Bool)
        elseif field_number == 193
            solution_pool_size = PB.decode(d, Int32)
        elseif field_number == 129
            use_rins_lns = PB.decode(d, Bool)
        elseif field_number == 164
            use_feasibility_pump = PB.decode(d, Bool)
        elseif field_number == 255
            use_lb_relax_lns = PB.decode(d, Bool)
        elseif field_number == 296
            lb_relax_num_workers_threshold = PB.decode(d, Int32)
        elseif field_number == 165
            fp_rounding = PB.decode(d, var"SatParameters.FPRoundingMethod".T)
        elseif field_number == 137
            diversify_lns_params = PB.decode(d, Bool)
        elseif field_number == 103
            randomize_search = PB.decode(d, Bool)
        elseif field_number == 104
            search_random_variable_pool_size = PB.decode(d, Int64)
        elseif field_number == 262
            push_all_tasks_toward_start = PB.decode(d, Bool)
        elseif field_number == 108
            use_optional_variables = PB.decode(d, Bool)
        elseif field_number == 109
            use_exact_lp_reason = PB.decode(d, Bool)
        elseif field_number == 133
            use_combined_no_overlap = PB.decode(d, Bool)
        elseif field_number == 270
            at_most_one_max_expansion_size = PB.decode(d, Int32)
        elseif field_number == 135
            catch_sigint_signal = PB.decode(d, Bool)
        elseif field_number == 144
            use_implied_bounds = PB.decode(d, Bool)
        elseif field_number == 175
            polish_lp_solution = PB.decode(d, Bool)
        elseif field_number == 266
            lp_primal_tolerance = PB.decode(d, Float64)
        elseif field_number == 267
            lp_dual_tolerance = PB.decode(d, Float64)
        elseif field_number == 177
            convert_intervals = PB.decode(d, Bool)
        elseif field_number == 183
            symmetry_level = PB.decode(d, Int32)
        elseif field_number == 301
            use_symmetry_in_lp = PB.decode(d, Bool)
        elseif field_number == 303
            keep_symmetry_in_presolve = PB.decode(d, Bool)
        elseif field_number == 302
            symmetry_detection_deterministic_time_limit = PB.decode(d, Float64)
        elseif field_number == 224
            new_linear_propagation = PB.decode(d, Bool)
        elseif field_number == 256
            linear_split_size = PB.decode(d, Int32)
        elseif field_number == 90
            linearization_level = PB.decode(d, Int32)
        elseif field_number == 107
            boolean_encoding_level = PB.decode(d, Int32)
        elseif field_number == 191
            max_domain_size_when_encoding_eq_neq_constraints = PB.decode(d, Int32)
        elseif field_number == 91
            max_num_cuts = PB.decode(d, Int32)
        elseif field_number == 196
            cut_level = PB.decode(d, Int32)
        elseif field_number == 92
            only_add_cuts_at_level_zero = PB.decode(d, Bool)
        elseif field_number == 197
            add_objective_cut = PB.decode(d, Bool)
        elseif field_number == 117
            add_cg_cuts = PB.decode(d, Bool)
        elseif field_number == 120
            add_mir_cuts = PB.decode(d, Bool)
        elseif field_number == 169
            add_zero_half_cuts = PB.decode(d, Bool)
        elseif field_number == 172
            add_clique_cuts = PB.decode(d, Bool)
        elseif field_number == 279
            add_rlt_cuts = PB.decode(d, Bool)
        elseif field_number == 148
            max_all_diff_cut_size = PB.decode(d, Int32)
        elseif field_number == 152
            add_lin_max_cuts = PB.decode(d, Bool)
        elseif field_number == 119
            max_integer_rounding_scaling = PB.decode(d, Int32)
        elseif field_number == 112
            add_lp_constraints_lazily = PB.decode(d, Bool)
        elseif field_number == 227
            root_lp_iterations = PB.decode(d, Int32)
        elseif field_number == 115
            min_orthogonality_for_lp_constraints = PB.decode(d, Float64)
        elseif field_number == 154
            max_cut_rounds_at_level_zero = PB.decode(d, Int32)
        elseif field_number == 121
            max_consecutive_inactive_count = PB.decode(d, Int32)
        elseif field_number == 155
            cut_max_active_count_value = PB.decode(d, Float64)
        elseif field_number == 156
            cut_active_count_decay = PB.decode(d, Float64)
        elseif field_number == 157
            cut_cleanup_target = PB.decode(d, Int32)
        elseif field_number == 122
            new_constraints_batch_size = PB.decode(d, Int32)
        elseif field_number == 94
            exploit_integer_lp_solution = PB.decode(d, Bool)
        elseif field_number == 116
            exploit_all_lp_solution = PB.decode(d, Bool)
        elseif field_number == 130
            exploit_best_solution = PB.decode(d, Bool)
        elseif field_number == 161
            exploit_relaxation_solution = PB.decode(d, Bool)
        elseif field_number == 131
            exploit_objective = PB.decode(d, Bool)
        elseif field_number == 277
            detect_linearized_product = PB.decode(d, Bool)
        elseif field_number == 124
            mip_max_bound = PB.decode(d, Float64)
        elseif field_number == 125
            mip_var_scaling = PB.decode(d, Float64)
        elseif field_number == 225
            mip_scale_large_domain = PB.decode(d, Bool)
        elseif field_number == 166
            mip_automatically_scale_variables = PB.decode(d, Bool)
        elseif field_number == 222
            only_solve_ip = PB.decode(d, Bool)
        elseif field_number == 126
            mip_wanted_precision = PB.decode(d, Float64)
        elseif field_number == 127
            mip_max_activity_exponent = PB.decode(d, Int32)
        elseif field_number == 128
            mip_check_precision = PB.decode(d, Float64)
        elseif field_number == 198
            mip_compute_true_objective_bound = PB.decode(d, Bool)
        elseif field_number == 199
            mip_max_valid_magnitude = PB.decode(d, Float64)
        elseif field_number == 278
            mip_treat_high_magnitude_bounds_as_infinity = PB.decode(d, Bool)
        elseif field_number == 232
            mip_drop_tolerance = PB.decode(d, Float64)
        elseif field_number == 261
            mip_presolve_level = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return SatParameters(name, preferred_variable_order, initial_polarity, use_phase_saving, polarity_rephase_increment, polarity_exploit_ls_hints, random_polarity_ratio, random_branches_ratio, use_erwa_heuristic, initial_variables_activity, also_bump_variables_in_conflict_reasons, minimization_algorithm, binary_minimization_algorithm, subsumption_during_conflict_analysis, clause_cleanup_period, clause_cleanup_target, clause_cleanup_ratio, clause_cleanup_protection, clause_cleanup_lbd_bound, clause_cleanup_ordering, pb_cleanup_increment, pb_cleanup_ratio, variable_activity_decay, max_variable_activity_value, glucose_max_decay, glucose_decay_increment, glucose_decay_increment_period, clause_activity_decay, max_clause_activity_value, restart_algorithms[], default_restart_algorithms, restart_period, restart_running_window_size, restart_dl_average_ratio, restart_lbd_average_ratio, use_blocking_restart, blocking_restart_window_size, blocking_restart_multiplier, num_conflicts_before_strategy_changes, strategy_change_increase_ratio, max_time_in_seconds, max_deterministic_time, max_num_deterministic_batches, max_number_of_conflicts, max_memory_in_mb, absolute_gap_limit, relative_gap_limit, random_seed, permute_variable_randomly, permute_presolve_constraint_order, use_absl_random, log_search_progress, log_subsolver_statistics, log_prefix, log_to_stdout, log_to_response, use_pb_resolution, minimize_reduction_during_pb_resolution, count_assumption_levels_in_lbd, presolve_bve_threshold, filter_sat_postsolve_clauses, presolve_bve_clause_weight, probing_deterministic_time_limit, presolve_probing_deterministic_time_limit, presolve_blocked_clause, presolve_use_bva, presolve_bva_threshold, max_presolve_iterations, cp_model_presolve, cp_model_probing_level, cp_model_use_sat_presolve, remove_fixed_variables_early, detect_table_with_cost, table_compression_level, expand_alldiff_constraints, max_alldiff_domain_size, expand_reservoir_constraints, expand_reservoir_using_circuit, encode_cumulative_as_reservoir, max_lin_max_size_for_expansion, disable_constraint_expansion, encode_complex_linear_constraint_with_integer, merge_no_overlap_work_limit, merge_at_most_one_work_limit, presolve_substitution_level, presolve_extract_integer_enforcement, presolve_inclusion_work_limit, ignore_names, infer_all_diffs, find_big_linear_overlap, use_sat_inprocessing, inprocessing_dtime_ratio, inprocessing_probing_dtime, inprocessing_minimization_dtime, inprocessing_minimization_use_conflict_analysis, inprocessing_minimization_use_all_orderings, num_workers, num_search_workers, num_full_subsolvers, subsolvers[], extra_subsolvers[], ignore_subsolvers[], filter_subsolvers[], subsolver_params[], interleave_search, interleave_batch_size, share_objective_bounds, share_level_zero_bounds, share_binary_clauses, share_glue_clauses, minimize_shared_clauses, share_glue_clauses_dtime, debug_postsolve_with_full_solver, debug_max_num_presolve_operations, debug_crash_on_bad_hint, debug_crash_if_presolve_breaks_hint, use_optimization_hints, core_minimization_level, find_multiple_cores, cover_optimization, max_sat_assumption_order, max_sat_reverse_assumption_order, max_sat_stratification, propagation_loop_detection_factor, use_precedences_in_disjunctive_constraint, max_size_to_create_precedence_literals_in_disjunctive, use_strong_propagation_in_disjunctive, use_dynamic_precedence_in_disjunctive, use_dynamic_precedence_in_cumulative, use_overload_checker_in_cumulative, use_conservative_scale_overload_checker, use_timetable_edge_finding_in_cumulative, max_num_intervals_for_timetable_edge_finding, use_hard_precedences_in_cumulative, exploit_all_precedences, use_disjunctive_constraint_in_cumulative, no_overlap_2d_boolean_relations_limit, use_timetabling_in_no_overlap_2d, use_energetic_reasoning_in_no_overlap_2d, use_area_energetic_reasoning_in_no_overlap_2d, use_try_edge_reasoning_in_no_overlap_2d, max_pairs_pairwise_reasoning_in_no_overlap_2d, maximum_regions_to_split_in_disconnected_no_overlap_2d, use_linear3_for_no_overlap_2d_precedences, use_dual_scheduling_heuristics, use_all_different_for_circuit, routing_cut_subset_size_for_binary_relation_bound, routing_cut_subset_size_for_tight_binary_relation_bound, routing_cut_subset_size_for_exact_binary_relation_bound, routing_cut_subset_size_for_shortest_paths_bound, routing_cut_dp_effort, routing_cut_max_infeasible_path_length, search_branching, hint_conflict_limit, repair_hint, fix_variables_to_their_hinted_value, use_probing_search, use_extended_probing, probing_num_combinations_limit, shaving_deterministic_time_in_probing_search, shaving_search_deterministic_time, shaving_search_threshold, use_objective_lb_search, use_objective_shaving_search, variables_shaving_level, pseudo_cost_reliability_threshold, optimize_with_core, optimize_with_lb_tree_search, save_lp_basis_in_lb_tree_search, binary_search_num_conflicts, optimize_with_max_hs, use_feasibility_jump, use_ls_only, feasibility_jump_decay, feasibility_jump_linearization_level, feasibility_jump_restart_factor, feasibility_jump_batch_dtime, feasibility_jump_var_randomization_probability, feasibility_jump_var_perburbation_range_ratio, feasibility_jump_enable_restarts, feasibility_jump_max_expanded_constraint_size, num_violation_ls, violation_ls_perturbation_period, violation_ls_compound_move_probability, shared_tree_num_workers, use_shared_tree_search, shared_tree_worker_min_restarts_per_subtree, shared_tree_worker_enable_trail_sharing, shared_tree_worker_enable_phase_sharing, shared_tree_open_leaves_per_worker, shared_tree_max_nodes_per_worker, shared_tree_split_strategy, shared_tree_balance_tolerance, enumerate_all_solutions, keep_all_feasible_solutions_in_presolve, fill_tightened_domains_in_response, fill_additional_solutions_in_response, instantiate_all_variables, auto_detect_greater_than_at_least_one_of, stop_after_first_solution, stop_after_presolve, stop_after_root_propagation, lns_initial_difficulty, lns_initial_deterministic_limit, use_lns, use_lns_only, solution_pool_size, use_rins_lns, use_feasibility_pump, use_lb_relax_lns, lb_relax_num_workers_threshold, fp_rounding, diversify_lns_params, randomize_search, search_random_variable_pool_size, push_all_tasks_toward_start, use_optional_variables, use_exact_lp_reason, use_combined_no_overlap, at_most_one_max_expansion_size, catch_sigint_signal, use_implied_bounds, polish_lp_solution, lp_primal_tolerance, lp_dual_tolerance, convert_intervals, symmetry_level, use_symmetry_in_lp, keep_symmetry_in_presolve, symmetry_detection_deterministic_time_limit, new_linear_propagation, linear_split_size, linearization_level, boolean_encoding_level, max_domain_size_when_encoding_eq_neq_constraints, max_num_cuts, cut_level, only_add_cuts_at_level_zero, add_objective_cut, add_cg_cuts, add_mir_cuts, add_zero_half_cuts, add_clique_cuts, add_rlt_cuts, max_all_diff_cut_size, add_lin_max_cuts, max_integer_rounding_scaling, add_lp_constraints_lazily, root_lp_iterations, min_orthogonality_for_lp_constraints, max_cut_rounds_at_level_zero, max_consecutive_inactive_count, cut_max_active_count_value, cut_active_count_decay, cut_cleanup_target, new_constraints_batch_size, exploit_integer_lp_solution, exploit_all_lp_solution, exploit_best_solution, exploit_relaxation_solution, exploit_objective, detect_linearized_product, mip_max_bound, mip_var_scaling, mip_scale_large_domain, mip_automatically_scale_variables, only_solve_ip, mip_wanted_precision, mip_max_activity_exponent, mip_check_precision, mip_compute_true_objective_bound, mip_max_valid_magnitude, mip_treat_high_magnitude_bounds_as_infinity, mip_drop_tolerance, mip_presolve_level)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::SatParameters)
    initpos = position(e.io)
    x.name != "" && PB.encode(e, 171, x.name)
    x.preferred_variable_order != var"SatParameters.VariableOrder".IN_ORDER && PB.encode(e, 1, x.preferred_variable_order)
    x.initial_polarity != var"SatParameters.Polarity".POLARITY_FALSE && PB.encode(e, 2, x.initial_polarity)
    x.use_phase_saving != true && PB.encode(e, 44, x.use_phase_saving)
    x.polarity_rephase_increment != Int32(1000) && PB.encode(e, 168, x.polarity_rephase_increment)
    x.polarity_exploit_ls_hints != false && PB.encode(e, 309, x.polarity_exploit_ls_hints)
    x.random_polarity_ratio !== Float64(0.0) && PB.encode(e, 45, x.random_polarity_ratio)
    x.random_branches_ratio !== Float64(0.0) && PB.encode(e, 32, x.random_branches_ratio)
    x.use_erwa_heuristic != false && PB.encode(e, 75, x.use_erwa_heuristic)
    x.initial_variables_activity !== Float64(0.0) && PB.encode(e, 76, x.initial_variables_activity)
    x.also_bump_variables_in_conflict_reasons != false && PB.encode(e, 77, x.also_bump_variables_in_conflict_reasons)
    x.minimization_algorithm != var"SatParameters.ConflictMinimizationAlgorithm".RECURSIVE && PB.encode(e, 4, x.minimization_algorithm)
    x.binary_minimization_algorithm != var"SatParameters.BinaryMinizationAlgorithm".BINARY_MINIMIZATION_FIRST && PB.encode(e, 34, x.binary_minimization_algorithm)
    x.subsumption_during_conflict_analysis != true && PB.encode(e, 56, x.subsumption_during_conflict_analysis)
    x.clause_cleanup_period != Int32(10000) && PB.encode(e, 11, x.clause_cleanup_period)
    x.clause_cleanup_target != Int32(0) && PB.encode(e, 13, x.clause_cleanup_target)
    x.clause_cleanup_ratio !== Float64(0.5) && PB.encode(e, 190, x.clause_cleanup_ratio)
    x.clause_cleanup_protection != var"SatParameters.ClauseProtection".PROTECTION_NONE && PB.encode(e, 58, x.clause_cleanup_protection)
    x.clause_cleanup_lbd_bound != Int32(5) && PB.encode(e, 59, x.clause_cleanup_lbd_bound)
    x.clause_cleanup_ordering != var"SatParameters.ClauseOrdering".CLAUSE_ACTIVITY && PB.encode(e, 60, x.clause_cleanup_ordering)
    x.pb_cleanup_increment != Int32(200) && PB.encode(e, 46, x.pb_cleanup_increment)
    x.pb_cleanup_ratio !== Float64(0.5) && PB.encode(e, 47, x.pb_cleanup_ratio)
    x.variable_activity_decay !== Float64(0.8) && PB.encode(e, 15, x.variable_activity_decay)
    x.max_variable_activity_value !== Float64(1e100) && PB.encode(e, 16, x.max_variable_activity_value)
    x.glucose_max_decay !== Float64(0.95) && PB.encode(e, 22, x.glucose_max_decay)
    x.glucose_decay_increment !== Float64(0.01) && PB.encode(e, 23, x.glucose_decay_increment)
    x.glucose_decay_increment_period != Int32(5000) && PB.encode(e, 24, x.glucose_decay_increment_period)
    x.clause_activity_decay !== Float64(0.999) && PB.encode(e, 17, x.clause_activity_decay)
    x.max_clause_activity_value !== Float64(1e20) && PB.encode(e, 18, x.max_clause_activity_value)
    !isempty(x.restart_algorithms) && PB.encode(e, 61, x.restart_algorithms)
    x.default_restart_algorithms != "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART" && PB.encode(e, 70, x.default_restart_algorithms)
    x.restart_period != Int32(50) && PB.encode(e, 30, x.restart_period)
    x.restart_running_window_size != Int32(50) && PB.encode(e, 62, x.restart_running_window_size)
    x.restart_dl_average_ratio !== Float64(1.0) && PB.encode(e, 63, x.restart_dl_average_ratio)
    x.restart_lbd_average_ratio !== Float64(1.0) && PB.encode(e, 71, x.restart_lbd_average_ratio)
    x.use_blocking_restart != false && PB.encode(e, 64, x.use_blocking_restart)
    x.blocking_restart_window_size != Int32(5000) && PB.encode(e, 65, x.blocking_restart_window_size)
    x.blocking_restart_multiplier !== Float64(1.4) && PB.encode(e, 66, x.blocking_restart_multiplier)
    x.num_conflicts_before_strategy_changes != Int32(0) && PB.encode(e, 68, x.num_conflicts_before_strategy_changes)
    x.strategy_change_increase_ratio !== Float64(0.0) && PB.encode(e, 69, x.strategy_change_increase_ratio)
    x.max_time_in_seconds !== Float64(Inf) && PB.encode(e, 36, x.max_time_in_seconds)
    x.max_deterministic_time !== Float64(Inf) && PB.encode(e, 67, x.max_deterministic_time)
    x.max_num_deterministic_batches != Int32(0) && PB.encode(e, 291, x.max_num_deterministic_batches)
    x.max_number_of_conflicts != Int64(9223372036854775807) && PB.encode(e, 37, x.max_number_of_conflicts)
    x.max_memory_in_mb != Int64(10000) && PB.encode(e, 40, x.max_memory_in_mb)
    x.absolute_gap_limit !== Float64(1e-4) && PB.encode(e, 159, x.absolute_gap_limit)
    x.relative_gap_limit !== Float64(0.0) && PB.encode(e, 160, x.relative_gap_limit)
    x.random_seed != Int32(1) && PB.encode(e, 31, x.random_seed)
    x.permute_variable_randomly != false && PB.encode(e, 178, x.permute_variable_randomly)
    x.permute_presolve_constraint_order != false && PB.encode(e, 179, x.permute_presolve_constraint_order)
    x.use_absl_random != false && PB.encode(e, 180, x.use_absl_random)
    x.log_search_progress != false && PB.encode(e, 41, x.log_search_progress)
    x.log_subsolver_statistics != false && PB.encode(e, 189, x.log_subsolver_statistics)
    x.log_prefix != "" && PB.encode(e, 185, x.log_prefix)
    x.log_to_stdout != true && PB.encode(e, 186, x.log_to_stdout)
    x.log_to_response != false && PB.encode(e, 187, x.log_to_response)
    x.use_pb_resolution != false && PB.encode(e, 43, x.use_pb_resolution)
    x.minimize_reduction_during_pb_resolution != false && PB.encode(e, 48, x.minimize_reduction_during_pb_resolution)
    x.count_assumption_levels_in_lbd != true && PB.encode(e, 49, x.count_assumption_levels_in_lbd)
    x.presolve_bve_threshold != Int32(500) && PB.encode(e, 54, x.presolve_bve_threshold)
    x.filter_sat_postsolve_clauses != false && PB.encode(e, 324, x.filter_sat_postsolve_clauses)
    x.presolve_bve_clause_weight != Int32(3) && PB.encode(e, 55, x.presolve_bve_clause_weight)
    x.probing_deterministic_time_limit !== Float64(1.0) && PB.encode(e, 226, x.probing_deterministic_time_limit)
    x.presolve_probing_deterministic_time_limit !== Float64(30.0) && PB.encode(e, 57, x.presolve_probing_deterministic_time_limit)
    x.presolve_blocked_clause != true && PB.encode(e, 88, x.presolve_blocked_clause)
    x.presolve_use_bva != true && PB.encode(e, 72, x.presolve_use_bva)
    x.presolve_bva_threshold != Int32(1) && PB.encode(e, 73, x.presolve_bva_threshold)
    x.max_presolve_iterations != Int32(3) && PB.encode(e, 138, x.max_presolve_iterations)
    x.cp_model_presolve != true && PB.encode(e, 86, x.cp_model_presolve)
    x.cp_model_probing_level != Int32(2) && PB.encode(e, 110, x.cp_model_probing_level)
    x.cp_model_use_sat_presolve != true && PB.encode(e, 93, x.cp_model_use_sat_presolve)
    x.remove_fixed_variables_early != true && PB.encode(e, 310, x.remove_fixed_variables_early)
    x.detect_table_with_cost != false && PB.encode(e, 216, x.detect_table_with_cost)
    x.table_compression_level != Int32(2) && PB.encode(e, 217, x.table_compression_level)
    x.expand_alldiff_constraints != false && PB.encode(e, 170, x.expand_alldiff_constraints)
    x.max_alldiff_domain_size != Int32(256) && PB.encode(e, 320, x.max_alldiff_domain_size)
    x.expand_reservoir_constraints != true && PB.encode(e, 182, x.expand_reservoir_constraints)
    x.expand_reservoir_using_circuit != false && PB.encode(e, 288, x.expand_reservoir_using_circuit)
    x.encode_cumulative_as_reservoir != false && PB.encode(e, 287, x.encode_cumulative_as_reservoir)
    x.max_lin_max_size_for_expansion != Int32(0) && PB.encode(e, 280, x.max_lin_max_size_for_expansion)
    x.disable_constraint_expansion != false && PB.encode(e, 181, x.disable_constraint_expansion)
    x.encode_complex_linear_constraint_with_integer != false && PB.encode(e, 223, x.encode_complex_linear_constraint_with_integer)
    x.merge_no_overlap_work_limit !== Float64(1e12) && PB.encode(e, 145, x.merge_no_overlap_work_limit)
    x.merge_at_most_one_work_limit !== Float64(1e8) && PB.encode(e, 146, x.merge_at_most_one_work_limit)
    x.presolve_substitution_level != Int32(1) && PB.encode(e, 147, x.presolve_substitution_level)
    x.presolve_extract_integer_enforcement != false && PB.encode(e, 174, x.presolve_extract_integer_enforcement)
    x.presolve_inclusion_work_limit != Int64(100000000) && PB.encode(e, 201, x.presolve_inclusion_work_limit)
    x.ignore_names != true && PB.encode(e, 202, x.ignore_names)
    x.infer_all_diffs != true && PB.encode(e, 233, x.infer_all_diffs)
    x.find_big_linear_overlap != true && PB.encode(e, 234, x.find_big_linear_overlap)
    x.use_sat_inprocessing != true && PB.encode(e, 163, x.use_sat_inprocessing)
    x.inprocessing_dtime_ratio !== Float64(0.2) && PB.encode(e, 273, x.inprocessing_dtime_ratio)
    x.inprocessing_probing_dtime !== Float64(1.0) && PB.encode(e, 274, x.inprocessing_probing_dtime)
    x.inprocessing_minimization_dtime !== Float64(1.0) && PB.encode(e, 275, x.inprocessing_minimization_dtime)
    x.inprocessing_minimization_use_conflict_analysis != true && PB.encode(e, 297, x.inprocessing_minimization_use_conflict_analysis)
    x.inprocessing_minimization_use_all_orderings != false && PB.encode(e, 298, x.inprocessing_minimization_use_all_orderings)
    x.num_workers != Int32(0) && PB.encode(e, 206, x.num_workers)
    x.num_search_workers != Int32(0) && PB.encode(e, 100, x.num_search_workers)
    x.num_full_subsolvers != Int32(0) && PB.encode(e, 294, x.num_full_subsolvers)
    !isempty(x.subsolvers) && PB.encode(e, 207, x.subsolvers)
    !isempty(x.extra_subsolvers) && PB.encode(e, 219, x.extra_subsolvers)
    !isempty(x.ignore_subsolvers) && PB.encode(e, 209, x.ignore_subsolvers)
    !isempty(x.filter_subsolvers) && PB.encode(e, 293, x.filter_subsolvers)
    !isempty(x.subsolver_params) && PB.encode(e, 210, x.subsolver_params)
    x.interleave_search != false && PB.encode(e, 136, x.interleave_search)
    x.interleave_batch_size != Int32(0) && PB.encode(e, 134, x.interleave_batch_size)
    x.share_objective_bounds != true && PB.encode(e, 113, x.share_objective_bounds)
    x.share_level_zero_bounds != true && PB.encode(e, 114, x.share_level_zero_bounds)
    x.share_binary_clauses != true && PB.encode(e, 203, x.share_binary_clauses)
    x.share_glue_clauses != false && PB.encode(e, 285, x.share_glue_clauses)
    x.minimize_shared_clauses != true && PB.encode(e, 300, x.minimize_shared_clauses)
    x.share_glue_clauses_dtime !== Float64(1.0) && PB.encode(e, 322, x.share_glue_clauses_dtime)
    x.debug_postsolve_with_full_solver != false && PB.encode(e, 162, x.debug_postsolve_with_full_solver)
    x.debug_max_num_presolve_operations != Int32(0) && PB.encode(e, 151, x.debug_max_num_presolve_operations)
    x.debug_crash_on_bad_hint != false && PB.encode(e, 195, x.debug_crash_on_bad_hint)
    x.debug_crash_if_presolve_breaks_hint != false && PB.encode(e, 306, x.debug_crash_if_presolve_breaks_hint)
    x.use_optimization_hints != true && PB.encode(e, 35, x.use_optimization_hints)
    x.core_minimization_level != Int32(2) && PB.encode(e, 50, x.core_minimization_level)
    x.find_multiple_cores != true && PB.encode(e, 84, x.find_multiple_cores)
    x.cover_optimization != true && PB.encode(e, 89, x.cover_optimization)
    x.max_sat_assumption_order != var"SatParameters.MaxSatAssumptionOrder".DEFAULT_ASSUMPTION_ORDER && PB.encode(e, 51, x.max_sat_assumption_order)
    x.max_sat_reverse_assumption_order != false && PB.encode(e, 52, x.max_sat_reverse_assumption_order)
    x.max_sat_stratification != var"SatParameters.MaxSatStratificationAlgorithm".STRATIFICATION_DESCENT && PB.encode(e, 53, x.max_sat_stratification)
    x.propagation_loop_detection_factor !== Float64(10.0) && PB.encode(e, 221, x.propagation_loop_detection_factor)
    x.use_precedences_in_disjunctive_constraint != true && PB.encode(e, 74, x.use_precedences_in_disjunctive_constraint)
    x.max_size_to_create_precedence_literals_in_disjunctive != Int32(60) && PB.encode(e, 229, x.max_size_to_create_precedence_literals_in_disjunctive)
    x.use_strong_propagation_in_disjunctive != false && PB.encode(e, 230, x.use_strong_propagation_in_disjunctive)
    x.use_dynamic_precedence_in_disjunctive != false && PB.encode(e, 263, x.use_dynamic_precedence_in_disjunctive)
    x.use_dynamic_precedence_in_cumulative != false && PB.encode(e, 268, x.use_dynamic_precedence_in_cumulative)
    x.use_overload_checker_in_cumulative != false && PB.encode(e, 78, x.use_overload_checker_in_cumulative)
    x.use_conservative_scale_overload_checker != false && PB.encode(e, 286, x.use_conservative_scale_overload_checker)
    x.use_timetable_edge_finding_in_cumulative != false && PB.encode(e, 79, x.use_timetable_edge_finding_in_cumulative)
    x.max_num_intervals_for_timetable_edge_finding != Int32(100) && PB.encode(e, 260, x.max_num_intervals_for_timetable_edge_finding)
    x.use_hard_precedences_in_cumulative != false && PB.encode(e, 215, x.use_hard_precedences_in_cumulative)
    x.exploit_all_precedences != false && PB.encode(e, 220, x.exploit_all_precedences)
    x.use_disjunctive_constraint_in_cumulative != true && PB.encode(e, 80, x.use_disjunctive_constraint_in_cumulative)
    x.no_overlap_2d_boolean_relations_limit != Int32(10) && PB.encode(e, 321, x.no_overlap_2d_boolean_relations_limit)
    x.use_timetabling_in_no_overlap_2d != false && PB.encode(e, 200, x.use_timetabling_in_no_overlap_2d)
    x.use_energetic_reasoning_in_no_overlap_2d != false && PB.encode(e, 213, x.use_energetic_reasoning_in_no_overlap_2d)
    x.use_area_energetic_reasoning_in_no_overlap_2d != false && PB.encode(e, 271, x.use_area_energetic_reasoning_in_no_overlap_2d)
    x.use_try_edge_reasoning_in_no_overlap_2d != false && PB.encode(e, 299, x.use_try_edge_reasoning_in_no_overlap_2d)
    x.max_pairs_pairwise_reasoning_in_no_overlap_2d != Int32(1250) && PB.encode(e, 276, x.max_pairs_pairwise_reasoning_in_no_overlap_2d)
    x.maximum_regions_to_split_in_disconnected_no_overlap_2d != Int32(0) && PB.encode(e, 315, x.maximum_regions_to_split_in_disconnected_no_overlap_2d)
    x.use_linear3_for_no_overlap_2d_precedences != true && PB.encode(e, 323, x.use_linear3_for_no_overlap_2d_precedences)
    x.use_dual_scheduling_heuristics != true && PB.encode(e, 214, x.use_dual_scheduling_heuristics)
    x.use_all_different_for_circuit != false && PB.encode(e, 311, x.use_all_different_for_circuit)
    x.routing_cut_subset_size_for_binary_relation_bound != Int32(0) && PB.encode(e, 312, x.routing_cut_subset_size_for_binary_relation_bound)
    x.routing_cut_subset_size_for_tight_binary_relation_bound != Int32(0) && PB.encode(e, 313, x.routing_cut_subset_size_for_tight_binary_relation_bound)
    x.routing_cut_subset_size_for_exact_binary_relation_bound != Int32(8) && PB.encode(e, 316, x.routing_cut_subset_size_for_exact_binary_relation_bound)
    x.routing_cut_subset_size_for_shortest_paths_bound != Int32(8) && PB.encode(e, 318, x.routing_cut_subset_size_for_shortest_paths_bound)
    x.routing_cut_dp_effort !== Float64(1e7) && PB.encode(e, 314, x.routing_cut_dp_effort)
    x.routing_cut_max_infeasible_path_length != Int32(6) && PB.encode(e, 317, x.routing_cut_max_infeasible_path_length)
    x.search_branching != var"SatParameters.SearchBranching".AUTOMATIC_SEARCH && PB.encode(e, 82, x.search_branching)
    x.hint_conflict_limit != Int32(10) && PB.encode(e, 153, x.hint_conflict_limit)
    x.repair_hint != false && PB.encode(e, 167, x.repair_hint)
    x.fix_variables_to_their_hinted_value != false && PB.encode(e, 192, x.fix_variables_to_their_hinted_value)
    x.use_probing_search != false && PB.encode(e, 176, x.use_probing_search)
    x.use_extended_probing != true && PB.encode(e, 269, x.use_extended_probing)
    x.probing_num_combinations_limit != Int32(20000) && PB.encode(e, 272, x.probing_num_combinations_limit)
    x.shaving_deterministic_time_in_probing_search !== Float64(0.001) && PB.encode(e, 204, x.shaving_deterministic_time_in_probing_search)
    x.shaving_search_deterministic_time !== Float64(0.1) && PB.encode(e, 205, x.shaving_search_deterministic_time)
    x.shaving_search_threshold != Int64(64) && PB.encode(e, 290, x.shaving_search_threshold)
    x.use_objective_lb_search != false && PB.encode(e, 228, x.use_objective_lb_search)
    x.use_objective_shaving_search != false && PB.encode(e, 253, x.use_objective_shaving_search)
    x.variables_shaving_level != Int32(-1) && PB.encode(e, 289, x.variables_shaving_level)
    x.pseudo_cost_reliability_threshold != Int64(100) && PB.encode(e, 123, x.pseudo_cost_reliability_threshold)
    x.optimize_with_core != false && PB.encode(e, 83, x.optimize_with_core)
    x.optimize_with_lb_tree_search != false && PB.encode(e, 188, x.optimize_with_lb_tree_search)
    x.save_lp_basis_in_lb_tree_search != false && PB.encode(e, 284, x.save_lp_basis_in_lb_tree_search)
    x.binary_search_num_conflicts != Int32(-1) && PB.encode(e, 99, x.binary_search_num_conflicts)
    x.optimize_with_max_hs != false && PB.encode(e, 85, x.optimize_with_max_hs)
    x.use_feasibility_jump != true && PB.encode(e, 265, x.use_feasibility_jump)
    x.use_ls_only != false && PB.encode(e, 240, x.use_ls_only)
    x.feasibility_jump_decay !== Float64(0.95) && PB.encode(e, 242, x.feasibility_jump_decay)
    x.feasibility_jump_linearization_level != Int32(2) && PB.encode(e, 257, x.feasibility_jump_linearization_level)
    x.feasibility_jump_restart_factor != Int32(1) && PB.encode(e, 258, x.feasibility_jump_restart_factor)
    x.feasibility_jump_batch_dtime !== Float64(0.1) && PB.encode(e, 292, x.feasibility_jump_batch_dtime)
    x.feasibility_jump_var_randomization_probability !== Float64(0.05) && PB.encode(e, 247, x.feasibility_jump_var_randomization_probability)
    x.feasibility_jump_var_perburbation_range_ratio !== Float64(0.2) && PB.encode(e, 248, x.feasibility_jump_var_perburbation_range_ratio)
    x.feasibility_jump_enable_restarts != true && PB.encode(e, 250, x.feasibility_jump_enable_restarts)
    x.feasibility_jump_max_expanded_constraint_size != Int32(500) && PB.encode(e, 264, x.feasibility_jump_max_expanded_constraint_size)
    x.num_violation_ls != Int32(0) && PB.encode(e, 244, x.num_violation_ls)
    x.violation_ls_perturbation_period != Int32(100) && PB.encode(e, 249, x.violation_ls_perturbation_period)
    x.violation_ls_compound_move_probability !== Float64(0.5) && PB.encode(e, 259, x.violation_ls_compound_move_probability)
    x.shared_tree_num_workers != Int32(0) && PB.encode(e, 235, x.shared_tree_num_workers)
    x.use_shared_tree_search != false && PB.encode(e, 236, x.use_shared_tree_search)
    x.shared_tree_worker_min_restarts_per_subtree != Int32(1) && PB.encode(e, 282, x.shared_tree_worker_min_restarts_per_subtree)
    x.shared_tree_worker_enable_trail_sharing != true && PB.encode(e, 295, x.shared_tree_worker_enable_trail_sharing)
    x.shared_tree_worker_enable_phase_sharing != true && PB.encode(e, 304, x.shared_tree_worker_enable_phase_sharing)
    x.shared_tree_open_leaves_per_worker !== Float64(2.0) && PB.encode(e, 281, x.shared_tree_open_leaves_per_worker)
    x.shared_tree_max_nodes_per_worker != Int32(10000) && PB.encode(e, 238, x.shared_tree_max_nodes_per_worker)
    x.shared_tree_split_strategy != var"SatParameters.SharedTreeSplitStrategy".SPLIT_STRATEGY_AUTO && PB.encode(e, 239, x.shared_tree_split_strategy)
    x.shared_tree_balance_tolerance != Int32(1) && PB.encode(e, 305, x.shared_tree_balance_tolerance)
    x.enumerate_all_solutions != false && PB.encode(e, 87, x.enumerate_all_solutions)
    x.keep_all_feasible_solutions_in_presolve != false && PB.encode(e, 173, x.keep_all_feasible_solutions_in_presolve)
    x.fill_tightened_domains_in_response != false && PB.encode(e, 132, x.fill_tightened_domains_in_response)
    x.fill_additional_solutions_in_response != false && PB.encode(e, 194, x.fill_additional_solutions_in_response)
    x.instantiate_all_variables != true && PB.encode(e, 106, x.instantiate_all_variables)
    x.auto_detect_greater_than_at_least_one_of != true && PB.encode(e, 95, x.auto_detect_greater_than_at_least_one_of)
    x.stop_after_first_solution != false && PB.encode(e, 98, x.stop_after_first_solution)
    x.stop_after_presolve != false && PB.encode(e, 149, x.stop_after_presolve)
    x.stop_after_root_propagation != false && PB.encode(e, 252, x.stop_after_root_propagation)
    x.lns_initial_difficulty !== Float64(0.5) && PB.encode(e, 307, x.lns_initial_difficulty)
    x.lns_initial_deterministic_limit !== Float64(0.1) && PB.encode(e, 308, x.lns_initial_deterministic_limit)
    x.use_lns != true && PB.encode(e, 283, x.use_lns)
    x.use_lns_only != false && PB.encode(e, 101, x.use_lns_only)
    x.solution_pool_size != Int32(3) && PB.encode(e, 193, x.solution_pool_size)
    x.use_rins_lns != true && PB.encode(e, 129, x.use_rins_lns)
    x.use_feasibility_pump != true && PB.encode(e, 164, x.use_feasibility_pump)
    x.use_lb_relax_lns != true && PB.encode(e, 255, x.use_lb_relax_lns)
    x.lb_relax_num_workers_threshold != Int32(16) && PB.encode(e, 296, x.lb_relax_num_workers_threshold)
    x.fp_rounding != var"SatParameters.FPRoundingMethod".PROPAGATION_ASSISTED && PB.encode(e, 165, x.fp_rounding)
    x.diversify_lns_params != false && PB.encode(e, 137, x.diversify_lns_params)
    x.randomize_search != false && PB.encode(e, 103, x.randomize_search)
    x.search_random_variable_pool_size != Int64(0) && PB.encode(e, 104, x.search_random_variable_pool_size)
    x.push_all_tasks_toward_start != false && PB.encode(e, 262, x.push_all_tasks_toward_start)
    x.use_optional_variables != false && PB.encode(e, 108, x.use_optional_variables)
    x.use_exact_lp_reason != true && PB.encode(e, 109, x.use_exact_lp_reason)
    x.use_combined_no_overlap != false && PB.encode(e, 133, x.use_combined_no_overlap)
    x.at_most_one_max_expansion_size != Int32(3) && PB.encode(e, 270, x.at_most_one_max_expansion_size)
    x.catch_sigint_signal != true && PB.encode(e, 135, x.catch_sigint_signal)
    x.use_implied_bounds != true && PB.encode(e, 144, x.use_implied_bounds)
    x.polish_lp_solution != false && PB.encode(e, 175, x.polish_lp_solution)
    x.lp_primal_tolerance !== Float64(1e-7) && PB.encode(e, 266, x.lp_primal_tolerance)
    x.lp_dual_tolerance !== Float64(1e-7) && PB.encode(e, 267, x.lp_dual_tolerance)
    x.convert_intervals != true && PB.encode(e, 177, x.convert_intervals)
    x.symmetry_level != Int32(2) && PB.encode(e, 183, x.symmetry_level)
    x.use_symmetry_in_lp != false && PB.encode(e, 301, x.use_symmetry_in_lp)
    x.keep_symmetry_in_presolve != false && PB.encode(e, 303, x.keep_symmetry_in_presolve)
    x.symmetry_detection_deterministic_time_limit !== Float64(1.0) && PB.encode(e, 302, x.symmetry_detection_deterministic_time_limit)
    x.new_linear_propagation != true && PB.encode(e, 224, x.new_linear_propagation)
    x.linear_split_size != Int32(100) && PB.encode(e, 256, x.linear_split_size)
    x.linearization_level != Int32(1) && PB.encode(e, 90, x.linearization_level)
    x.boolean_encoding_level != Int32(1) && PB.encode(e, 107, x.boolean_encoding_level)
    x.max_domain_size_when_encoding_eq_neq_constraints != Int32(16) && PB.encode(e, 191, x.max_domain_size_when_encoding_eq_neq_constraints)
    x.max_num_cuts != Int32(10000) && PB.encode(e, 91, x.max_num_cuts)
    x.cut_level != Int32(1) && PB.encode(e, 196, x.cut_level)
    x.only_add_cuts_at_level_zero != false && PB.encode(e, 92, x.only_add_cuts_at_level_zero)
    x.add_objective_cut != false && PB.encode(e, 197, x.add_objective_cut)
    x.add_cg_cuts != true && PB.encode(e, 117, x.add_cg_cuts)
    x.add_mir_cuts != true && PB.encode(e, 120, x.add_mir_cuts)
    x.add_zero_half_cuts != true && PB.encode(e, 169, x.add_zero_half_cuts)
    x.add_clique_cuts != true && PB.encode(e, 172, x.add_clique_cuts)
    x.add_rlt_cuts != true && PB.encode(e, 279, x.add_rlt_cuts)
    x.max_all_diff_cut_size != Int32(64) && PB.encode(e, 148, x.max_all_diff_cut_size)
    x.add_lin_max_cuts != true && PB.encode(e, 152, x.add_lin_max_cuts)
    x.max_integer_rounding_scaling != Int32(600) && PB.encode(e, 119, x.max_integer_rounding_scaling)
    x.add_lp_constraints_lazily != true && PB.encode(e, 112, x.add_lp_constraints_lazily)
    x.root_lp_iterations != Int32(2000) && PB.encode(e, 227, x.root_lp_iterations)
    x.min_orthogonality_for_lp_constraints !== Float64(0.05) && PB.encode(e, 115, x.min_orthogonality_for_lp_constraints)
    x.max_cut_rounds_at_level_zero != Int32(1) && PB.encode(e, 154, x.max_cut_rounds_at_level_zero)
    x.max_consecutive_inactive_count != Int32(100) && PB.encode(e, 121, x.max_consecutive_inactive_count)
    x.cut_max_active_count_value !== Float64(1e10) && PB.encode(e, 155, x.cut_max_active_count_value)
    x.cut_active_count_decay !== Float64(0.8) && PB.encode(e, 156, x.cut_active_count_decay)
    x.cut_cleanup_target != Int32(1000) && PB.encode(e, 157, x.cut_cleanup_target)
    x.new_constraints_batch_size != Int32(50) && PB.encode(e, 122, x.new_constraints_batch_size)
    x.exploit_integer_lp_solution != true && PB.encode(e, 94, x.exploit_integer_lp_solution)
    x.exploit_all_lp_solution != true && PB.encode(e, 116, x.exploit_all_lp_solution)
    x.exploit_best_solution != false && PB.encode(e, 130, x.exploit_best_solution)
    x.exploit_relaxation_solution != false && PB.encode(e, 161, x.exploit_relaxation_solution)
    x.exploit_objective != true && PB.encode(e, 131, x.exploit_objective)
    x.detect_linearized_product != false && PB.encode(e, 277, x.detect_linearized_product)
    x.mip_max_bound !== Float64(1e7) && PB.encode(e, 124, x.mip_max_bound)
    x.mip_var_scaling !== Float64(1.0) && PB.encode(e, 125, x.mip_var_scaling)
    x.mip_scale_large_domain != false && PB.encode(e, 225, x.mip_scale_large_domain)
    x.mip_automatically_scale_variables != true && PB.encode(e, 166, x.mip_automatically_scale_variables)
    x.only_solve_ip != false && PB.encode(e, 222, x.only_solve_ip)
    x.mip_wanted_precision !== Float64(1e-6) && PB.encode(e, 126, x.mip_wanted_precision)
    x.mip_max_activity_exponent != Int32(53) && PB.encode(e, 127, x.mip_max_activity_exponent)
    x.mip_check_precision !== Float64(1e-4) && PB.encode(e, 128, x.mip_check_precision)
    x.mip_compute_true_objective_bound != true && PB.encode(e, 198, x.mip_compute_true_objective_bound)
    x.mip_max_valid_magnitude !== Float64(1e20) && PB.encode(e, 199, x.mip_max_valid_magnitude)
    x.mip_treat_high_magnitude_bounds_as_infinity != false && PB.encode(e, 278, x.mip_treat_high_magnitude_bounds_as_infinity)
    x.mip_drop_tolerance !== Float64(1e-16) && PB.encode(e, 232, x.mip_drop_tolerance)
    x.mip_presolve_level != Int32(2) && PB.encode(e, 261, x.mip_presolve_level)
    return position(e.io) - initpos
end
function PB._encoded_size(x::SatParameters)
    encoded_size = 0
    x.name != "" && (encoded_size += PB._encoded_size(x.name, 171))
    x.preferred_variable_order != var"SatParameters.VariableOrder".IN_ORDER && (encoded_size += PB._encoded_size(x.preferred_variable_order, 1))
    x.initial_polarity != var"SatParameters.Polarity".POLARITY_FALSE && (encoded_size += PB._encoded_size(x.initial_polarity, 2))
    x.use_phase_saving != true && (encoded_size += PB._encoded_size(x.use_phase_saving, 44))
    x.polarity_rephase_increment != Int32(1000) && (encoded_size += PB._encoded_size(x.polarity_rephase_increment, 168))
    x.polarity_exploit_ls_hints != false && (encoded_size += PB._encoded_size(x.polarity_exploit_ls_hints, 309))
    x.random_polarity_ratio !== Float64(0.0) && (encoded_size += PB._encoded_size(x.random_polarity_ratio, 45))
    x.random_branches_ratio !== Float64(0.0) && (encoded_size += PB._encoded_size(x.random_branches_ratio, 32))
    x.use_erwa_heuristic != false && (encoded_size += PB._encoded_size(x.use_erwa_heuristic, 75))
    x.initial_variables_activity !== Float64(0.0) && (encoded_size += PB._encoded_size(x.initial_variables_activity, 76))
    x.also_bump_variables_in_conflict_reasons != false && (encoded_size += PB._encoded_size(x.also_bump_variables_in_conflict_reasons, 77))
    x.minimization_algorithm != var"SatParameters.ConflictMinimizationAlgorithm".RECURSIVE && (encoded_size += PB._encoded_size(x.minimization_algorithm, 4))
    x.binary_minimization_algorithm != var"SatParameters.BinaryMinizationAlgorithm".BINARY_MINIMIZATION_FIRST && (encoded_size += PB._encoded_size(x.binary_minimization_algorithm, 34))
    x.subsumption_during_conflict_analysis != true && (encoded_size += PB._encoded_size(x.subsumption_during_conflict_analysis, 56))
    x.clause_cleanup_period != Int32(10000) && (encoded_size += PB._encoded_size(x.clause_cleanup_period, 11))
    x.clause_cleanup_target != Int32(0) && (encoded_size += PB._encoded_size(x.clause_cleanup_target, 13))
    x.clause_cleanup_ratio !== Float64(0.5) && (encoded_size += PB._encoded_size(x.clause_cleanup_ratio, 190))
    x.clause_cleanup_protection != var"SatParameters.ClauseProtection".PROTECTION_NONE && (encoded_size += PB._encoded_size(x.clause_cleanup_protection, 58))
    x.clause_cleanup_lbd_bound != Int32(5) && (encoded_size += PB._encoded_size(x.clause_cleanup_lbd_bound, 59))
    x.clause_cleanup_ordering != var"SatParameters.ClauseOrdering".CLAUSE_ACTIVITY && (encoded_size += PB._encoded_size(x.clause_cleanup_ordering, 60))
    x.pb_cleanup_increment != Int32(200) && (encoded_size += PB._encoded_size(x.pb_cleanup_increment, 46))
    x.pb_cleanup_ratio !== Float64(0.5) && (encoded_size += PB._encoded_size(x.pb_cleanup_ratio, 47))
    x.variable_activity_decay !== Float64(0.8) && (encoded_size += PB._encoded_size(x.variable_activity_decay, 15))
    x.max_variable_activity_value !== Float64(1e100) && (encoded_size += PB._encoded_size(x.max_variable_activity_value, 16))
    x.glucose_max_decay !== Float64(0.95) && (encoded_size += PB._encoded_size(x.glucose_max_decay, 22))
    x.glucose_decay_increment !== Float64(0.01) && (encoded_size += PB._encoded_size(x.glucose_decay_increment, 23))
    x.glucose_decay_increment_period != Int32(5000) && (encoded_size += PB._encoded_size(x.glucose_decay_increment_period, 24))
    x.clause_activity_decay !== Float64(0.999) && (encoded_size += PB._encoded_size(x.clause_activity_decay, 17))
    x.max_clause_activity_value !== Float64(1e20) && (encoded_size += PB._encoded_size(x.max_clause_activity_value, 18))
    !isempty(x.restart_algorithms) && (encoded_size += PB._encoded_size(x.restart_algorithms, 61))
    x.default_restart_algorithms != "LUBY_RESTART,LBD_MOVING_AVERAGE_RESTART,DL_MOVING_AVERAGE_RESTART" && (encoded_size += PB._encoded_size(x.default_restart_algorithms, 70))
    x.restart_period != Int32(50) && (encoded_size += PB._encoded_size(x.restart_period, 30))
    x.restart_running_window_size != Int32(50) && (encoded_size += PB._encoded_size(x.restart_running_window_size, 62))
    x.restart_dl_average_ratio !== Float64(1.0) && (encoded_size += PB._encoded_size(x.restart_dl_average_ratio, 63))
    x.restart_lbd_average_ratio !== Float64(1.0) && (encoded_size += PB._encoded_size(x.restart_lbd_average_ratio, 71))
    x.use_blocking_restart != false && (encoded_size += PB._encoded_size(x.use_blocking_restart, 64))
    x.blocking_restart_window_size != Int32(5000) && (encoded_size += PB._encoded_size(x.blocking_restart_window_size, 65))
    x.blocking_restart_multiplier !== Float64(1.4) && (encoded_size += PB._encoded_size(x.blocking_restart_multiplier, 66))
    x.num_conflicts_before_strategy_changes != Int32(0) && (encoded_size += PB._encoded_size(x.num_conflicts_before_strategy_changes, 68))
    x.strategy_change_increase_ratio !== Float64(0.0) && (encoded_size += PB._encoded_size(x.strategy_change_increase_ratio, 69))
    x.max_time_in_seconds !== Float64(Inf) && (encoded_size += PB._encoded_size(x.max_time_in_seconds, 36))
    x.max_deterministic_time !== Float64(Inf) && (encoded_size += PB._encoded_size(x.max_deterministic_time, 67))
    x.max_num_deterministic_batches != Int32(0) && (encoded_size += PB._encoded_size(x.max_num_deterministic_batches, 291))
    x.max_number_of_conflicts != Int64(9223372036854775807) && (encoded_size += PB._encoded_size(x.max_number_of_conflicts, 37))
    x.max_memory_in_mb != Int64(10000) && (encoded_size += PB._encoded_size(x.max_memory_in_mb, 40))
    x.absolute_gap_limit !== Float64(1e-4) && (encoded_size += PB._encoded_size(x.absolute_gap_limit, 159))
    x.relative_gap_limit !== Float64(0.0) && (encoded_size += PB._encoded_size(x.relative_gap_limit, 160))
    x.random_seed != Int32(1) && (encoded_size += PB._encoded_size(x.random_seed, 31))
    x.permute_variable_randomly != false && (encoded_size += PB._encoded_size(x.permute_variable_randomly, 178))
    x.permute_presolve_constraint_order != false && (encoded_size += PB._encoded_size(x.permute_presolve_constraint_order, 179))
    x.use_absl_random != false && (encoded_size += PB._encoded_size(x.use_absl_random, 180))
    x.log_search_progress != false && (encoded_size += PB._encoded_size(x.log_search_progress, 41))
    x.log_subsolver_statistics != false && (encoded_size += PB._encoded_size(x.log_subsolver_statistics, 189))
    x.log_prefix != "" && (encoded_size += PB._encoded_size(x.log_prefix, 185))
    x.log_to_stdout != true && (encoded_size += PB._encoded_size(x.log_to_stdout, 186))
    x.log_to_response != false && (encoded_size += PB._encoded_size(x.log_to_response, 187))
    x.use_pb_resolution != false && (encoded_size += PB._encoded_size(x.use_pb_resolution, 43))
    x.minimize_reduction_during_pb_resolution != false && (encoded_size += PB._encoded_size(x.minimize_reduction_during_pb_resolution, 48))
    x.count_assumption_levels_in_lbd != true && (encoded_size += PB._encoded_size(x.count_assumption_levels_in_lbd, 49))
    x.presolve_bve_threshold != Int32(500) && (encoded_size += PB._encoded_size(x.presolve_bve_threshold, 54))
    x.filter_sat_postsolve_clauses != false && (encoded_size += PB._encoded_size(x.filter_sat_postsolve_clauses, 324))
    x.presolve_bve_clause_weight != Int32(3) && (encoded_size += PB._encoded_size(x.presolve_bve_clause_weight, 55))
    x.probing_deterministic_time_limit !== Float64(1.0) && (encoded_size += PB._encoded_size(x.probing_deterministic_time_limit, 226))
    x.presolve_probing_deterministic_time_limit !== Float64(30.0) && (encoded_size += PB._encoded_size(x.presolve_probing_deterministic_time_limit, 57))
    x.presolve_blocked_clause != true && (encoded_size += PB._encoded_size(x.presolve_blocked_clause, 88))
    x.presolve_use_bva != true && (encoded_size += PB._encoded_size(x.presolve_use_bva, 72))
    x.presolve_bva_threshold != Int32(1) && (encoded_size += PB._encoded_size(x.presolve_bva_threshold, 73))
    x.max_presolve_iterations != Int32(3) && (encoded_size += PB._encoded_size(x.max_presolve_iterations, 138))
    x.cp_model_presolve != true && (encoded_size += PB._encoded_size(x.cp_model_presolve, 86))
    x.cp_model_probing_level != Int32(2) && (encoded_size += PB._encoded_size(x.cp_model_probing_level, 110))
    x.cp_model_use_sat_presolve != true && (encoded_size += PB._encoded_size(x.cp_model_use_sat_presolve, 93))
    x.remove_fixed_variables_early != true && (encoded_size += PB._encoded_size(x.remove_fixed_variables_early, 310))
    x.detect_table_with_cost != false && (encoded_size += PB._encoded_size(x.detect_table_with_cost, 216))
    x.table_compression_level != Int32(2) && (encoded_size += PB._encoded_size(x.table_compression_level, 217))
    x.expand_alldiff_constraints != false && (encoded_size += PB._encoded_size(x.expand_alldiff_constraints, 170))
    x.max_alldiff_domain_size != Int32(256) && (encoded_size += PB._encoded_size(x.max_alldiff_domain_size, 320))
    x.expand_reservoir_constraints != true && (encoded_size += PB._encoded_size(x.expand_reservoir_constraints, 182))
    x.expand_reservoir_using_circuit != false && (encoded_size += PB._encoded_size(x.expand_reservoir_using_circuit, 288))
    x.encode_cumulative_as_reservoir != false && (encoded_size += PB._encoded_size(x.encode_cumulative_as_reservoir, 287))
    x.max_lin_max_size_for_expansion != Int32(0) && (encoded_size += PB._encoded_size(x.max_lin_max_size_for_expansion, 280))
    x.disable_constraint_expansion != false && (encoded_size += PB._encoded_size(x.disable_constraint_expansion, 181))
    x.encode_complex_linear_constraint_with_integer != false && (encoded_size += PB._encoded_size(x.encode_complex_linear_constraint_with_integer, 223))
    x.merge_no_overlap_work_limit !== Float64(1e12) && (encoded_size += PB._encoded_size(x.merge_no_overlap_work_limit, 145))
    x.merge_at_most_one_work_limit !== Float64(1e8) && (encoded_size += PB._encoded_size(x.merge_at_most_one_work_limit, 146))
    x.presolve_substitution_level != Int32(1) && (encoded_size += PB._encoded_size(x.presolve_substitution_level, 147))
    x.presolve_extract_integer_enforcement != false && (encoded_size += PB._encoded_size(x.presolve_extract_integer_enforcement, 174))
    x.presolve_inclusion_work_limit != Int64(100000000) && (encoded_size += PB._encoded_size(x.presolve_inclusion_work_limit, 201))
    x.ignore_names != true && (encoded_size += PB._encoded_size(x.ignore_names, 202))
    x.infer_all_diffs != true && (encoded_size += PB._encoded_size(x.infer_all_diffs, 233))
    x.find_big_linear_overlap != true && (encoded_size += PB._encoded_size(x.find_big_linear_overlap, 234))
    x.use_sat_inprocessing != true && (encoded_size += PB._encoded_size(x.use_sat_inprocessing, 163))
    x.inprocessing_dtime_ratio !== Float64(0.2) && (encoded_size += PB._encoded_size(x.inprocessing_dtime_ratio, 273))
    x.inprocessing_probing_dtime !== Float64(1.0) && (encoded_size += PB._encoded_size(x.inprocessing_probing_dtime, 274))
    x.inprocessing_minimization_dtime !== Float64(1.0) && (encoded_size += PB._encoded_size(x.inprocessing_minimization_dtime, 275))
    x.inprocessing_minimization_use_conflict_analysis != true && (encoded_size += PB._encoded_size(x.inprocessing_minimization_use_conflict_analysis, 297))
    x.inprocessing_minimization_use_all_orderings != false && (encoded_size += PB._encoded_size(x.inprocessing_minimization_use_all_orderings, 298))
    x.num_workers != Int32(0) && (encoded_size += PB._encoded_size(x.num_workers, 206))
    x.num_search_workers != Int32(0) && (encoded_size += PB._encoded_size(x.num_search_workers, 100))
    x.num_full_subsolvers != Int32(0) && (encoded_size += PB._encoded_size(x.num_full_subsolvers, 294))
    !isempty(x.subsolvers) && (encoded_size += PB._encoded_size(x.subsolvers, 207))
    !isempty(x.extra_subsolvers) && (encoded_size += PB._encoded_size(x.extra_subsolvers, 219))
    !isempty(x.ignore_subsolvers) && (encoded_size += PB._encoded_size(x.ignore_subsolvers, 209))
    !isempty(x.filter_subsolvers) && (encoded_size += PB._encoded_size(x.filter_subsolvers, 293))
    !isempty(x.subsolver_params) && (encoded_size += PB._encoded_size(x.subsolver_params, 210))
    x.interleave_search != false && (encoded_size += PB._encoded_size(x.interleave_search, 136))
    x.interleave_batch_size != Int32(0) && (encoded_size += PB._encoded_size(x.interleave_batch_size, 134))
    x.share_objective_bounds != true && (encoded_size += PB._encoded_size(x.share_objective_bounds, 113))
    x.share_level_zero_bounds != true && (encoded_size += PB._encoded_size(x.share_level_zero_bounds, 114))
    x.share_binary_clauses != true && (encoded_size += PB._encoded_size(x.share_binary_clauses, 203))
    x.share_glue_clauses != false && (encoded_size += PB._encoded_size(x.share_glue_clauses, 285))
    x.minimize_shared_clauses != true && (encoded_size += PB._encoded_size(x.minimize_shared_clauses, 300))
    x.share_glue_clauses_dtime !== Float64(1.0) && (encoded_size += PB._encoded_size(x.share_glue_clauses_dtime, 322))
    x.debug_postsolve_with_full_solver != false && (encoded_size += PB._encoded_size(x.debug_postsolve_with_full_solver, 162))
    x.debug_max_num_presolve_operations != Int32(0) && (encoded_size += PB._encoded_size(x.debug_max_num_presolve_operations, 151))
    x.debug_crash_on_bad_hint != false && (encoded_size += PB._encoded_size(x.debug_crash_on_bad_hint, 195))
    x.debug_crash_if_presolve_breaks_hint != false && (encoded_size += PB._encoded_size(x.debug_crash_if_presolve_breaks_hint, 306))
    x.use_optimization_hints != true && (encoded_size += PB._encoded_size(x.use_optimization_hints, 35))
    x.core_minimization_level != Int32(2) && (encoded_size += PB._encoded_size(x.core_minimization_level, 50))
    x.find_multiple_cores != true && (encoded_size += PB._encoded_size(x.find_multiple_cores, 84))
    x.cover_optimization != true && (encoded_size += PB._encoded_size(x.cover_optimization, 89))
    x.max_sat_assumption_order != var"SatParameters.MaxSatAssumptionOrder".DEFAULT_ASSUMPTION_ORDER && (encoded_size += PB._encoded_size(x.max_sat_assumption_order, 51))
    x.max_sat_reverse_assumption_order != false && (encoded_size += PB._encoded_size(x.max_sat_reverse_assumption_order, 52))
    x.max_sat_stratification != var"SatParameters.MaxSatStratificationAlgorithm".STRATIFICATION_DESCENT && (encoded_size += PB._encoded_size(x.max_sat_stratification, 53))
    x.propagation_loop_detection_factor !== Float64(10.0) && (encoded_size += PB._encoded_size(x.propagation_loop_detection_factor, 221))
    x.use_precedences_in_disjunctive_constraint != true && (encoded_size += PB._encoded_size(x.use_precedences_in_disjunctive_constraint, 74))
    x.max_size_to_create_precedence_literals_in_disjunctive != Int32(60) && (encoded_size += PB._encoded_size(x.max_size_to_create_precedence_literals_in_disjunctive, 229))
    x.use_strong_propagation_in_disjunctive != false && (encoded_size += PB._encoded_size(x.use_strong_propagation_in_disjunctive, 230))
    x.use_dynamic_precedence_in_disjunctive != false && (encoded_size += PB._encoded_size(x.use_dynamic_precedence_in_disjunctive, 263))
    x.use_dynamic_precedence_in_cumulative != false && (encoded_size += PB._encoded_size(x.use_dynamic_precedence_in_cumulative, 268))
    x.use_overload_checker_in_cumulative != false && (encoded_size += PB._encoded_size(x.use_overload_checker_in_cumulative, 78))
    x.use_conservative_scale_overload_checker != false && (encoded_size += PB._encoded_size(x.use_conservative_scale_overload_checker, 286))
    x.use_timetable_edge_finding_in_cumulative != false && (encoded_size += PB._encoded_size(x.use_timetable_edge_finding_in_cumulative, 79))
    x.max_num_intervals_for_timetable_edge_finding != Int32(100) && (encoded_size += PB._encoded_size(x.max_num_intervals_for_timetable_edge_finding, 260))
    x.use_hard_precedences_in_cumulative != false && (encoded_size += PB._encoded_size(x.use_hard_precedences_in_cumulative, 215))
    x.exploit_all_precedences != false && (encoded_size += PB._encoded_size(x.exploit_all_precedences, 220))
    x.use_disjunctive_constraint_in_cumulative != true && (encoded_size += PB._encoded_size(x.use_disjunctive_constraint_in_cumulative, 80))
    x.no_overlap_2d_boolean_relations_limit != Int32(10) && (encoded_size += PB._encoded_size(x.no_overlap_2d_boolean_relations_limit, 321))
    x.use_timetabling_in_no_overlap_2d != false && (encoded_size += PB._encoded_size(x.use_timetabling_in_no_overlap_2d, 200))
    x.use_energetic_reasoning_in_no_overlap_2d != false && (encoded_size += PB._encoded_size(x.use_energetic_reasoning_in_no_overlap_2d, 213))
    x.use_area_energetic_reasoning_in_no_overlap_2d != false && (encoded_size += PB._encoded_size(x.use_area_energetic_reasoning_in_no_overlap_2d, 271))
    x.use_try_edge_reasoning_in_no_overlap_2d != false && (encoded_size += PB._encoded_size(x.use_try_edge_reasoning_in_no_overlap_2d, 299))
    x.max_pairs_pairwise_reasoning_in_no_overlap_2d != Int32(1250) && (encoded_size += PB._encoded_size(x.max_pairs_pairwise_reasoning_in_no_overlap_2d, 276))
    x.maximum_regions_to_split_in_disconnected_no_overlap_2d != Int32(0) && (encoded_size += PB._encoded_size(x.maximum_regions_to_split_in_disconnected_no_overlap_2d, 315))
    x.use_linear3_for_no_overlap_2d_precedences != true && (encoded_size += PB._encoded_size(x.use_linear3_for_no_overlap_2d_precedences, 323))
    x.use_dual_scheduling_heuristics != true && (encoded_size += PB._encoded_size(x.use_dual_scheduling_heuristics, 214))
    x.use_all_different_for_circuit != false && (encoded_size += PB._encoded_size(x.use_all_different_for_circuit, 311))
    x.routing_cut_subset_size_for_binary_relation_bound != Int32(0) && (encoded_size += PB._encoded_size(x.routing_cut_subset_size_for_binary_relation_bound, 312))
    x.routing_cut_subset_size_for_tight_binary_relation_bound != Int32(0) && (encoded_size += PB._encoded_size(x.routing_cut_subset_size_for_tight_binary_relation_bound, 313))
    x.routing_cut_subset_size_for_exact_binary_relation_bound != Int32(8) && (encoded_size += PB._encoded_size(x.routing_cut_subset_size_for_exact_binary_relation_bound, 316))
    x.routing_cut_subset_size_for_shortest_paths_bound != Int32(8) && (encoded_size += PB._encoded_size(x.routing_cut_subset_size_for_shortest_paths_bound, 318))
    x.routing_cut_dp_effort !== Float64(1e7) && (encoded_size += PB._encoded_size(x.routing_cut_dp_effort, 314))
    x.routing_cut_max_infeasible_path_length != Int32(6) && (encoded_size += PB._encoded_size(x.routing_cut_max_infeasible_path_length, 317))
    x.search_branching != var"SatParameters.SearchBranching".AUTOMATIC_SEARCH && (encoded_size += PB._encoded_size(x.search_branching, 82))
    x.hint_conflict_limit != Int32(10) && (encoded_size += PB._encoded_size(x.hint_conflict_limit, 153))
    x.repair_hint != false && (encoded_size += PB._encoded_size(x.repair_hint, 167))
    x.fix_variables_to_their_hinted_value != false && (encoded_size += PB._encoded_size(x.fix_variables_to_their_hinted_value, 192))
    x.use_probing_search != false && (encoded_size += PB._encoded_size(x.use_probing_search, 176))
    x.use_extended_probing != true && (encoded_size += PB._encoded_size(x.use_extended_probing, 269))
    x.probing_num_combinations_limit != Int32(20000) && (encoded_size += PB._encoded_size(x.probing_num_combinations_limit, 272))
    x.shaving_deterministic_time_in_probing_search !== Float64(0.001) && (encoded_size += PB._encoded_size(x.shaving_deterministic_time_in_probing_search, 204))
    x.shaving_search_deterministic_time !== Float64(0.1) && (encoded_size += PB._encoded_size(x.shaving_search_deterministic_time, 205))
    x.shaving_search_threshold != Int64(64) && (encoded_size += PB._encoded_size(x.shaving_search_threshold, 290))
    x.use_objective_lb_search != false && (encoded_size += PB._encoded_size(x.use_objective_lb_search, 228))
    x.use_objective_shaving_search != false && (encoded_size += PB._encoded_size(x.use_objective_shaving_search, 253))
    x.variables_shaving_level != Int32(-1) && (encoded_size += PB._encoded_size(x.variables_shaving_level, 289))
    x.pseudo_cost_reliability_threshold != Int64(100) && (encoded_size += PB._encoded_size(x.pseudo_cost_reliability_threshold, 123))
    x.optimize_with_core != false && (encoded_size += PB._encoded_size(x.optimize_with_core, 83))
    x.optimize_with_lb_tree_search != false && (encoded_size += PB._encoded_size(x.optimize_with_lb_tree_search, 188))
    x.save_lp_basis_in_lb_tree_search != false && (encoded_size += PB._encoded_size(x.save_lp_basis_in_lb_tree_search, 284))
    x.binary_search_num_conflicts != Int32(-1) && (encoded_size += PB._encoded_size(x.binary_search_num_conflicts, 99))
    x.optimize_with_max_hs != false && (encoded_size += PB._encoded_size(x.optimize_with_max_hs, 85))
    x.use_feasibility_jump != true && (encoded_size += PB._encoded_size(x.use_feasibility_jump, 265))
    x.use_ls_only != false && (encoded_size += PB._encoded_size(x.use_ls_only, 240))
    x.feasibility_jump_decay !== Float64(0.95) && (encoded_size += PB._encoded_size(x.feasibility_jump_decay, 242))
    x.feasibility_jump_linearization_level != Int32(2) && (encoded_size += PB._encoded_size(x.feasibility_jump_linearization_level, 257))
    x.feasibility_jump_restart_factor != Int32(1) && (encoded_size += PB._encoded_size(x.feasibility_jump_restart_factor, 258))
    x.feasibility_jump_batch_dtime !== Float64(0.1) && (encoded_size += PB._encoded_size(x.feasibility_jump_batch_dtime, 292))
    x.feasibility_jump_var_randomization_probability !== Float64(0.05) && (encoded_size += PB._encoded_size(x.feasibility_jump_var_randomization_probability, 247))
    x.feasibility_jump_var_perburbation_range_ratio !== Float64(0.2) && (encoded_size += PB._encoded_size(x.feasibility_jump_var_perburbation_range_ratio, 248))
    x.feasibility_jump_enable_restarts != true && (encoded_size += PB._encoded_size(x.feasibility_jump_enable_restarts, 250))
    x.feasibility_jump_max_expanded_constraint_size != Int32(500) && (encoded_size += PB._encoded_size(x.feasibility_jump_max_expanded_constraint_size, 264))
    x.num_violation_ls != Int32(0) && (encoded_size += PB._encoded_size(x.num_violation_ls, 244))
    x.violation_ls_perturbation_period != Int32(100) && (encoded_size += PB._encoded_size(x.violation_ls_perturbation_period, 249))
    x.violation_ls_compound_move_probability !== Float64(0.5) && (encoded_size += PB._encoded_size(x.violation_ls_compound_move_probability, 259))
    x.shared_tree_num_workers != Int32(0) && (encoded_size += PB._encoded_size(x.shared_tree_num_workers, 235))
    x.use_shared_tree_search != false && (encoded_size += PB._encoded_size(x.use_shared_tree_search, 236))
    x.shared_tree_worker_min_restarts_per_subtree != Int32(1) && (encoded_size += PB._encoded_size(x.shared_tree_worker_min_restarts_per_subtree, 282))
    x.shared_tree_worker_enable_trail_sharing != true && (encoded_size += PB._encoded_size(x.shared_tree_worker_enable_trail_sharing, 295))
    x.shared_tree_worker_enable_phase_sharing != true && (encoded_size += PB._encoded_size(x.shared_tree_worker_enable_phase_sharing, 304))
    x.shared_tree_open_leaves_per_worker !== Float64(2.0) && (encoded_size += PB._encoded_size(x.shared_tree_open_leaves_per_worker, 281))
    x.shared_tree_max_nodes_per_worker != Int32(10000) && (encoded_size += PB._encoded_size(x.shared_tree_max_nodes_per_worker, 238))
    x.shared_tree_split_strategy != var"SatParameters.SharedTreeSplitStrategy".SPLIT_STRATEGY_AUTO && (encoded_size += PB._encoded_size(x.shared_tree_split_strategy, 239))
    x.shared_tree_balance_tolerance != Int32(1) && (encoded_size += PB._encoded_size(x.shared_tree_balance_tolerance, 305))
    x.enumerate_all_solutions != false && (encoded_size += PB._encoded_size(x.enumerate_all_solutions, 87))
    x.keep_all_feasible_solutions_in_presolve != false && (encoded_size += PB._encoded_size(x.keep_all_feasible_solutions_in_presolve, 173))
    x.fill_tightened_domains_in_response != false && (encoded_size += PB._encoded_size(x.fill_tightened_domains_in_response, 132))
    x.fill_additional_solutions_in_response != false && (encoded_size += PB._encoded_size(x.fill_additional_solutions_in_response, 194))
    x.instantiate_all_variables != true && (encoded_size += PB._encoded_size(x.instantiate_all_variables, 106))
    x.auto_detect_greater_than_at_least_one_of != true && (encoded_size += PB._encoded_size(x.auto_detect_greater_than_at_least_one_of, 95))
    x.stop_after_first_solution != false && (encoded_size += PB._encoded_size(x.stop_after_first_solution, 98))
    x.stop_after_presolve != false && (encoded_size += PB._encoded_size(x.stop_after_presolve, 149))
    x.stop_after_root_propagation != false && (encoded_size += PB._encoded_size(x.stop_after_root_propagation, 252))
    x.lns_initial_difficulty !== Float64(0.5) && (encoded_size += PB._encoded_size(x.lns_initial_difficulty, 307))
    x.lns_initial_deterministic_limit !== Float64(0.1) && (encoded_size += PB._encoded_size(x.lns_initial_deterministic_limit, 308))
    x.use_lns != true && (encoded_size += PB._encoded_size(x.use_lns, 283))
    x.use_lns_only != false && (encoded_size += PB._encoded_size(x.use_lns_only, 101))
    x.solution_pool_size != Int32(3) && (encoded_size += PB._encoded_size(x.solution_pool_size, 193))
    x.use_rins_lns != true && (encoded_size += PB._encoded_size(x.use_rins_lns, 129))
    x.use_feasibility_pump != true && (encoded_size += PB._encoded_size(x.use_feasibility_pump, 164))
    x.use_lb_relax_lns != true && (encoded_size += PB._encoded_size(x.use_lb_relax_lns, 255))
    x.lb_relax_num_workers_threshold != Int32(16) && (encoded_size += PB._encoded_size(x.lb_relax_num_workers_threshold, 296))
    x.fp_rounding != var"SatParameters.FPRoundingMethod".PROPAGATION_ASSISTED && (encoded_size += PB._encoded_size(x.fp_rounding, 165))
    x.diversify_lns_params != false && (encoded_size += PB._encoded_size(x.diversify_lns_params, 137))
    x.randomize_search != false && (encoded_size += PB._encoded_size(x.randomize_search, 103))
    x.search_random_variable_pool_size != Int64(0) && (encoded_size += PB._encoded_size(x.search_random_variable_pool_size, 104))
    x.push_all_tasks_toward_start != false && (encoded_size += PB._encoded_size(x.push_all_tasks_toward_start, 262))
    x.use_optional_variables != false && (encoded_size += PB._encoded_size(x.use_optional_variables, 108))
    x.use_exact_lp_reason != true && (encoded_size += PB._encoded_size(x.use_exact_lp_reason, 109))
    x.use_combined_no_overlap != false && (encoded_size += PB._encoded_size(x.use_combined_no_overlap, 133))
    x.at_most_one_max_expansion_size != Int32(3) && (encoded_size += PB._encoded_size(x.at_most_one_max_expansion_size, 270))
    x.catch_sigint_signal != true && (encoded_size += PB._encoded_size(x.catch_sigint_signal, 135))
    x.use_implied_bounds != true && (encoded_size += PB._encoded_size(x.use_implied_bounds, 144))
    x.polish_lp_solution != false && (encoded_size += PB._encoded_size(x.polish_lp_solution, 175))
    x.lp_primal_tolerance !== Float64(1e-7) && (encoded_size += PB._encoded_size(x.lp_primal_tolerance, 266))
    x.lp_dual_tolerance !== Float64(1e-7) && (encoded_size += PB._encoded_size(x.lp_dual_tolerance, 267))
    x.convert_intervals != true && (encoded_size += PB._encoded_size(x.convert_intervals, 177))
    x.symmetry_level != Int32(2) && (encoded_size += PB._encoded_size(x.symmetry_level, 183))
    x.use_symmetry_in_lp != false && (encoded_size += PB._encoded_size(x.use_symmetry_in_lp, 301))
    x.keep_symmetry_in_presolve != false && (encoded_size += PB._encoded_size(x.keep_symmetry_in_presolve, 303))
    x.symmetry_detection_deterministic_time_limit !== Float64(1.0) && (encoded_size += PB._encoded_size(x.symmetry_detection_deterministic_time_limit, 302))
    x.new_linear_propagation != true && (encoded_size += PB._encoded_size(x.new_linear_propagation, 224))
    x.linear_split_size != Int32(100) && (encoded_size += PB._encoded_size(x.linear_split_size, 256))
    x.linearization_level != Int32(1) && (encoded_size += PB._encoded_size(x.linearization_level, 90))
    x.boolean_encoding_level != Int32(1) && (encoded_size += PB._encoded_size(x.boolean_encoding_level, 107))
    x.max_domain_size_when_encoding_eq_neq_constraints != Int32(16) && (encoded_size += PB._encoded_size(x.max_domain_size_when_encoding_eq_neq_constraints, 191))
    x.max_num_cuts != Int32(10000) && (encoded_size += PB._encoded_size(x.max_num_cuts, 91))
    x.cut_level != Int32(1) && (encoded_size += PB._encoded_size(x.cut_level, 196))
    x.only_add_cuts_at_level_zero != false && (encoded_size += PB._encoded_size(x.only_add_cuts_at_level_zero, 92))
    x.add_objective_cut != false && (encoded_size += PB._encoded_size(x.add_objective_cut, 197))
    x.add_cg_cuts != true && (encoded_size += PB._encoded_size(x.add_cg_cuts, 117))
    x.add_mir_cuts != true && (encoded_size += PB._encoded_size(x.add_mir_cuts, 120))
    x.add_zero_half_cuts != true && (encoded_size += PB._encoded_size(x.add_zero_half_cuts, 169))
    x.add_clique_cuts != true && (encoded_size += PB._encoded_size(x.add_clique_cuts, 172))
    x.add_rlt_cuts != true && (encoded_size += PB._encoded_size(x.add_rlt_cuts, 279))
    x.max_all_diff_cut_size != Int32(64) && (encoded_size += PB._encoded_size(x.max_all_diff_cut_size, 148))
    x.add_lin_max_cuts != true && (encoded_size += PB._encoded_size(x.add_lin_max_cuts, 152))
    x.max_integer_rounding_scaling != Int32(600) && (encoded_size += PB._encoded_size(x.max_integer_rounding_scaling, 119))
    x.add_lp_constraints_lazily != true && (encoded_size += PB._encoded_size(x.add_lp_constraints_lazily, 112))
    x.root_lp_iterations != Int32(2000) && (encoded_size += PB._encoded_size(x.root_lp_iterations, 227))
    x.min_orthogonality_for_lp_constraints !== Float64(0.05) && (encoded_size += PB._encoded_size(x.min_orthogonality_for_lp_constraints, 115))
    x.max_cut_rounds_at_level_zero != Int32(1) && (encoded_size += PB._encoded_size(x.max_cut_rounds_at_level_zero, 154))
    x.max_consecutive_inactive_count != Int32(100) && (encoded_size += PB._encoded_size(x.max_consecutive_inactive_count, 121))
    x.cut_max_active_count_value !== Float64(1e10) && (encoded_size += PB._encoded_size(x.cut_max_active_count_value, 155))
    x.cut_active_count_decay !== Float64(0.8) && (encoded_size += PB._encoded_size(x.cut_active_count_decay, 156))
    x.cut_cleanup_target != Int32(1000) && (encoded_size += PB._encoded_size(x.cut_cleanup_target, 157))
    x.new_constraints_batch_size != Int32(50) && (encoded_size += PB._encoded_size(x.new_constraints_batch_size, 122))
    x.exploit_integer_lp_solution != true && (encoded_size += PB._encoded_size(x.exploit_integer_lp_solution, 94))
    x.exploit_all_lp_solution != true && (encoded_size += PB._encoded_size(x.exploit_all_lp_solution, 116))
    x.exploit_best_solution != false && (encoded_size += PB._encoded_size(x.exploit_best_solution, 130))
    x.exploit_relaxation_solution != false && (encoded_size += PB._encoded_size(x.exploit_relaxation_solution, 161))
    x.exploit_objective != true && (encoded_size += PB._encoded_size(x.exploit_objective, 131))
    x.detect_linearized_product != false && (encoded_size += PB._encoded_size(x.detect_linearized_product, 277))
    x.mip_max_bound !== Float64(1e7) && (encoded_size += PB._encoded_size(x.mip_max_bound, 124))
    x.mip_var_scaling !== Float64(1.0) && (encoded_size += PB._encoded_size(x.mip_var_scaling, 125))
    x.mip_scale_large_domain != false && (encoded_size += PB._encoded_size(x.mip_scale_large_domain, 225))
    x.mip_automatically_scale_variables != true && (encoded_size += PB._encoded_size(x.mip_automatically_scale_variables, 166))
    x.only_solve_ip != false && (encoded_size += PB._encoded_size(x.only_solve_ip, 222))
    x.mip_wanted_precision !== Float64(1e-6) && (encoded_size += PB._encoded_size(x.mip_wanted_precision, 126))
    x.mip_max_activity_exponent != Int32(53) && (encoded_size += PB._encoded_size(x.mip_max_activity_exponent, 127))
    x.mip_check_precision !== Float64(1e-4) && (encoded_size += PB._encoded_size(x.mip_check_precision, 128))
    x.mip_compute_true_objective_bound != true && (encoded_size += PB._encoded_size(x.mip_compute_true_objective_bound, 198))
    x.mip_max_valid_magnitude !== Float64(1e20) && (encoded_size += PB._encoded_size(x.mip_max_valid_magnitude, 199))
    x.mip_treat_high_magnitude_bounds_as_infinity != false && (encoded_size += PB._encoded_size(x.mip_treat_high_magnitude_bounds_as_infinity, 278))
    x.mip_drop_tolerance !== Float64(1e-16) && (encoded_size += PB._encoded_size(x.mip_drop_tolerance, 232))
    x.mip_presolve_level != Int32(2) && (encoded_size += PB._encoded_size(x.mip_presolve_level, 261))
    return encoded_size
end
