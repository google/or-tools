# Autogenerated using ProtoBuf.jl v1.1.1 on 2025-07-02T15:45:01.455
# original file: /usr/local/google/home/tcuvelier/.julia/artifacts/502992654d3e610bc079dfc8ac9e663bff6f3a24/include/ortools/constraint_solver/solver_parameters.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"ConstraintSolverParameters.TrailCompression", ConstraintSolverParameters


@enumx var"ConstraintSolverParameters.TrailCompression" NO_COMPRESSION=0 COMPRESS_WITH_ZLIB=1

struct ConstraintSolverParameters
    compress_trail::var"ConstraintSolverParameters.TrailCompression".T
    trail_block_size::Int32
    array_split_size::Int32
    store_names::Bool
    name_cast_variables::Bool
    name_all_variables::Bool
    profile_propagation::Bool
    profile_file::String
    profile_local_search::Bool
    print_local_search_profile::Bool
    trace_propagation::Bool
    trace_search::Bool
    print_model::Bool
    print_model_stats::Bool
    print_added_constraints::Bool
    disable_solve::Bool
    use_small_table::Bool
    use_cumulative_edge_finder::Bool
    use_cumulative_time_table::Bool
    use_cumulative_time_table_sync::Bool
    use_sequence_high_demand_tasks::Bool
    use_all_possible_disjunctions::Bool
    max_edge_finder_size::Int32
    diffn_use_cumulative::Bool
    use_element_rmq::Bool
    skip_locally_optimal_paths::Bool
    check_solution_period::Int32
end
PB.reserved_fields(::Type{ConstraintSolverParameters}) = (names = String[], numbers = Union{Int,UnitRange{Int}}[100, 102, 103, 104])
PB.default_values(::Type{ConstraintSolverParameters}) = (;compress_trail = var"ConstraintSolverParameters.TrailCompression".NO_COMPRESSION, trail_block_size = zero(Int32), array_split_size = zero(Int32), store_names = false, name_cast_variables = false, name_all_variables = false, profile_propagation = false, profile_file = "", profile_local_search = false, print_local_search_profile = false, trace_propagation = false, trace_search = false, print_model = false, print_model_stats = false, print_added_constraints = false, disable_solve = false, use_small_table = false, use_cumulative_edge_finder = false, use_cumulative_time_table = false, use_cumulative_time_table_sync = false, use_sequence_high_demand_tasks = false, use_all_possible_disjunctions = false, max_edge_finder_size = zero(Int32), diffn_use_cumulative = false, use_element_rmq = false, skip_locally_optimal_paths = false, check_solution_period = zero(Int32))
PB.field_numbers(::Type{ConstraintSolverParameters}) = (;compress_trail = 1, trail_block_size = 2, array_split_size = 3, store_names = 4, name_cast_variables = 5, name_all_variables = 6, profile_propagation = 7, profile_file = 8, profile_local_search = 16, print_local_search_profile = 17, trace_propagation = 9, trace_search = 10, print_model = 11, print_model_stats = 12, print_added_constraints = 13, disable_solve = 15, use_small_table = 101, use_cumulative_edge_finder = 105, use_cumulative_time_table = 106, use_cumulative_time_table_sync = 112, use_sequence_high_demand_tasks = 107, use_all_possible_disjunctions = 108, max_edge_finder_size = 109, diffn_use_cumulative = 110, use_element_rmq = 111, skip_locally_optimal_paths = 113, check_solution_period = 114)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ConstraintSolverParameters})
    compress_trail = var"ConstraintSolverParameters.TrailCompression".NO_COMPRESSION
    trail_block_size = zero(Int32)
    array_split_size = zero(Int32)
    store_names = false
    name_cast_variables = false
    name_all_variables = false
    profile_propagation = false
    profile_file = ""
    profile_local_search = false
    print_local_search_profile = false
    trace_propagation = false
    trace_search = false
    print_model = false
    print_model_stats = false
    print_added_constraints = false
    disable_solve = false
    use_small_table = false
    use_cumulative_edge_finder = false
    use_cumulative_time_table = false
    use_cumulative_time_table_sync = false
    use_sequence_high_demand_tasks = false
    use_all_possible_disjunctions = false
    max_edge_finder_size = zero(Int32)
    diffn_use_cumulative = false
    use_element_rmq = false
    skip_locally_optimal_paths = false
    check_solution_period = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            compress_trail = PB.decode(d, var"ConstraintSolverParameters.TrailCompression".T)
        elseif field_number == 2
            trail_block_size = PB.decode(d, Int32)
        elseif field_number == 3
            array_split_size = PB.decode(d, Int32)
        elseif field_number == 4
            store_names = PB.decode(d, Bool)
        elseif field_number == 5
            name_cast_variables = PB.decode(d, Bool)
        elseif field_number == 6
            name_all_variables = PB.decode(d, Bool)
        elseif field_number == 7
            profile_propagation = PB.decode(d, Bool)
        elseif field_number == 8
            profile_file = PB.decode(d, String)
        elseif field_number == 16
            profile_local_search = PB.decode(d, Bool)
        elseif field_number == 17
            print_local_search_profile = PB.decode(d, Bool)
        elseif field_number == 9
            trace_propagation = PB.decode(d, Bool)
        elseif field_number == 10
            trace_search = PB.decode(d, Bool)
        elseif field_number == 11
            print_model = PB.decode(d, Bool)
        elseif field_number == 12
            print_model_stats = PB.decode(d, Bool)
        elseif field_number == 13
            print_added_constraints = PB.decode(d, Bool)
        elseif field_number == 15
            disable_solve = PB.decode(d, Bool)
        elseif field_number == 101
            use_small_table = PB.decode(d, Bool)
        elseif field_number == 105
            use_cumulative_edge_finder = PB.decode(d, Bool)
        elseif field_number == 106
            use_cumulative_time_table = PB.decode(d, Bool)
        elseif field_number == 112
            use_cumulative_time_table_sync = PB.decode(d, Bool)
        elseif field_number == 107
            use_sequence_high_demand_tasks = PB.decode(d, Bool)
        elseif field_number == 108
            use_all_possible_disjunctions = PB.decode(d, Bool)
        elseif field_number == 109
            max_edge_finder_size = PB.decode(d, Int32)
        elseif field_number == 110
            diffn_use_cumulative = PB.decode(d, Bool)
        elseif field_number == 111
            use_element_rmq = PB.decode(d, Bool)
        elseif field_number == 113
            skip_locally_optimal_paths = PB.decode(d, Bool)
        elseif field_number == 114
            check_solution_period = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return ConstraintSolverParameters(compress_trail, trail_block_size, array_split_size, store_names, name_cast_variables, name_all_variables, profile_propagation, profile_file, profile_local_search, print_local_search_profile, trace_propagation, trace_search, print_model, print_model_stats, print_added_constraints, disable_solve, use_small_table, use_cumulative_edge_finder, use_cumulative_time_table, use_cumulative_time_table_sync, use_sequence_high_demand_tasks, use_all_possible_disjunctions, max_edge_finder_size, diffn_use_cumulative, use_element_rmq, skip_locally_optimal_paths, check_solution_period)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ConstraintSolverParameters)
    initpos = position(e.io)
    x.compress_trail != var"ConstraintSolverParameters.TrailCompression".NO_COMPRESSION && PB.encode(e, 1, x.compress_trail)
    x.trail_block_size != zero(Int32) && PB.encode(e, 2, x.trail_block_size)
    x.array_split_size != zero(Int32) && PB.encode(e, 3, x.array_split_size)
    x.store_names != false && PB.encode(e, 4, x.store_names)
    x.name_cast_variables != false && PB.encode(e, 5, x.name_cast_variables)
    x.name_all_variables != false && PB.encode(e, 6, x.name_all_variables)
    x.profile_propagation != false && PB.encode(e, 7, x.profile_propagation)
    !isempty(x.profile_file) && PB.encode(e, 8, x.profile_file)
    x.profile_local_search != false && PB.encode(e, 16, x.profile_local_search)
    x.print_local_search_profile != false && PB.encode(e, 17, x.print_local_search_profile)
    x.trace_propagation != false && PB.encode(e, 9, x.trace_propagation)
    x.trace_search != false && PB.encode(e, 10, x.trace_search)
    x.print_model != false && PB.encode(e, 11, x.print_model)
    x.print_model_stats != false && PB.encode(e, 12, x.print_model_stats)
    x.print_added_constraints != false && PB.encode(e, 13, x.print_added_constraints)
    x.disable_solve != false && PB.encode(e, 15, x.disable_solve)
    x.use_small_table != false && PB.encode(e, 101, x.use_small_table)
    x.use_cumulative_edge_finder != false && PB.encode(e, 105, x.use_cumulative_edge_finder)
    x.use_cumulative_time_table != false && PB.encode(e, 106, x.use_cumulative_time_table)
    x.use_cumulative_time_table_sync != false && PB.encode(e, 112, x.use_cumulative_time_table_sync)
    x.use_sequence_high_demand_tasks != false && PB.encode(e, 107, x.use_sequence_high_demand_tasks)
    x.use_all_possible_disjunctions != false && PB.encode(e, 108, x.use_all_possible_disjunctions)
    x.max_edge_finder_size != zero(Int32) && PB.encode(e, 109, x.max_edge_finder_size)
    x.diffn_use_cumulative != false && PB.encode(e, 110, x.diffn_use_cumulative)
    x.use_element_rmq != false && PB.encode(e, 111, x.use_element_rmq)
    x.skip_locally_optimal_paths != false && PB.encode(e, 113, x.skip_locally_optimal_paths)
    x.check_solution_period != zero(Int32) && PB.encode(e, 114, x.check_solution_period)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ConstraintSolverParameters)
    encoded_size = 0
    x.compress_trail != var"ConstraintSolverParameters.TrailCompression".NO_COMPRESSION && (encoded_size += PB._encoded_size(x.compress_trail, 1))
    x.trail_block_size != zero(Int32) && (encoded_size += PB._encoded_size(x.trail_block_size, 2))
    x.array_split_size != zero(Int32) && (encoded_size += PB._encoded_size(x.array_split_size, 3))
    x.store_names != false && (encoded_size += PB._encoded_size(x.store_names, 4))
    x.name_cast_variables != false && (encoded_size += PB._encoded_size(x.name_cast_variables, 5))
    x.name_all_variables != false && (encoded_size += PB._encoded_size(x.name_all_variables, 6))
    x.profile_propagation != false && (encoded_size += PB._encoded_size(x.profile_propagation, 7))
    !isempty(x.profile_file) && (encoded_size += PB._encoded_size(x.profile_file, 8))
    x.profile_local_search != false && (encoded_size += PB._encoded_size(x.profile_local_search, 16))
    x.print_local_search_profile != false && (encoded_size += PB._encoded_size(x.print_local_search_profile, 17))
    x.trace_propagation != false && (encoded_size += PB._encoded_size(x.trace_propagation, 9))
    x.trace_search != false && (encoded_size += PB._encoded_size(x.trace_search, 10))
    x.print_model != false && (encoded_size += PB._encoded_size(x.print_model, 11))
    x.print_model_stats != false && (encoded_size += PB._encoded_size(x.print_model_stats, 12))
    x.print_added_constraints != false && (encoded_size += PB._encoded_size(x.print_added_constraints, 13))
    x.disable_solve != false && (encoded_size += PB._encoded_size(x.disable_solve, 15))
    x.use_small_table != false && (encoded_size += PB._encoded_size(x.use_small_table, 101))
    x.use_cumulative_edge_finder != false && (encoded_size += PB._encoded_size(x.use_cumulative_edge_finder, 105))
    x.use_cumulative_time_table != false && (encoded_size += PB._encoded_size(x.use_cumulative_time_table, 106))
    x.use_cumulative_time_table_sync != false && (encoded_size += PB._encoded_size(x.use_cumulative_time_table_sync, 112))
    x.use_sequence_high_demand_tasks != false && (encoded_size += PB._encoded_size(x.use_sequence_high_demand_tasks, 107))
    x.use_all_possible_disjunctions != false && (encoded_size += PB._encoded_size(x.use_all_possible_disjunctions, 108))
    x.max_edge_finder_size != zero(Int32) && (encoded_size += PB._encoded_size(x.max_edge_finder_size, 109))
    x.diffn_use_cumulative != false && (encoded_size += PB._encoded_size(x.diffn_use_cumulative, 110))
    x.use_element_rmq != false && (encoded_size += PB._encoded_size(x.use_element_rmq, 111))
    x.skip_locally_optimal_paths != false && (encoded_size += PB._encoded_size(x.skip_locally_optimal_paths, 113))
    x.check_solution_period != zero(Int32) && (encoded_size += PB._encoded_size(x.check_solution_period, 114))
    return encoded_size
end
