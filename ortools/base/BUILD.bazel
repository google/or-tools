# Copyright 2010-2024 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(default_visibility = ["//visibility:public"])

config_setting(
    name = "on_linux",
    constraint_values = ["@platforms//os:linux"],
)

config_setting(
    name = "on_macos",
    constraint_values = ["@platforms//os:macos"],
)

config_setting(
    name = "on_windows",
    constraint_values = ["@platforms//os:windows"],
)

filegroup(
    name = "base_swig",
    srcs = [
        "base.i",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "base",
    srcs = [
        "version.cc",
    ],
    hdrs = [
        "commandlineflags.h",
        "init_google.h",
        "logging.h",
        "stl_logging.h",
        "types.h",
        "version.h",
    ],
    copts = [
        "-DOR_TOOLS_MAJOR=10",
        "-DOR_TOOLS_MINOR=0",
        "-DOR_TOOLS_PATCH=9999",
    ],
    linkopts = select({
        "on_linux": [],
        "on_macos": ["-framework CoreFoundation"],
        "on_windows": [],
        "//conditions:default": [],
    }),
    deps = [
        ":commandlineflags",
        ":logging",
        ":macros",
        ":types",
        "@com_google_absl//absl/base",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/container:node_hash_map",
        "@com_google_absl//absl/container:node_hash_set",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/log:die_if_null",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "accurate_sum",
    hdrs = ["accurate_sum.h"],
)

cc_library(
    name = "adjustable_priority_queue",
    hdrs = [
        "adjustable_priority_queue.h",
        "adjustable_priority_queue-inl.h",
    ],
    deps = [
        ":base",
    ],
)

cc_library(
    name = "basictypes",
    hdrs = ["basictypes.h"],
)

cc_library(
    name = "bitmap",
    srcs = ["bitmap.cc"],
    hdrs = ["bitmap.h"],
)

cc_library(
    name = "case",
    srcs = ["case.cc"],
    hdrs = ["case.h"],
    deps = [":base"],
)

cc_library(
    name = "commandlineflags",
    srcs = [
        "commandlineflags.cc",
    ],
    hdrs = ["commandlineflags.h"],
    deps = [
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
    ],
)

cc_library(
    name = "container_logging",
    hdrs = ["container_logging.h"],
    deps = [":base"],
)

cc_library(
    name = "dump_vars",
    hdrs = ["dump_vars.h"],
    copts = select({
        "on_linux": [],
        "on_macos": [],
        "on_windows": ["/Zc:preprocessor"],
        "//conditions:default": [],
    }),
    deps = [
        "@com_google_absl//absl/container:inlined_vector",
    ],
)

cc_test(
    name = "dump_vars_test",
    size = "small",
    srcs = ["dump_vars_test.cc"],
    copts = select({
        "on_linux": [],
        "on_macos": [],
        "on_windows": ["/Zc:preprocessor"],
        "//conditions:default": [],
    }),
    deps = [
        ":dump_vars",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "dynamic_library",
    hdrs = ["dynamic_library.h"],
    linkopts = select({
        "on_linux": ["-Wl,--no-as-needed -ldl"],
        "on_macos": [],
        "on_windows": [],
        "//conditions:default": [],
    }),
    deps = [
        ":base",
        ":logging",
    ],
)

cc_library(
    name = "encodingutils",
    hdrs = ["encodingutils.h"],
    deps = [":base"],
)

cc_library(
    name = "flags",
    hdrs = ["flags.h"],
    deps = [
        "@com_google_absl//absl/flags:flag",
    ],
)

cc_library(
    name = "file",
    srcs = [
        "file.cc",
        "filesystem.cc",
    ],
    hdrs = [
        "file.h",
        "filesystem.h",
        "helpers.h",
        "options.h",
    ],
    deps = [
        ":status_macros",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "status_matchers",
    hdrs = ["status_matchers.h"],
    deps = [
        ":base",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
    ],
)

cc_library(
    name = "message_matchers",
    hdrs = ["message_matchers.h"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "gmock",
    hdrs = ["gmock.h"],
    deps = [
        ":message_matchers",
        ":status_matchers",
        "@com_google_googletest//:gtest",
    ],
)

cc_library(
    name = "gmock_main",
    deps = [
        ":gmock",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "gzipfile",
    srcs = ["gzipfile.cc"],
    hdrs = ["gzipfile.h"],
    deps = [
        ":base",
        ":basictypes",
        ":file",
        ":path",
        "@com_google_absl//absl/strings",
        "@zlib",
    ],
)

cc_library(
    name = "gzipstring",
    hdrs = ["gzipstring.h"],
    deps = [
        ":base",
        "@zlib",
    ],
)

cc_library(
    name = "hash",
    srcs = [
        "hash.cc",
    ],
    hdrs = [
        "hash.h",
    ],
    deps = [
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "int_type",
    hdrs = ["int_type.h"],
    deps = [":base"],
)

cc_library(
    name = "intops",
    hdrs = ["strong_int.h"],
    deps = [":int_type"],
)

cc_library(
    name = "iterator_adaptors",
    hdrs = ["iterator_adaptors.h"],
    deps = [":base"],
)

cc_library(
    name = "linked_hash_map",
    hdrs = ["linked_hash_map.h"],
    deps = [
        ":base",
        ":logging",
        "@com_google_absl//absl/container:common",
        "@com_google_absl//absl/container:flat_hash_map",
    ],
)

cc_library(
    name = "logging",
    srcs = ["logging.cc"],
    hdrs = ["logging.h"],
    deps = [
        ":macros",
        "@com_google_absl//absl/base:log_severity",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/log:die_if_null",
        "@com_google_absl//absl/log:flags",
        "@com_google_absl//absl/log:globals",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/memory",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "macros",
    hdrs = ["macros.h"],
)

cc_library(
    name = "map_util",
    hdrs = ["map_util.h"],
    deps = [":base"],
)

cc_library(
    name = "mathlimits",
    srcs = ["mathlimits.cc"],
    hdrs = ["mathlimits.h"],
    deps = [],
)

cc_library(
    name = "mathutil",
    srcs = ["mathutil.cc"],
    hdrs = ["mathutil.h"],
    deps = [
        ":base",
        ":mathlimits",
    ],
)

cc_library(
    name = "memfile",
    hdrs = ["memfile.h"],
    deps = [],
)

cc_library(
    name = "murmur",
    hdrs = ["murmur.h"],
    deps = [
        ":base",
        ":hash",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "mutable_memfile",
    hdrs = ["mutable_memfile.h"],
    deps = [],
)

cc_library(
    name = "numbers",
    srcs = ["numbers.cc"],
    hdrs = ["numbers.h"],
    deps = [
        ":strtoint",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "parse_text_proto",
    hdrs = ["parse_text_proto.h"],
    deps = [
        "@com_google_absl//absl/log:check",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "path",
    srcs = ["path.cc"],
    hdrs = ["path.h"],
    deps = [
        ":base",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "temp_path",
    srcs = ["temp_path.cc"],
    hdrs = ["temp_path.h"],
    deps = [
        ":base",
        ":file",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "protobuf_util",
    hdrs = ["protobuf_util.h"],
)

cc_library(
    name = "protoutil",
    hdrs = ["protoutil.h"],
    deps = [
        ":timer",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_protobuf//:protobuf",
    ],
)

cc_library(
    name = "ptr_util",
    hdrs = ["ptr_util.h"],
)

cc_library(
    name = "recordio",
    srcs = ["recordio.cc"],
    hdrs = ["recordio.h"],
    deps = [
        ":base",
        ":file",
        ":logging",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_protobuf//:protobuf",
        "@zlib",
    ],
)

cc_library(
    name = "small_map",
    hdrs = ["small_map.h"],
    deps = [":base"],
)

cc_library(
    name = "source_location",
    hdrs = ["source_location.h"],
    deps = ["@com_google_absl//absl/base:config"],
)

cc_library(
    name = "status_builder",
    hdrs = ["status_builder.h"],
    deps = [
        ":base",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "status_macros",
    hdrs = ["status_macros.h"],
    deps = [
        ":base",
        ":status_builder",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "stl_util",
    hdrs = ["stl_util.h"],
    deps = [":base"],
)

cc_library(
    name = "strong_vector",
    hdrs = ["strong_vector.h"],
    deps = [
        ":base",
        ":intops",
    ],
)

cc_library(
    name = "strtoint",
    srcs = ["strtoint.cc"],
    hdrs = ["strtoint.h"],
    deps = [
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "sysinfo",
    srcs = ["sysinfo.cc"],
    hdrs = ["sysinfo.h"],
    deps = [
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "threadpool",
    srcs = ["threadpool.cc"],
    hdrs = ["threadpool.h"],
    deps = [
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/synchronization",
    ],
)

cc_library(
    name = "timer",
    srcs = ["timer.cc"],
    hdrs = ["timer.h"],
    deps = [
        ":macros",
        "@com_google_absl//absl/log:check",
        "@com_google_absl//absl/time",
    ],
)

cc_library(
    name = "top_n",
    hdrs = ["top_n.h"],
)

cc_library(
    name = "typeid",
    hdrs = ["typeid.h"],
)

cc_library(
    name = "types",
    hdrs = ["types.h"],
)

cc_library(
    name = "zipfile",
    srcs = ["zipfile.cc"],
    hdrs = ["zipfile.h"],
    deps = [
        ":basictypes",
        ":file",
        ":path",
        ":stl_util",
        "@com_google_absl//absl/strings",
        "@zlib",
    ],
)
