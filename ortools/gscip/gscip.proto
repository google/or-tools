// Copyright 2010-2022 Google LLC
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package operations_research;

// Contains both the "SCIP parameters" and gSCIP only configuration. For the
// SCIP parameters, the order of application is:
//   1. Emphasis
//   2. Meta parameters (heuristics, presolve, separating)
//   3. Individual SCIP parameters (e.g. an entry in bool_params)
// Note that 1. and 2. both apply a combination of parameters from 3.
//
// For parameters that are marked as optional, the underlying solver default
// is used if they are not specified.
message GScipParameters {
  // See SCIP documentation for details:
  // https://scip.zib.de/doc/html/type__paramset_8h.php#a2e51a867a8ea3ea16f15e7cc935c3f32
  enum Emphasis {
    DEFAULT_EMPHASIS = 0;
    COUNTER = 1;
    CP_SOLVER = 2;
    EASY_CIP = 3;
    FEASIBILITY = 4;
    HARD_LP = 5;
    OPTIMALITY = 6;
    PHASE_FEAS = 7;
    PHASE_IMPROVE = 8;
    PHASE_PROOF = 9;
  }

  // See SCIP documentation for details:
  // https://scip.zib.de/doc/html/type__paramset_8h.php#a083067d8e425d0d44e834095e82902ed
  enum MetaParamValue {
    DEFAULT_META_PARAM_VALUE = 0;
    AGGRESSIVE = 1;
    FAST = 2;
    OFF = 3;
  }

  Emphasis emphasis = 1;

  // See SCIPsetHeuristics() for details:
  // https://scip.zib.de/doc/html/group__ParameterMethods.php#gaeccb7859066cadd01d0df7aca98e2c7d
  optional MetaParamValue heuristics = 2;

  // See SCIPsetPresolving() for details:
  // https://scip.zib.de/doc/html/group__ParameterMethods.php#ga8365de8ab5ec5961c005e2d77965b182
  optional MetaParamValue presolve = 3;

  // See SCIPsetSeparating() for details:
  // https://scip.zib.de/doc/html/group__ParameterMethods.php#gad0c64e3e9b8def72fd8a7d3d9dce7729
  optional MetaParamValue separating = 4;

  // See https://scip.zib.de/doc/html/PARAMETERS.php for a list of all SCIP
  // parameters.
  map<string, bool> bool_params = 5;
  map<string, int32> int_params = 6;
  map<string, int64> long_params = 7;
  map<string, double> real_params = 8;
  map<string, string> char_params = 9;
  map<string, string> string_params = 10;

  // ///////////////////////////////////////////////////////////////////////////
  // gSCIP only parameters
  // ///////////////////////////////////////////////////////////////////////////

  // Disable all terminal output (override all logging parameters). To control
  // only the search logs, see also the SCIP parameter display/verblevel and
  // from gscip_parameters.h, SetLogLevel() and SetOutputEnabled().
  optional bool silence_output = 11;

  // Log solver metrics to terminal when finished solving (unless silenced).
  bool print_detailed_solving_stats = 12;

  // Write out the model in SCIP's text format before solving to the terminal
  // (unless silenced).
  bool print_scip_model = 13;

  // If nonempty, search logs are written here INSTEAD OF out to terminal. See
  // also the SCIP parameter display/verblevel and from gscip_parameters.h, the
  // functions SetLogLevel() and SetOutputEnabled() for configuring the search
  // logs.
  //
  // Does not use gfile, can only write to local disk.
  string search_logs_filename = 14;

  // If non-empty, write detailed_solving_stats to a file. Can be set
  // independently from print_detailed_solving_stats.
  //
  // Does not use gfile, can only write to local disk.
  string detailed_solving_stats_filename = 15;

  // If nonempty, out the model in SCIP's text format to a file before solving.
  // Can be set independently of print_scip_model.
  //
  // Does not use gfile, can only write to local disk.
  string scip_model_filename = 16;

  // How many solutions to retrieve from the solution pool (if this many exist).
  // At least one solution will always be returned, even if num_solutions < 1.
  optional int32 num_solutions = 17;

  // If set, ignore all solutions worse than objective_limit, for details see
  // SCIPsetObjlimit(). Note that the solution pool will still contain solutions
  // worse than the limit as SCIP uses these to run improvement heuristics, and
  // if you query all solutions at the end of the solve they will be present,
  // even if you found no solution that met the limit and returned infeasible.
  optional double objective_limit = 18;
}

// TODO(user): this should be machine generated by script and contain all of
// https://scip.zib.de/doc/html/group__PublicSolvingStatsMethods.php
message GScipSolvingStats {
  // The objective value of the best solution (or the cutoff). If no solution is
  // found, returns +inf for minimization and -inf for maximization. Equivalent
  // to SCIPgetPrimalbound().
  double best_objective = 1;
  // The best proven bound on the object (e.g. through the LP relaxation).
  // Returns +inf for maximization and -inf for minimization if no bound was
  // found. Equivalent to SCIPgetDualBound().
  double best_bound = 2;
  int64 primal_simplex_iterations = 3;
  int64 dual_simplex_iterations = 4;
  // nlp_iterations in SCIP. The total number of LP steps taken, i.e. primal
  // simplex iterations + dual simplex iterations + barrier iterations.
  int64 total_lp_iterations = 5;
  // NTotalNodes in SCIP.
  // This is the total number of nodes used in the solve, potentially across
  // multiple branch-and-bound trees. Use limits/totalnodes (rather than
  // limits/nodes) to control this value.
  int64 node_count = 6;
  // FirstLPDualboundRoot in SCIP. The bound obtained from the first LP solve
  // at the root node.
  double first_lp_relaxation_bound = 7;
  // DualboundRoot in SCIP. The bound obtained at the root node, possibly after
  // multiple rounds of cuts.
  double root_node_bound = 8;
  // A deterministic measure of work done during the solve. The units of this
  // field are specific to SCIP.
  double deterministic_time = 9;
}

message GScipOutput {
  // See https://scip.zib.de/doc/html/type__stat_8h.php
  enum Status {
    UNKNOWN = 0;
    USER_INTERRUPT = 1;
    NODE_LIMIT = 2;
    TOTAL_NODE_LIMIT = 3;
    STALL_NODE_LIMIT = 4;
    TIME_LIMIT = 5;
    MEM_LIMIT = 6;
    GAP_LIMIT = 7;
    SOL_LIMIT = 8;
    BEST_SOL_LIMIT = 9;
    RESTART_LIMIT = 10;
    OPTIMAL = 11;
    INFEASIBLE = 12;
    UNBOUNDED = 13;
    INF_OR_UNBD = 14;
    TERMINATE = 15;
    // WARNING(rander): we add some extra status values beyond SCIP here
    INVALID_SOLVER_PARAMETERS = 16;
  }
  Status status = 1;
  string status_detail = 2;
  GScipSolvingStats stats = 3;
}
