# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer as google___protobuf___internal___containers___RepeatedScalarFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Iterable as typing___Iterable,
    List as typing___List,
    Optional as typing___Optional,
    Text as typing___Text,
    Tuple as typing___Tuple,
    cast as typing___cast,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class SatParameters(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class VariableOrder(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.VariableOrder: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.VariableOrder]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.VariableOrder]]: ...
        IN_ORDER = typing___cast(SatParameters.VariableOrder, 0)
        IN_REVERSE_ORDER = typing___cast(SatParameters.VariableOrder, 1)
        IN_RANDOM_ORDER = typing___cast(SatParameters.VariableOrder, 2)
    IN_ORDER = typing___cast(SatParameters.VariableOrder, 0)
    IN_REVERSE_ORDER = typing___cast(SatParameters.VariableOrder, 1)
    IN_RANDOM_ORDER = typing___cast(SatParameters.VariableOrder, 2)

    class Polarity(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.Polarity: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.Polarity]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.Polarity]]: ...
        POLARITY_TRUE = typing___cast(SatParameters.Polarity, 0)
        POLARITY_FALSE = typing___cast(SatParameters.Polarity, 1)
        POLARITY_RANDOM = typing___cast(SatParameters.Polarity, 2)
        POLARITY_WEIGHTED_SIGN = typing___cast(SatParameters.Polarity, 3)
        POLARITY_REVERSE_WEIGHTED_SIGN = typing___cast(SatParameters.Polarity, 4)
    POLARITY_TRUE = typing___cast(SatParameters.Polarity, 0)
    POLARITY_FALSE = typing___cast(SatParameters.Polarity, 1)
    POLARITY_RANDOM = typing___cast(SatParameters.Polarity, 2)
    POLARITY_WEIGHTED_SIGN = typing___cast(SatParameters.Polarity, 3)
    POLARITY_REVERSE_WEIGHTED_SIGN = typing___cast(SatParameters.Polarity, 4)

    class ConflictMinimizationAlgorithm(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.ConflictMinimizationAlgorithm: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.ConflictMinimizationAlgorithm]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.ConflictMinimizationAlgorithm]]: ...
        NONE = typing___cast(SatParameters.ConflictMinimizationAlgorithm, 0)
        SIMPLE = typing___cast(SatParameters.ConflictMinimizationAlgorithm, 1)
        RECURSIVE = typing___cast(SatParameters.ConflictMinimizationAlgorithm, 2)
        EXPERIMENTAL = typing___cast(SatParameters.ConflictMinimizationAlgorithm, 3)
    NONE = typing___cast(SatParameters.ConflictMinimizationAlgorithm, 0)
    SIMPLE = typing___cast(SatParameters.ConflictMinimizationAlgorithm, 1)
    RECURSIVE = typing___cast(SatParameters.ConflictMinimizationAlgorithm, 2)
    EXPERIMENTAL = typing___cast(SatParameters.ConflictMinimizationAlgorithm, 3)

    class BinaryMinizationAlgorithm(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.BinaryMinizationAlgorithm: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.BinaryMinizationAlgorithm]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.BinaryMinizationAlgorithm]]: ...
        NO_BINARY_MINIMIZATION = typing___cast(SatParameters.BinaryMinizationAlgorithm, 0)
        BINARY_MINIMIZATION_FIRST = typing___cast(SatParameters.BinaryMinizationAlgorithm, 1)
        BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION = typing___cast(SatParameters.BinaryMinizationAlgorithm, 4)
        BINARY_MINIMIZATION_WITH_REACHABILITY = typing___cast(SatParameters.BinaryMinizationAlgorithm, 2)
        EXPERIMENTAL_BINARY_MINIMIZATION = typing___cast(SatParameters.BinaryMinizationAlgorithm, 3)
    NO_BINARY_MINIMIZATION = typing___cast(SatParameters.BinaryMinizationAlgorithm, 0)
    BINARY_MINIMIZATION_FIRST = typing___cast(SatParameters.BinaryMinizationAlgorithm, 1)
    BINARY_MINIMIZATION_FIRST_WITH_TRANSITIVE_REDUCTION = typing___cast(SatParameters.BinaryMinizationAlgorithm, 4)
    BINARY_MINIMIZATION_WITH_REACHABILITY = typing___cast(SatParameters.BinaryMinizationAlgorithm, 2)
    EXPERIMENTAL_BINARY_MINIMIZATION = typing___cast(SatParameters.BinaryMinizationAlgorithm, 3)

    class ClauseProtection(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.ClauseProtection: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.ClauseProtection]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.ClauseProtection]]: ...
        PROTECTION_NONE = typing___cast(SatParameters.ClauseProtection, 0)
        PROTECTION_ALWAYS = typing___cast(SatParameters.ClauseProtection, 1)
        PROTECTION_LBD = typing___cast(SatParameters.ClauseProtection, 2)
    PROTECTION_NONE = typing___cast(SatParameters.ClauseProtection, 0)
    PROTECTION_ALWAYS = typing___cast(SatParameters.ClauseProtection, 1)
    PROTECTION_LBD = typing___cast(SatParameters.ClauseProtection, 2)

    class ClauseOrdering(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.ClauseOrdering: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.ClauseOrdering]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.ClauseOrdering]]: ...
        CLAUSE_ACTIVITY = typing___cast(SatParameters.ClauseOrdering, 0)
        CLAUSE_LBD = typing___cast(SatParameters.ClauseOrdering, 1)
    CLAUSE_ACTIVITY = typing___cast(SatParameters.ClauseOrdering, 0)
    CLAUSE_LBD = typing___cast(SatParameters.ClauseOrdering, 1)

    class RestartAlgorithm(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.RestartAlgorithm: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.RestartAlgorithm]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.RestartAlgorithm]]: ...
        NO_RESTART = typing___cast(SatParameters.RestartAlgorithm, 0)
        LUBY_RESTART = typing___cast(SatParameters.RestartAlgorithm, 1)
        DL_MOVING_AVERAGE_RESTART = typing___cast(SatParameters.RestartAlgorithm, 2)
        LBD_MOVING_AVERAGE_RESTART = typing___cast(SatParameters.RestartAlgorithm, 3)
        FIXED_RESTART = typing___cast(SatParameters.RestartAlgorithm, 4)
    NO_RESTART = typing___cast(SatParameters.RestartAlgorithm, 0)
    LUBY_RESTART = typing___cast(SatParameters.RestartAlgorithm, 1)
    DL_MOVING_AVERAGE_RESTART = typing___cast(SatParameters.RestartAlgorithm, 2)
    LBD_MOVING_AVERAGE_RESTART = typing___cast(SatParameters.RestartAlgorithm, 3)
    FIXED_RESTART = typing___cast(SatParameters.RestartAlgorithm, 4)

    class MaxSatAssumptionOrder(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.MaxSatAssumptionOrder: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.MaxSatAssumptionOrder]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.MaxSatAssumptionOrder]]: ...
        DEFAULT_ASSUMPTION_ORDER = typing___cast(SatParameters.MaxSatAssumptionOrder, 0)
        ORDER_ASSUMPTION_BY_DEPTH = typing___cast(SatParameters.MaxSatAssumptionOrder, 1)
        ORDER_ASSUMPTION_BY_WEIGHT = typing___cast(SatParameters.MaxSatAssumptionOrder, 2)
    DEFAULT_ASSUMPTION_ORDER = typing___cast(SatParameters.MaxSatAssumptionOrder, 0)
    ORDER_ASSUMPTION_BY_DEPTH = typing___cast(SatParameters.MaxSatAssumptionOrder, 1)
    ORDER_ASSUMPTION_BY_WEIGHT = typing___cast(SatParameters.MaxSatAssumptionOrder, 2)

    class MaxSatStratificationAlgorithm(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.MaxSatStratificationAlgorithm: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.MaxSatStratificationAlgorithm]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.MaxSatStratificationAlgorithm]]: ...
        STRATIFICATION_NONE = typing___cast(SatParameters.MaxSatStratificationAlgorithm, 0)
        STRATIFICATION_DESCENT = typing___cast(SatParameters.MaxSatStratificationAlgorithm, 1)
        STRATIFICATION_ASCENT = typing___cast(SatParameters.MaxSatStratificationAlgorithm, 2)
    STRATIFICATION_NONE = typing___cast(SatParameters.MaxSatStratificationAlgorithm, 0)
    STRATIFICATION_DESCENT = typing___cast(SatParameters.MaxSatStratificationAlgorithm, 1)
    STRATIFICATION_ASCENT = typing___cast(SatParameters.MaxSatStratificationAlgorithm, 2)

    class SearchBranching(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> SatParameters.SearchBranching: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[SatParameters.SearchBranching]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, SatParameters.SearchBranching]]: ...
        AUTOMATIC_SEARCH = typing___cast(SatParameters.SearchBranching, 0)
        FIXED_SEARCH = typing___cast(SatParameters.SearchBranching, 1)
        PORTFOLIO_SEARCH = typing___cast(SatParameters.SearchBranching, 2)
        LP_SEARCH = typing___cast(SatParameters.SearchBranching, 3)
        PSEUDO_COST_SEARCH = typing___cast(SatParameters.SearchBranching, 4)
        PORTFOLIO_WITH_QUICK_RESTART_SEARCH = typing___cast(SatParameters.SearchBranching, 5)
        HINT_SEARCH = typing___cast(SatParameters.SearchBranching, 6)
    AUTOMATIC_SEARCH = typing___cast(SatParameters.SearchBranching, 0)
    FIXED_SEARCH = typing___cast(SatParameters.SearchBranching, 1)
    PORTFOLIO_SEARCH = typing___cast(SatParameters.SearchBranching, 2)
    LP_SEARCH = typing___cast(SatParameters.SearchBranching, 3)
    PSEUDO_COST_SEARCH = typing___cast(SatParameters.SearchBranching, 4)
    PORTFOLIO_WITH_QUICK_RESTART_SEARCH = typing___cast(SatParameters.SearchBranching, 5)
    HINT_SEARCH = typing___cast(SatParameters.SearchBranching, 6)

    preferred_variable_order = ... # type: SatParameters.VariableOrder
    initial_polarity = ... # type: SatParameters.Polarity
    use_phase_saving = ... # type: bool
    random_polarity_ratio = ... # type: float
    random_branches_ratio = ... # type: float
    use_erwa_heuristic = ... # type: bool
    initial_variables_activity = ... # type: float
    also_bump_variables_in_conflict_reasons = ... # type: bool
    minimization_algorithm = ... # type: SatParameters.ConflictMinimizationAlgorithm
    binary_minimization_algorithm = ... # type: SatParameters.BinaryMinizationAlgorithm
    subsumption_during_conflict_analysis = ... # type: bool
    clause_cleanup_period = ... # type: int
    clause_cleanup_target = ... # type: int
    clause_cleanup_protection = ... # type: SatParameters.ClauseProtection
    clause_cleanup_lbd_bound = ... # type: int
    clause_cleanup_ordering = ... # type: SatParameters.ClauseOrdering
    pb_cleanup_increment = ... # type: int
    pb_cleanup_ratio = ... # type: float
    minimize_with_propagation_restart_period = ... # type: int
    minimize_with_propagation_num_decisions = ... # type: int
    variable_activity_decay = ... # type: float
    max_variable_activity_value = ... # type: float
    glucose_max_decay = ... # type: float
    glucose_decay_increment = ... # type: float
    glucose_decay_increment_period = ... # type: int
    clause_activity_decay = ... # type: float
    max_clause_activity_value = ... # type: float
    restart_algorithms = ... # type: google___protobuf___internal___containers___RepeatedScalarFieldContainer[SatParameters.RestartAlgorithm]
    default_restart_algorithms = ... # type: typing___Text
    restart_period = ... # type: int
    restart_running_window_size = ... # type: int
    restart_dl_average_ratio = ... # type: float
    restart_lbd_average_ratio = ... # type: float
    use_blocking_restart = ... # type: bool
    blocking_restart_window_size = ... # type: int
    blocking_restart_multiplier = ... # type: float
    num_conflicts_before_strategy_changes = ... # type: int
    strategy_change_increase_ratio = ... # type: float
    max_time_in_seconds = ... # type: float
    max_deterministic_time = ... # type: float
    max_number_of_conflicts = ... # type: int
    max_memory_in_mb = ... # type: int
    treat_binary_clauses_separately = ... # type: bool
    random_seed = ... # type: int
    log_search_progress = ... # type: bool
    use_pb_resolution = ... # type: bool
    minimize_reduction_during_pb_resolution = ... # type: bool
    count_assumption_levels_in_lbd = ... # type: bool
    presolve_bve_threshold = ... # type: int
    presolve_bve_clause_weight = ... # type: int
    presolve_probing_deterministic_time_limit = ... # type: float
    presolve_blocked_clause = ... # type: bool
    presolve_use_bva = ... # type: bool
    presolve_bva_threshold = ... # type: int
    max_presolve_iterations = ... # type: int
    cp_model_presolve = ... # type: bool
    cp_model_probing_level = ... # type: int
    cp_model_use_sat_presolve = ... # type: bool
    expand_element_constraints = ... # type: bool
    use_optimization_hints = ... # type: bool
    minimize_core = ... # type: bool
    find_multiple_cores = ... # type: bool
    cover_optimization = ... # type: bool
    max_sat_assumption_order = ... # type: SatParameters.MaxSatAssumptionOrder
    max_sat_reverse_assumption_order = ... # type: bool
    max_sat_stratification = ... # type: SatParameters.MaxSatStratificationAlgorithm
    use_precedences_in_disjunctive_constraint = ... # type: bool
    use_overload_checker_in_cumulative_constraint = ... # type: bool
    use_timetable_edge_finding_in_cumulative_constraint = ... # type: bool
    use_disjunctive_constraint_in_cumulative_constraint = ... # type: bool
    linearization_level = ... # type: int
    boolean_encoding_level = ... # type: int
    max_num_cuts = ... # type: int
    only_add_cuts_at_level_zero = ... # type: bool
    add_knapsack_cuts = ... # type: bool
    add_cg_cuts = ... # type: bool
    add_mir_cuts = ... # type: bool
    use_mir_rounding = ... # type: bool
    max_integer_rounding_scaling = ... # type: int
    add_lp_constraints_lazily = ... # type: bool
    min_orthogonality_for_lp_constraints = ... # type: float
    max_inactive_count = ... # type: int
    constraint_removal_batch_size = ... # type: int
    search_branching = ... # type: SatParameters.SearchBranching
    exploit_integer_lp_solution = ... # type: bool
    exploit_all_lp_solution = ... # type: bool
    exploit_best_solution = ... # type: bool
    exploit_objective = ... # type: bool
    pseudo_cost_reliability_threshold = ... # type: int
    optimize_with_core = ... # type: bool
    binary_search_num_conflicts = ... # type: int
    optimize_with_max_hs = ... # type: bool
    enumerate_all_solutions = ... # type: bool
    fill_tightened_domains_in_response = ... # type: bool
    instantiate_all_variables = ... # type: bool
    auto_detect_greater_than_at_least_one_of = ... # type: bool
    stop_after_first_solution = ... # type: bool
    num_search_workers = ... # type: int
    interleave_search = ... # type: bool
    reduce_memory_usage_in_interleave_mode = ... # type: bool
    deterministic_parallel_search = ... # type: bool
    share_objective_bounds = ... # type: bool
    share_level_zero_bounds = ... # type: bool
    use_lns_only = ... # type: bool
    lns_focus_on_decision_variables = ... # type: bool
    use_rins_lns = ... # type: bool
    diversify_lns_params = ... # type: bool
    randomize_search = ... # type: bool
    search_randomization_tolerance = ... # type: int
    use_optional_variables = ... # type: bool
    use_exact_lp_reason = ... # type: bool
    use_branching_in_lp = ... # type: bool
    use_combined_no_overlap = ... # type: bool
    catch_sigint_signal = ... # type: bool
    mip_max_bound = ... # type: float
    mip_var_scaling = ... # type: float
    mip_wanted_precision = ... # type: float
    mip_max_activity_exponent = ... # type: int
    mip_check_precision = ... # type: float

    def __init__(self,
        *,
        preferred_variable_order : typing___Optional[SatParameters.VariableOrder] = None,
        initial_polarity : typing___Optional[SatParameters.Polarity] = None,
        use_phase_saving : typing___Optional[bool] = None,
        random_polarity_ratio : typing___Optional[float] = None,
        random_branches_ratio : typing___Optional[float] = None,
        use_erwa_heuristic : typing___Optional[bool] = None,
        initial_variables_activity : typing___Optional[float] = None,
        also_bump_variables_in_conflict_reasons : typing___Optional[bool] = None,
        minimization_algorithm : typing___Optional[SatParameters.ConflictMinimizationAlgorithm] = None,
        binary_minimization_algorithm : typing___Optional[SatParameters.BinaryMinizationAlgorithm] = None,
        subsumption_during_conflict_analysis : typing___Optional[bool] = None,
        clause_cleanup_period : typing___Optional[int] = None,
        clause_cleanup_target : typing___Optional[int] = None,
        clause_cleanup_protection : typing___Optional[SatParameters.ClauseProtection] = None,
        clause_cleanup_lbd_bound : typing___Optional[int] = None,
        clause_cleanup_ordering : typing___Optional[SatParameters.ClauseOrdering] = None,
        pb_cleanup_increment : typing___Optional[int] = None,
        pb_cleanup_ratio : typing___Optional[float] = None,
        minimize_with_propagation_restart_period : typing___Optional[int] = None,
        minimize_with_propagation_num_decisions : typing___Optional[int] = None,
        variable_activity_decay : typing___Optional[float] = None,
        max_variable_activity_value : typing___Optional[float] = None,
        glucose_max_decay : typing___Optional[float] = None,
        glucose_decay_increment : typing___Optional[float] = None,
        glucose_decay_increment_period : typing___Optional[int] = None,
        clause_activity_decay : typing___Optional[float] = None,
        max_clause_activity_value : typing___Optional[float] = None,
        restart_algorithms : typing___Optional[typing___Iterable[SatParameters.RestartAlgorithm]] = None,
        default_restart_algorithms : typing___Optional[typing___Text] = None,
        restart_period : typing___Optional[int] = None,
        restart_running_window_size : typing___Optional[int] = None,
        restart_dl_average_ratio : typing___Optional[float] = None,
        restart_lbd_average_ratio : typing___Optional[float] = None,
        use_blocking_restart : typing___Optional[bool] = None,
        blocking_restart_window_size : typing___Optional[int] = None,
        blocking_restart_multiplier : typing___Optional[float] = None,
        num_conflicts_before_strategy_changes : typing___Optional[int] = None,
        strategy_change_increase_ratio : typing___Optional[float] = None,
        max_time_in_seconds : typing___Optional[float] = None,
        max_deterministic_time : typing___Optional[float] = None,
        max_number_of_conflicts : typing___Optional[int] = None,
        max_memory_in_mb : typing___Optional[int] = None,
        treat_binary_clauses_separately : typing___Optional[bool] = None,
        random_seed : typing___Optional[int] = None,
        log_search_progress : typing___Optional[bool] = None,
        use_pb_resolution : typing___Optional[bool] = None,
        minimize_reduction_during_pb_resolution : typing___Optional[bool] = None,
        count_assumption_levels_in_lbd : typing___Optional[bool] = None,
        presolve_bve_threshold : typing___Optional[int] = None,
        presolve_bve_clause_weight : typing___Optional[int] = None,
        presolve_probing_deterministic_time_limit : typing___Optional[float] = None,
        presolve_blocked_clause : typing___Optional[bool] = None,
        presolve_use_bva : typing___Optional[bool] = None,
        presolve_bva_threshold : typing___Optional[int] = None,
        max_presolve_iterations : typing___Optional[int] = None,
        cp_model_presolve : typing___Optional[bool] = None,
        cp_model_probing_level : typing___Optional[int] = None,
        cp_model_use_sat_presolve : typing___Optional[bool] = None,
        expand_element_constraints : typing___Optional[bool] = None,
        use_optimization_hints : typing___Optional[bool] = None,
        minimize_core : typing___Optional[bool] = None,
        find_multiple_cores : typing___Optional[bool] = None,
        cover_optimization : typing___Optional[bool] = None,
        max_sat_assumption_order : typing___Optional[SatParameters.MaxSatAssumptionOrder] = None,
        max_sat_reverse_assumption_order : typing___Optional[bool] = None,
        max_sat_stratification : typing___Optional[SatParameters.MaxSatStratificationAlgorithm] = None,
        use_precedences_in_disjunctive_constraint : typing___Optional[bool] = None,
        use_overload_checker_in_cumulative_constraint : typing___Optional[bool] = None,
        use_timetable_edge_finding_in_cumulative_constraint : typing___Optional[bool] = None,
        use_disjunctive_constraint_in_cumulative_constraint : typing___Optional[bool] = None,
        linearization_level : typing___Optional[int] = None,
        boolean_encoding_level : typing___Optional[int] = None,
        max_num_cuts : typing___Optional[int] = None,
        only_add_cuts_at_level_zero : typing___Optional[bool] = None,
        add_knapsack_cuts : typing___Optional[bool] = None,
        add_cg_cuts : typing___Optional[bool] = None,
        add_mir_cuts : typing___Optional[bool] = None,
        use_mir_rounding : typing___Optional[bool] = None,
        max_integer_rounding_scaling : typing___Optional[int] = None,
        add_lp_constraints_lazily : typing___Optional[bool] = None,
        min_orthogonality_for_lp_constraints : typing___Optional[float] = None,
        max_inactive_count : typing___Optional[int] = None,
        constraint_removal_batch_size : typing___Optional[int] = None,
        search_branching : typing___Optional[SatParameters.SearchBranching] = None,
        exploit_integer_lp_solution : typing___Optional[bool] = None,
        exploit_all_lp_solution : typing___Optional[bool] = None,
        exploit_best_solution : typing___Optional[bool] = None,
        exploit_objective : typing___Optional[bool] = None,
        pseudo_cost_reliability_threshold : typing___Optional[int] = None,
        optimize_with_core : typing___Optional[bool] = None,
        binary_search_num_conflicts : typing___Optional[int] = None,
        optimize_with_max_hs : typing___Optional[bool] = None,
        enumerate_all_solutions : typing___Optional[bool] = None,
        fill_tightened_domains_in_response : typing___Optional[bool] = None,
        instantiate_all_variables : typing___Optional[bool] = None,
        auto_detect_greater_than_at_least_one_of : typing___Optional[bool] = None,
        stop_after_first_solution : typing___Optional[bool] = None,
        num_search_workers : typing___Optional[int] = None,
        interleave_search : typing___Optional[bool] = None,
        reduce_memory_usage_in_interleave_mode : typing___Optional[bool] = None,
        deterministic_parallel_search : typing___Optional[bool] = None,
        share_objective_bounds : typing___Optional[bool] = None,
        share_level_zero_bounds : typing___Optional[bool] = None,
        use_lns_only : typing___Optional[bool] = None,
        lns_focus_on_decision_variables : typing___Optional[bool] = None,
        use_rins_lns : typing___Optional[bool] = None,
        diversify_lns_params : typing___Optional[bool] = None,
        randomize_search : typing___Optional[bool] = None,
        search_randomization_tolerance : typing___Optional[int] = None,
        use_optional_variables : typing___Optional[bool] = None,
        use_exact_lp_reason : typing___Optional[bool] = None,
        use_branching_in_lp : typing___Optional[bool] = None,
        use_combined_no_overlap : typing___Optional[bool] = None,
        catch_sigint_signal : typing___Optional[bool] = None,
        mip_max_bound : typing___Optional[float] = None,
        mip_var_scaling : typing___Optional[float] = None,
        mip_wanted_precision : typing___Optional[float] = None,
        mip_max_activity_exponent : typing___Optional[int] = None,
        mip_check_precision : typing___Optional[float] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> SatParameters: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"add_cg_cuts",u"add_knapsack_cuts",u"add_lp_constraints_lazily",u"add_mir_cuts",u"also_bump_variables_in_conflict_reasons",u"auto_detect_greater_than_at_least_one_of",u"binary_minimization_algorithm",u"binary_search_num_conflicts",u"blocking_restart_multiplier",u"blocking_restart_window_size",u"boolean_encoding_level",u"catch_sigint_signal",u"clause_activity_decay",u"clause_cleanup_lbd_bound",u"clause_cleanup_ordering",u"clause_cleanup_period",u"clause_cleanup_protection",u"clause_cleanup_target",u"constraint_removal_batch_size",u"count_assumption_levels_in_lbd",u"cover_optimization",u"cp_model_presolve",u"cp_model_probing_level",u"cp_model_use_sat_presolve",u"default_restart_algorithms",u"deterministic_parallel_search",u"diversify_lns_params",u"enumerate_all_solutions",u"expand_element_constraints",u"exploit_all_lp_solution",u"exploit_best_solution",u"exploit_integer_lp_solution",u"exploit_objective",u"fill_tightened_domains_in_response",u"find_multiple_cores",u"glucose_decay_increment",u"glucose_decay_increment_period",u"glucose_max_decay",u"initial_polarity",u"initial_variables_activity",u"instantiate_all_variables",u"interleave_search",u"linearization_level",u"lns_focus_on_decision_variables",u"log_search_progress",u"max_clause_activity_value",u"max_deterministic_time",u"max_inactive_count",u"max_integer_rounding_scaling",u"max_memory_in_mb",u"max_num_cuts",u"max_number_of_conflicts",u"max_presolve_iterations",u"max_sat_assumption_order",u"max_sat_reverse_assumption_order",u"max_sat_stratification",u"max_time_in_seconds",u"max_variable_activity_value",u"min_orthogonality_for_lp_constraints",u"minimization_algorithm",u"minimize_core",u"minimize_reduction_during_pb_resolution",u"minimize_with_propagation_num_decisions",u"minimize_with_propagation_restart_period",u"mip_check_precision",u"mip_max_activity_exponent",u"mip_max_bound",u"mip_var_scaling",u"mip_wanted_precision",u"num_conflicts_before_strategy_changes",u"num_search_workers",u"only_add_cuts_at_level_zero",u"optimize_with_core",u"optimize_with_max_hs",u"pb_cleanup_increment",u"pb_cleanup_ratio",u"preferred_variable_order",u"presolve_blocked_clause",u"presolve_bva_threshold",u"presolve_bve_clause_weight",u"presolve_bve_threshold",u"presolve_probing_deterministic_time_limit",u"presolve_use_bva",u"pseudo_cost_reliability_threshold",u"random_branches_ratio",u"random_polarity_ratio",u"random_seed",u"randomize_search",u"reduce_memory_usage_in_interleave_mode",u"restart_dl_average_ratio",u"restart_lbd_average_ratio",u"restart_period",u"restart_running_window_size",u"search_branching",u"search_randomization_tolerance",u"share_level_zero_bounds",u"share_objective_bounds",u"stop_after_first_solution",u"strategy_change_increase_ratio",u"subsumption_during_conflict_analysis",u"treat_binary_clauses_separately",u"use_blocking_restart",u"use_branching_in_lp",u"use_combined_no_overlap",u"use_disjunctive_constraint_in_cumulative_constraint",u"use_erwa_heuristic",u"use_exact_lp_reason",u"use_lns_only",u"use_mir_rounding",u"use_optimization_hints",u"use_optional_variables",u"use_overload_checker_in_cumulative_constraint",u"use_pb_resolution",u"use_phase_saving",u"use_precedences_in_disjunctive_constraint",u"use_rins_lns",u"use_timetable_edge_finding_in_cumulative_constraint",u"variable_activity_decay"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"add_cg_cuts",u"add_knapsack_cuts",u"add_lp_constraints_lazily",u"add_mir_cuts",u"also_bump_variables_in_conflict_reasons",u"auto_detect_greater_than_at_least_one_of",u"binary_minimization_algorithm",u"binary_search_num_conflicts",u"blocking_restart_multiplier",u"blocking_restart_window_size",u"boolean_encoding_level",u"catch_sigint_signal",u"clause_activity_decay",u"clause_cleanup_lbd_bound",u"clause_cleanup_ordering",u"clause_cleanup_period",u"clause_cleanup_protection",u"clause_cleanup_target",u"constraint_removal_batch_size",u"count_assumption_levels_in_lbd",u"cover_optimization",u"cp_model_presolve",u"cp_model_probing_level",u"cp_model_use_sat_presolve",u"default_restart_algorithms",u"deterministic_parallel_search",u"diversify_lns_params",u"enumerate_all_solutions",u"expand_element_constraints",u"exploit_all_lp_solution",u"exploit_best_solution",u"exploit_integer_lp_solution",u"exploit_objective",u"fill_tightened_domains_in_response",u"find_multiple_cores",u"glucose_decay_increment",u"glucose_decay_increment_period",u"glucose_max_decay",u"initial_polarity",u"initial_variables_activity",u"instantiate_all_variables",u"interleave_search",u"linearization_level",u"lns_focus_on_decision_variables",u"log_search_progress",u"max_clause_activity_value",u"max_deterministic_time",u"max_inactive_count",u"max_integer_rounding_scaling",u"max_memory_in_mb",u"max_num_cuts",u"max_number_of_conflicts",u"max_presolve_iterations",u"max_sat_assumption_order",u"max_sat_reverse_assumption_order",u"max_sat_stratification",u"max_time_in_seconds",u"max_variable_activity_value",u"min_orthogonality_for_lp_constraints",u"minimization_algorithm",u"minimize_core",u"minimize_reduction_during_pb_resolution",u"minimize_with_propagation_num_decisions",u"minimize_with_propagation_restart_period",u"mip_check_precision",u"mip_max_activity_exponent",u"mip_max_bound",u"mip_var_scaling",u"mip_wanted_precision",u"num_conflicts_before_strategy_changes",u"num_search_workers",u"only_add_cuts_at_level_zero",u"optimize_with_core",u"optimize_with_max_hs",u"pb_cleanup_increment",u"pb_cleanup_ratio",u"preferred_variable_order",u"presolve_blocked_clause",u"presolve_bva_threshold",u"presolve_bve_clause_weight",u"presolve_bve_threshold",u"presolve_probing_deterministic_time_limit",u"presolve_use_bva",u"pseudo_cost_reliability_threshold",u"random_branches_ratio",u"random_polarity_ratio",u"random_seed",u"randomize_search",u"reduce_memory_usage_in_interleave_mode",u"restart_algorithms",u"restart_dl_average_ratio",u"restart_lbd_average_ratio",u"restart_period",u"restart_running_window_size",u"search_branching",u"search_randomization_tolerance",u"share_level_zero_bounds",u"share_objective_bounds",u"stop_after_first_solution",u"strategy_change_increase_ratio",u"subsumption_during_conflict_analysis",u"treat_binary_clauses_separately",u"use_blocking_restart",u"use_branching_in_lp",u"use_combined_no_overlap",u"use_disjunctive_constraint_in_cumulative_constraint",u"use_erwa_heuristic",u"use_exact_lp_reason",u"use_lns_only",u"use_mir_rounding",u"use_optimization_hints",u"use_optional_variables",u"use_overload_checker_in_cumulative_constraint",u"use_pb_resolution",u"use_phase_saving",u"use_precedences_in_disjunctive_constraint",u"use_rins_lns",u"use_timetable_edge_finding_in_cumulative_constraint",u"variable_activity_decay"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"add_cg_cuts",b"add_cg_cuts",u"add_knapsack_cuts",b"add_knapsack_cuts",u"add_lp_constraints_lazily",b"add_lp_constraints_lazily",u"add_mir_cuts",b"add_mir_cuts",u"also_bump_variables_in_conflict_reasons",b"also_bump_variables_in_conflict_reasons",u"auto_detect_greater_than_at_least_one_of",b"auto_detect_greater_than_at_least_one_of",u"binary_minimization_algorithm",b"binary_minimization_algorithm",u"binary_search_num_conflicts",b"binary_search_num_conflicts",u"blocking_restart_multiplier",b"blocking_restart_multiplier",u"blocking_restart_window_size",b"blocking_restart_window_size",u"boolean_encoding_level",b"boolean_encoding_level",u"catch_sigint_signal",b"catch_sigint_signal",u"clause_activity_decay",b"clause_activity_decay",u"clause_cleanup_lbd_bound",b"clause_cleanup_lbd_bound",u"clause_cleanup_ordering",b"clause_cleanup_ordering",u"clause_cleanup_period",b"clause_cleanup_period",u"clause_cleanup_protection",b"clause_cleanup_protection",u"clause_cleanup_target",b"clause_cleanup_target",u"constraint_removal_batch_size",b"constraint_removal_batch_size",u"count_assumption_levels_in_lbd",b"count_assumption_levels_in_lbd",u"cover_optimization",b"cover_optimization",u"cp_model_presolve",b"cp_model_presolve",u"cp_model_probing_level",b"cp_model_probing_level",u"cp_model_use_sat_presolve",b"cp_model_use_sat_presolve",u"default_restart_algorithms",b"default_restart_algorithms",u"deterministic_parallel_search",b"deterministic_parallel_search",u"diversify_lns_params",b"diversify_lns_params",u"enumerate_all_solutions",b"enumerate_all_solutions",u"expand_element_constraints",b"expand_element_constraints",u"exploit_all_lp_solution",b"exploit_all_lp_solution",u"exploit_best_solution",b"exploit_best_solution",u"exploit_integer_lp_solution",b"exploit_integer_lp_solution",u"exploit_objective",b"exploit_objective",u"fill_tightened_domains_in_response",b"fill_tightened_domains_in_response",u"find_multiple_cores",b"find_multiple_cores",u"glucose_decay_increment",b"glucose_decay_increment",u"glucose_decay_increment_period",b"glucose_decay_increment_period",u"glucose_max_decay",b"glucose_max_decay",u"initial_polarity",b"initial_polarity",u"initial_variables_activity",b"initial_variables_activity",u"instantiate_all_variables",b"instantiate_all_variables",u"interleave_search",b"interleave_search",u"linearization_level",b"linearization_level",u"lns_focus_on_decision_variables",b"lns_focus_on_decision_variables",u"log_search_progress",b"log_search_progress",u"max_clause_activity_value",b"max_clause_activity_value",u"max_deterministic_time",b"max_deterministic_time",u"max_inactive_count",b"max_inactive_count",u"max_integer_rounding_scaling",b"max_integer_rounding_scaling",u"max_memory_in_mb",b"max_memory_in_mb",u"max_num_cuts",b"max_num_cuts",u"max_number_of_conflicts",b"max_number_of_conflicts",u"max_presolve_iterations",b"max_presolve_iterations",u"max_sat_assumption_order",b"max_sat_assumption_order",u"max_sat_reverse_assumption_order",b"max_sat_reverse_assumption_order",u"max_sat_stratification",b"max_sat_stratification",u"max_time_in_seconds",b"max_time_in_seconds",u"max_variable_activity_value",b"max_variable_activity_value",u"min_orthogonality_for_lp_constraints",b"min_orthogonality_for_lp_constraints",u"minimization_algorithm",b"minimization_algorithm",u"minimize_core",b"minimize_core",u"minimize_reduction_during_pb_resolution",b"minimize_reduction_during_pb_resolution",u"minimize_with_propagation_num_decisions",b"minimize_with_propagation_num_decisions",u"minimize_with_propagation_restart_period",b"minimize_with_propagation_restart_period",u"mip_check_precision",b"mip_check_precision",u"mip_max_activity_exponent",b"mip_max_activity_exponent",u"mip_max_bound",b"mip_max_bound",u"mip_var_scaling",b"mip_var_scaling",u"mip_wanted_precision",b"mip_wanted_precision",u"num_conflicts_before_strategy_changes",b"num_conflicts_before_strategy_changes",u"num_search_workers",b"num_search_workers",u"only_add_cuts_at_level_zero",b"only_add_cuts_at_level_zero",u"optimize_with_core",b"optimize_with_core",u"optimize_with_max_hs",b"optimize_with_max_hs",u"pb_cleanup_increment",b"pb_cleanup_increment",u"pb_cleanup_ratio",b"pb_cleanup_ratio",u"preferred_variable_order",b"preferred_variable_order",u"presolve_blocked_clause",b"presolve_blocked_clause",u"presolve_bva_threshold",b"presolve_bva_threshold",u"presolve_bve_clause_weight",b"presolve_bve_clause_weight",u"presolve_bve_threshold",b"presolve_bve_threshold",u"presolve_probing_deterministic_time_limit",b"presolve_probing_deterministic_time_limit",u"presolve_use_bva",b"presolve_use_bva",u"pseudo_cost_reliability_threshold",b"pseudo_cost_reliability_threshold",u"random_branches_ratio",b"random_branches_ratio",u"random_polarity_ratio",b"random_polarity_ratio",u"random_seed",b"random_seed",u"randomize_search",b"randomize_search",u"reduce_memory_usage_in_interleave_mode",b"reduce_memory_usage_in_interleave_mode",u"restart_dl_average_ratio",b"restart_dl_average_ratio",u"restart_lbd_average_ratio",b"restart_lbd_average_ratio",u"restart_period",b"restart_period",u"restart_running_window_size",b"restart_running_window_size",u"search_branching",b"search_branching",u"search_randomization_tolerance",b"search_randomization_tolerance",u"share_level_zero_bounds",b"share_level_zero_bounds",u"share_objective_bounds",b"share_objective_bounds",u"stop_after_first_solution",b"stop_after_first_solution",u"strategy_change_increase_ratio",b"strategy_change_increase_ratio",u"subsumption_during_conflict_analysis",b"subsumption_during_conflict_analysis",u"treat_binary_clauses_separately",b"treat_binary_clauses_separately",u"use_blocking_restart",b"use_blocking_restart",u"use_branching_in_lp",b"use_branching_in_lp",u"use_combined_no_overlap",b"use_combined_no_overlap",u"use_disjunctive_constraint_in_cumulative_constraint",b"use_disjunctive_constraint_in_cumulative_constraint",u"use_erwa_heuristic",b"use_erwa_heuristic",u"use_exact_lp_reason",b"use_exact_lp_reason",u"use_lns_only",b"use_lns_only",u"use_mir_rounding",b"use_mir_rounding",u"use_optimization_hints",b"use_optimization_hints",u"use_optional_variables",b"use_optional_variables",u"use_overload_checker_in_cumulative_constraint",b"use_overload_checker_in_cumulative_constraint",u"use_pb_resolution",b"use_pb_resolution",u"use_phase_saving",b"use_phase_saving",u"use_precedences_in_disjunctive_constraint",b"use_precedences_in_disjunctive_constraint",u"use_rins_lns",b"use_rins_lns",u"use_timetable_edge_finding_in_cumulative_constraint",b"use_timetable_edge_finding_in_cumulative_constraint",u"variable_activity_decay",b"variable_activity_decay"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"add_cg_cuts",b"add_cg_cuts",u"add_knapsack_cuts",b"add_knapsack_cuts",u"add_lp_constraints_lazily",b"add_lp_constraints_lazily",u"add_mir_cuts",b"add_mir_cuts",u"also_bump_variables_in_conflict_reasons",b"also_bump_variables_in_conflict_reasons",u"auto_detect_greater_than_at_least_one_of",b"auto_detect_greater_than_at_least_one_of",u"binary_minimization_algorithm",b"binary_minimization_algorithm",u"binary_search_num_conflicts",b"binary_search_num_conflicts",u"blocking_restart_multiplier",b"blocking_restart_multiplier",u"blocking_restart_window_size",b"blocking_restart_window_size",u"boolean_encoding_level",b"boolean_encoding_level",u"catch_sigint_signal",b"catch_sigint_signal",u"clause_activity_decay",b"clause_activity_decay",u"clause_cleanup_lbd_bound",b"clause_cleanup_lbd_bound",u"clause_cleanup_ordering",b"clause_cleanup_ordering",u"clause_cleanup_period",b"clause_cleanup_period",u"clause_cleanup_protection",b"clause_cleanup_protection",u"clause_cleanup_target",b"clause_cleanup_target",u"constraint_removal_batch_size",b"constraint_removal_batch_size",u"count_assumption_levels_in_lbd",b"count_assumption_levels_in_lbd",u"cover_optimization",b"cover_optimization",u"cp_model_presolve",b"cp_model_presolve",u"cp_model_probing_level",b"cp_model_probing_level",u"cp_model_use_sat_presolve",b"cp_model_use_sat_presolve",u"default_restart_algorithms",b"default_restart_algorithms",u"deterministic_parallel_search",b"deterministic_parallel_search",u"diversify_lns_params",b"diversify_lns_params",u"enumerate_all_solutions",b"enumerate_all_solutions",u"expand_element_constraints",b"expand_element_constraints",u"exploit_all_lp_solution",b"exploit_all_lp_solution",u"exploit_best_solution",b"exploit_best_solution",u"exploit_integer_lp_solution",b"exploit_integer_lp_solution",u"exploit_objective",b"exploit_objective",u"fill_tightened_domains_in_response",b"fill_tightened_domains_in_response",u"find_multiple_cores",b"find_multiple_cores",u"glucose_decay_increment",b"glucose_decay_increment",u"glucose_decay_increment_period",b"glucose_decay_increment_period",u"glucose_max_decay",b"glucose_max_decay",u"initial_polarity",b"initial_polarity",u"initial_variables_activity",b"initial_variables_activity",u"instantiate_all_variables",b"instantiate_all_variables",u"interleave_search",b"interleave_search",u"linearization_level",b"linearization_level",u"lns_focus_on_decision_variables",b"lns_focus_on_decision_variables",u"log_search_progress",b"log_search_progress",u"max_clause_activity_value",b"max_clause_activity_value",u"max_deterministic_time",b"max_deterministic_time",u"max_inactive_count",b"max_inactive_count",u"max_integer_rounding_scaling",b"max_integer_rounding_scaling",u"max_memory_in_mb",b"max_memory_in_mb",u"max_num_cuts",b"max_num_cuts",u"max_number_of_conflicts",b"max_number_of_conflicts",u"max_presolve_iterations",b"max_presolve_iterations",u"max_sat_assumption_order",b"max_sat_assumption_order",u"max_sat_reverse_assumption_order",b"max_sat_reverse_assumption_order",u"max_sat_stratification",b"max_sat_stratification",u"max_time_in_seconds",b"max_time_in_seconds",u"max_variable_activity_value",b"max_variable_activity_value",u"min_orthogonality_for_lp_constraints",b"min_orthogonality_for_lp_constraints",u"minimization_algorithm",b"minimization_algorithm",u"minimize_core",b"minimize_core",u"minimize_reduction_during_pb_resolution",b"minimize_reduction_during_pb_resolution",u"minimize_with_propagation_num_decisions",b"minimize_with_propagation_num_decisions",u"minimize_with_propagation_restart_period",b"minimize_with_propagation_restart_period",u"mip_check_precision",b"mip_check_precision",u"mip_max_activity_exponent",b"mip_max_activity_exponent",u"mip_max_bound",b"mip_max_bound",u"mip_var_scaling",b"mip_var_scaling",u"mip_wanted_precision",b"mip_wanted_precision",u"num_conflicts_before_strategy_changes",b"num_conflicts_before_strategy_changes",u"num_search_workers",b"num_search_workers",u"only_add_cuts_at_level_zero",b"only_add_cuts_at_level_zero",u"optimize_with_core",b"optimize_with_core",u"optimize_with_max_hs",b"optimize_with_max_hs",u"pb_cleanup_increment",b"pb_cleanup_increment",u"pb_cleanup_ratio",b"pb_cleanup_ratio",u"preferred_variable_order",b"preferred_variable_order",u"presolve_blocked_clause",b"presolve_blocked_clause",u"presolve_bva_threshold",b"presolve_bva_threshold",u"presolve_bve_clause_weight",b"presolve_bve_clause_weight",u"presolve_bve_threshold",b"presolve_bve_threshold",u"presolve_probing_deterministic_time_limit",b"presolve_probing_deterministic_time_limit",u"presolve_use_bva",b"presolve_use_bva",u"pseudo_cost_reliability_threshold",b"pseudo_cost_reliability_threshold",u"random_branches_ratio",b"random_branches_ratio",u"random_polarity_ratio",b"random_polarity_ratio",u"random_seed",b"random_seed",u"randomize_search",b"randomize_search",u"reduce_memory_usage_in_interleave_mode",b"reduce_memory_usage_in_interleave_mode",u"restart_algorithms",b"restart_algorithms",u"restart_dl_average_ratio",b"restart_dl_average_ratio",u"restart_lbd_average_ratio",b"restart_lbd_average_ratio",u"restart_period",b"restart_period",u"restart_running_window_size",b"restart_running_window_size",u"search_branching",b"search_branching",u"search_randomization_tolerance",b"search_randomization_tolerance",u"share_level_zero_bounds",b"share_level_zero_bounds",u"share_objective_bounds",b"share_objective_bounds",u"stop_after_first_solution",b"stop_after_first_solution",u"strategy_change_increase_ratio",b"strategy_change_increase_ratio",u"subsumption_during_conflict_analysis",b"subsumption_during_conflict_analysis",u"treat_binary_clauses_separately",b"treat_binary_clauses_separately",u"use_blocking_restart",b"use_blocking_restart",u"use_branching_in_lp",b"use_branching_in_lp",u"use_combined_no_overlap",b"use_combined_no_overlap",u"use_disjunctive_constraint_in_cumulative_constraint",b"use_disjunctive_constraint_in_cumulative_constraint",u"use_erwa_heuristic",b"use_erwa_heuristic",u"use_exact_lp_reason",b"use_exact_lp_reason",u"use_lns_only",b"use_lns_only",u"use_mir_rounding",b"use_mir_rounding",u"use_optimization_hints",b"use_optimization_hints",u"use_optional_variables",b"use_optional_variables",u"use_overload_checker_in_cumulative_constraint",b"use_overload_checker_in_cumulative_constraint",u"use_pb_resolution",b"use_pb_resolution",u"use_phase_saving",b"use_phase_saving",u"use_precedences_in_disjunctive_constraint",b"use_precedences_in_disjunctive_constraint",u"use_rins_lns",b"use_rins_lns",u"use_timetable_edge_finding_in_cumulative_constraint",b"use_timetable_edge_finding_in_cumulative_constraint",u"variable_activity_decay",b"variable_activity_decay"]) -> None: ...
