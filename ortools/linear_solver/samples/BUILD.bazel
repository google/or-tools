# Copyright 2010-2025 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@pip_deps//:requirements.bzl", "requirement")
load("@rules_cc//cc:cc_test.bzl", "cc_test")
load("@rules_java//java:java_binary.bzl", "java_binary")
load("@rules_python//python:py_test.bzl", "py_test")
load("//bazel:run_binary_test.bzl", "run_binary_test")

package(default_visibility = ["//visibility:public"])

# Linear Solver

cc_test(
    name = "assignment_mip_test",
    srcs = ["assignment_mip.cc"],
    deps = [
        "//ortools/base",
        "//ortools/base:logging",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
    ],
)

cc_test(
    name = "assignment_groups_mip_test",
    srcs = ["assignment_groups_mip.cc"],
    deps = [
        "//ortools/base",
        "//ortools/base:logging",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_test(
    name = "assignment_task_sizes_mip_test",
    srcs = ["assignment_task_sizes_mip.cc"],
    deps = [
        "//ortools/base",
        "//ortools/base:logging",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_test(
    name = "assignment_teams_mip_test",
    srcs = ["assignment_teams_mip.cc"],
    deps = [
        "//ortools/base",
        "//ortools/base:logging",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_test(
    name = "basic_example_test",
    srcs = ["basic_example.cc"],
    deps = [
        "//ortools/base",
        "//ortools/init",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:globals",
    ],
)

cc_test(
    name = "bin_packing_mip_test",
    srcs = ["bin_packing_mip.cc"],
    deps = ["//ortools/linear_solver"],
)

cc_test(
    name = "linear_programming_example_test",
    srcs = ["linear_programming_example.cc"],
    deps = [
        "//ortools/base",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
    ],
)

cc_test(
    name = "integer_programming_example_test",
    srcs = ["integer_programming_example.cc"],
    deps = [
        "//ortools/base",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
    ],
)

cc_test(
    name = "mip_var_array_test",
    srcs = ["mip_var_array.cc"],
    deps = [
        "//ortools/base",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
    ],
)

cc_test(
    name = "multiple_knapsack_mip_test",
    srcs = ["multiple_knapsack_mip.cc"],
    deps = [
        "//ortools/base",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_test(
    name = "simple_lp_program_test",
    srcs = ["simple_lp_program.cc"],
    deps = [
        "//ortools/base",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
    ],
)

cc_test(
    name = "simple_mip_program_test",
    srcs = ["simple_mip_program.cc"],
    deps = [
        "//ortools/base",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log:globals",
    ],
)

cc_test(
    name = "stigler_diet_test",
    srcs = ["stigler_diet.cc"],
    deps = [
        "//ortools/base",
        "//ortools/linear_solver",
        "@abseil-cpp//absl/base:log_severity",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:globals",
    ],
)

# Model Builder

py_test(
    name = "assignment_mb_py3",
    srcs = ["assignment_mb.py"],
    main = "assignment_mb.py",
    deps = [
        requirement("pandas"),
        "//ortools/linear_solver/python:model_builder",
    ],
)

py_test(
    name = "bin_packing_mb_py3",
    srcs = ["bin_packing_mb.py"],
    main = "bin_packing_mb.py",
    deps = [
        requirement("pandas"),
        "//ortools/linear_solver/python:model_builder",
    ],
)

py_test(
    name = "clone_model_mb_py3",
    srcs = ["clone_model_mb.py"],
    main = "clone_model_mb.py",
    deps = ["//ortools/linear_solver/python:model_builder"],
)

py_test(
    name = "simple_lp_program_mb_py3",
    srcs = ["simple_lp_program_mb.py"],
    main = "simple_lp_program_mb.py",
    deps = ["//ortools/linear_solver/python:model_builder"],
)

py_test(
    name = "simple_mip_program_mb_py3",
    srcs = ["simple_mip_program_mb.py"],
    main = "simple_mip_program_mb.py",
    deps = ["//ortools/linear_solver/python:model_builder"],
)

java_binary(
    name = "AssignmentMb",
    srcs = ["AssignmentMb.java"],
    main_class = "com.google.ortools.linearsolver.samples.AssignmentMb",
    deps = [
        "//ortools/java/com/google/ortools:Loader",
        "//ortools/java/com/google/ortools/modelbuilder",
        "//ortools/linear_solver/java:modelbuilder",
    ],
)

run_binary_test(
    name = "AssignmentMbTest",
    binary = ":AssignmentMb",
)

java_binary(
    name = "BinPackingMb",
    srcs = ["BinPackingMb.java"],
    main_class = "com.google.ortools.linearsolver.samples.BinPackingMb",
    deps = [
        "//ortools/java/com/google/ortools:Loader",
        "//ortools/java/com/google/ortools/modelbuilder",
        "//ortools/linear_solver/java:modelbuilder",
    ],
)

run_binary_test(
    name = "BinPackingMbTest",
    binary = ":BinPackingMb",
)

java_binary(
    name = "CloneModelMb",
    srcs = ["CloneModelMb.java"],
    main_class = "com.google.ortools.linearsolver.samples.CloneModelMb",
    deps = [
        "//ortools/java/com/google/ortools:Loader",
        "//ortools/java/com/google/ortools/modelbuilder",
        "//ortools/linear_solver/java:modelbuilder",
    ],
)

run_binary_test(
    name = "CloneModelMbTest",
    binary = ":CloneModelMb",
)

java_binary(
    name = "SimpleLpProgramMb",
    srcs = ["SimpleLpProgramMb.java"],
    main_class = "com.google.ortools.linearsolver.samples.SimpleLpProgramMb",
    deps = [
        "//ortools/java/com/google/ortools:Loader",
        "//ortools/java/com/google/ortools/modelbuilder",
        "//ortools/linear_solver/java:modelbuilder",
    ],
)

run_binary_test(
    name = "SimpleLpProgramMbTest",
    binary = ":SimpleLpProgramMb",
)

java_binary(
    name = "SimpleMipProgramMb",
    srcs = ["SimpleMipProgramMb.java"],
    main_class = "com.google.ortools.linearsolver.samples.SimpleMipProgramMb",
    deps = [
        "//ortools/java/com/google/ortools:Loader",
        "//ortools/java/com/google/ortools/modelbuilder",
        "//ortools/linear_solver/java:modelbuilder",
    ],
)

run_binary_test(
    name = "SimpleMipProgramMbTest",
    binary = ":SimpleMipProgramMb",
)
