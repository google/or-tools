# Copyright 2010-2025 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:cc_library.bzl", "cc_library")

package(
    default_visibility = [
        "//visibility:public",
    ],
)

# Floating-point code in this directory must not be compiled with
# dangerous optimizations. For example do not assume that FP expressions
# are associative. This is what -fno-fast-math is for.
SAFE_FP_CODE = select({
    "@platforms//os:linux": ["-fno-fast-math"],
    "@platforms//os:macos": [],  # no_fast_math is the default.
    "@platforms//os:windows": [],  # /fp:precise is the default.
    "//conditions:default": [],
})

cc_library(
    name = "base",
    srcs = ["lp_types.cc"],
    hdrs = ["lp_types.h"],
    deps = [
        "//ortools/base",
        "//ortools/base:strong_vector",
        "//ortools/util:bitset",
        "//ortools/util:strong_integers",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
    ],
)

# Handling of permutations.

cc_library(
    name = "permutation",
    hdrs = ["permutation.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        "//ortools/base:strong_vector",
        "//ortools/util:return_macros",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/random",
    ],
)

# Vectors that offer a sparse interface to dense storage.
cc_library(
    name = "scattered_vector",
    hdrs = ["scattered_vector.h"],
    deps = [
        ":base",
        "//ortools/util:bitset",
        "@abseil-cpp//absl/log:check",
    ],
)

# Compressed sparse columns.

cc_library(
    name = "sparse_vector",
    hdrs = ["sparse_vector.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":permutation",
        "//ortools/base",
        "//ortools/base:types",
        "//ortools/graph:iterators",
        "//ortools/util:return_macros",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_library(
    name = "sparse_column",
    srcs = ["sparse_column.cc"],
    hdrs = ["sparse_column.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":permutation",
        ":sparse_vector",
        "//ortools/util:return_macros",
        "@abseil-cpp//absl/log:check",
    ],
)

cc_library(
    name = "sparse_row",
    hdrs = ["sparse_row.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":sparse_vector",
        "//ortools/base:strong_vector",
    ],
)

cc_library(
    name = "sparse",
    srcs = ["sparse.cc"],
    hdrs = [
        "sparse.h",
    ],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":permutation",
        ":scattered_vector",
        ":sparse_column",
        "//ortools/base:types",
        "//ortools/graph:iterators",
        "//ortools/util:bitset",
        "//ortools/util:return_macros",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings:str_format",
        "@abseil-cpp//absl/types:span",
    ],
)

# Matrix scaler.

cc_library(
    name = "matrix_scaler",
    srcs = ["matrix_scaler.cc"],
    hdrs = ["matrix_scaler.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":lp_data",
        ":lp_utils",
        ":sparse",
        ":sparse_column",
        "//ortools/base",
        "//ortools/base:strong_vector",
        "//ortools/base:types",
        "//ortools/glop:parameters_cc_proto",
        "//ortools/glop:revised_simplex",
        "//ortools/glop:status",
        "//ortools/util:return_macros",
        "//ortools/util:time_limit",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

# Linear Programming data storage.

cc_library(
    name = "lp_data",
    srcs = ["lp_data.cc"],
    hdrs = ["lp_data.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":lp_print_utils",
        ":lp_utils",
        ":matrix_utils",
        ":permutation",
        ":sparse",
        ":sparse_column",
        "//ortools/base",
        "//ortools/base:hash",
        "//ortools/base:strong_vector",
        "//ortools/glop:parameters_cc_proto",
        "//ortools/util:fp_utils",
        "//ortools/util:strong_integers",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_library(
    name = "lp_data_utils",
    srcs = ["lp_data_utils.cc"],
    hdrs = ["lp_data_utils.h"],
    deps = [
        ":base",
        ":lp_data",
        ":matrix_scaler",
        ":scattered_vector",
        ":sparse_column",
        "//ortools/glop:parameters_cc_proto",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/types:span",
    ],
)

# Lp utilities.

cc_library(
    name = "lp_utils",
    srcs = ["lp_utils.cc"],
    hdrs = ["lp_utils.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":permutation",
        ":scattered_vector",
        ":sparse_column",
        "//ortools/base:accurate_sum",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "matrix_utils",
    srcs = ["matrix_utils.cc"],
    hdrs = ["matrix_utils.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":sparse",
        ":sparse_column",
        "//ortools/base:hash",
        "@abseil-cpp//absl/log:check",
    ],
)

cc_library(
    name = "lp_parser",
    srcs = ["lp_parser.cc"],
    hdrs = ["lp_parser.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":lp_data",
        ":proto_utils",
        "//ortools/linear_solver:linear_solver_cc_proto",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
        "@re2",
    ],
)

# Linear Programming printing utilities.

cc_library(
    name = "lp_print_utils",
    srcs = ["lp_print_utils.cc"],
    hdrs = ["lp_print_utils.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        "//ortools/base:types",
        "//ortools/util:rational_approximation",
        "@abseil-cpp//absl/strings",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

# Proto conversion

cc_library(
    name = "proto_utils",
    srcs = ["proto_utils.cc"],
    hdrs = ["proto_utils.h"],
    copts = SAFE_FP_CODE,
    visibility = ["//visibility:public"],
    deps = [
        ":base",
        ":lp_data",
        ":sparse",
        ":sparse_column",
        "//ortools/linear_solver:linear_solver_cc_proto",
        "@abseil-cpp//absl/log:check",
    ],
)

# Test utilities.

# MPS reader.
cc_library(
    name = "mps_reader_template",
    srcs = ["mps_reader_template.cc"],
    hdrs = ["mps_reader_template.h"],
    deps = [
        "//ortools/base:file",
        "//ortools/base:status_macros",
        "//ortools/util:filelineiter",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/container:flat_hash_set",
        "@abseil-cpp//absl/container:inlined_vector",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
    ],
)

cc_library(
    name = "mps_reader",
    srcs = ["mps_reader.cc"],
    hdrs = ["mps_reader.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":lp_data",
        ":mps_reader_template",
        "//ortools/base:protobuf_util",
        "//ortools/base:status_macros",
        "//ortools/linear_solver:linear_solver_cc_proto",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/container:btree",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/log",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
    ],
)

# Utility to represent the MPS layout as a PNG.

cc_library(
    name = "sol_reader",
    srcs = ["sol_reader.cc"],
    hdrs = ["sol_reader.h"],
    deps = [
        ":base",
        ":lp_data",
        "//ortools/base:numbers",
        "//ortools/base:status_macros",
        "//ortools/linear_solver:linear_solver_cc_proto",
        "//ortools/util:file_util",
        "@abseil-cpp//absl/container:flat_hash_map",
        "@abseil-cpp//absl/status",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/strings",
    ],
)

# Library to show matrix fill-in as a PNG bitmap.

# Decompose a LinearProgram into several independent LinearPrograms.

cc_library(
    name = "lp_decomposer",
    srcs = ["lp_decomposer.cc"],
    hdrs = ["lp_decomposer.h"],
    copts = SAFE_FP_CODE,
    deps = [
        ":base",
        ":lp_data",
        ":sparse",
        ":sparse_column",
        "//ortools/algorithms:dynamic_partition",
        "//ortools/util:bitset",
        "@abseil-cpp//absl/base:core_headers",
        "@abseil-cpp//absl/log:check",
        "@abseil-cpp//absl/synchronization",
        "@abseil-cpp//absl/types:span",
    ],
)
