diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9b51e9722..33c1021d4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -42,7 +42,7 @@ else (BUILD_SHARED_LIBS)
 endif (BUILD_SHARED_LIBS)
 option(protobuf_BUILD_SHARED_LIBS "Build Shared Libraries" ${protobuf_BUILD_SHARED_LIBS_DEFAULT})
 include(CMakeDependentOption)
-cmake_dependent_option(protobuf_MSVC_STATIC_RUNTIME "Link static runtime libraries" ON
+cmake_dependent_option(protobuf_MSVC_STATIC_RUNTIME "Link static runtime libraries" OFF
   "NOT protobuf_BUILD_SHARED_LIBS" OFF)
 set(protobuf_WITH_ZLIB_DEFAULT ON)
 option(protobuf_WITH_ZLIB "Build with zlib support" ${protobuf_WITH_ZLIB_DEFAULT})
@@ -160,24 +160,16 @@ endif()
 
 set(_protobuf_FIND_ZLIB)
 if (protobuf_WITH_ZLIB)
-  find_package(ZLIB)
-  if (ZLIB_FOUND)
-    set(HAVE_ZLIB 1)
-    # FindZLIB module define ZLIB_INCLUDE_DIRS variable
-    # Set ZLIB_INCLUDE_DIRECTORIES for compatible
-    set(ZLIB_INCLUDE_DIRECTORIES ${ZLIB_INCLUDE_DIRECTORIES} ${ZLIB_INCLUDE_DIRS})
-    # Using imported target if exists
-    if (TARGET ZLIB::ZLIB)
-      set(ZLIB_LIBRARIES ZLIB::ZLIB)
-      set(_protobuf_FIND_ZLIB "if(NOT ZLIB_FOUND)\n  find_package(ZLIB)\nendif()")
-    endif (TARGET ZLIB::ZLIB)
-  else (ZLIB_FOUND)
-    set(HAVE_ZLIB 0)
-    # Explicitly set these to empty (override NOT_FOUND) so cmake doesn't
-    # complain when we use them later.
-    set(ZLIB_INCLUDE_DIRECTORIES)
-    set(ZLIB_LIBRARIES)
-  endif (ZLIB_FOUND)
+ if (NOT TARGET ZLIB::ZLIB)
+   find_package(ZLIB REQUIRED)
+ endif()
+ set(HAVE_ZLIB 1)
+ # FindZLIB module define ZLIB_INCLUDE_DIRS variable
+ # Set ZLIB_INCLUDE_DIRECTORIES for compatible
+ set(ZLIB_INCLUDE_DIRECTORIES ${ZLIB_INCLUDE_DIRECTORIES} ${ZLIB_INCLUDE_DIRS})
+ # Using imported target if exists
+ set(ZLIB_LIBRARIES ZLIB::ZLIB)
+ set(_protobuf_FIND_ZLIB "if(NOT ZLIB_FOUND AND NOT TARGET ZLIB::ZLIB)\n  find_package(ZLIB REQUIRED)\nendif()")
 endif (protobuf_WITH_ZLIB)
 
 # We need to link with libatomic on systems that do not have builtin atomics, or
@@ -279,7 +271,6 @@ else (MSVC)
 endif (MSVC)
 
 include_directories(
-  ${ZLIB_INCLUDE_DIRECTORIES}
   ${protobuf_BINARY_DIR}
   # Support #include-ing other top-level directories, i.e. upb_generator.
   ${protobuf_SOURCE_DIR}
diff --git a/src/google/protobuf/port.h b/src/google/protobuf/port.h
index 4fec7dc13..afb6f846a 100644
--- a/src/google/protobuf/port.h
+++ b/src/google/protobuf/port.h
@@ -49,31 +49,35 @@ inline PROTOBUF_ALWAYS_INLINE void StrongPointer(T* var) {
 #endif
 }
 
-// Similar to the overload above, but optimized for constant inputs.
+#if defined(__x86_64__) && defined(__linux__) && !defined(__APPLE__) && \
+    !defined(__ANDROID__) && defined(__clang__) && __clang_major__ >= 19
+// Optimized implementation for clang where we can generate a relocation without
+// adding runtime instructions.
 template <typename T, T ptr>
 inline PROTOBUF_ALWAYS_INLINE void StrongPointer() {
-#if defined(__x86_64__) && defined(__linux__) && !defined(__APPLE__) &&     \
-    !defined(__ANDROID__) && defined(__clang__) && __clang_major__ >= 19 && \
-    !defined(PROTOBUF_INTERNAL_TEMPORARY_STRONG_POINTER_OPT_OUT)
   // This injects a relocation in the code path without having to run code, but
   // we can only do it with a newer clang.
   asm(".reloc ., BFD_RELOC_NONE, %p0" ::"Ws"(ptr));
-#else
-  StrongPointer(ptr);
-#endif
 }
 
 template <typename T>
 inline PROTOBUF_ALWAYS_INLINE void StrongReferenceToType() {
-  constexpr auto ptr = T::template GetStrongPointerForType<T>();
-#if defined(__cpp_nontype_template_args) && \
-    __cpp_nontype_template_args >= 201411L
-  // We can only use `ptr` as a template parameter since C++17
+  static constexpr auto ptr = T::template GetStrongPointerForType<T>();
   return StrongPointer<decltype(ptr), ptr>();
-#else
-  return StrongPointer(ptr);
-#endif
 }
+#else   // .reloc
+// Portable fallback. It usually generates a single LEA instruction or
+// equivalent.
+template <typename T, T ptr>
+inline PROTOBUF_ALWAYS_INLINE void StrongPointer() {
+  StrongPointer(ptr);
+}
+
+template <typename T>
+inline PROTOBUF_ALWAYS_INLINE void StrongReferenceToType() {
+  return StrongPointer(T::template GetStrongPointerForType<T>());
+}
+#endif  // .reloc
 
 
 // See comments on `AllocateAtLeast` for information on size returning new.
