diff --git a/src/lpi/lpi_glop.cpp b/src/lpi/lpi_glop.cpp
index a90120188a..2c068e5e30 100644
--- a/src/lpi/lpi_glop.cpp
+++ b/src/lpi/lpi_glop.cpp
@@ -51,7 +51,6 @@
 #include "ortools/util/time_limit.h"
 
 #include "ortools/base/logging.h"
-#include "ortools/base/vlog_is_on.h"
 
 #include "lpi/lpi.h"
 #include "scip/pub_message.h"
@@ -2942,12 +2941,12 @@ SCIP_RETCODE SCIPlpiSetIntpar(
       SCIPdebugMessage("SCIPlpiSetIntpar: SCIP_LPPAR_LPINFO -> %d.\n", ival);
       if ( ival == 0 )
       {
-         (void) google::SetVLOGLevel("*", google::GLOG_INFO);
+           absl::SetFlag(&FLAGS_stderrthreshold, 2);
          lpi->lp_info = false;
       }
       else
       {
-         (void) google::SetVLOGLevel("*", google::GLOG_ERROR);
+           absl::SetFlag(&FLAGS_stderrthreshold, 0);
          lpi->lp_info = true;
       }
       break;
@@ -3190,7 +3189,7 @@ SCIP_RETCODE SCIPlpiReadLP(
 
    const std::string filespec(fname);
    MPModelProto proto;
-   if ( ! ReadFileToProto(filespec, &proto) )
+   if ( ! ReadFileToProto(filespec, &proto).ok() )
    {
       SCIPerrorMessage("Could not read <%s>\n", fname);
       return SCIP_READERROR;
@@ -3214,7 +3213,7 @@ SCIP_RETCODE SCIPlpiWriteLP(
    MPModelProto proto;
    LinearProgramToMPModelProto(*lpi->linear_program, &proto);
    const std::string filespec(fname);
-   if ( ! WriteProtoToFile(filespec, proto, operations_research::ProtoWriteFormat::kProtoText, true) )
+   if ( ! WriteProtoToFile(filespec, proto, operations_research::ProtoWriteFormat::kProtoText, true).ok() )
    {
       SCIPerrorMessage("Could not write <%s>\n", fname);
       return SCIP_READERROR;
